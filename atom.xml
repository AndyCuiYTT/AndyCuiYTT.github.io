<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AndyCuiの博客</title>
  <icon>https://www.gravatar.com/avatar/f56b4eab9dc434aef450be6b05d1ce47</icon>
  <subtitle>既然认准了一条路，就不要去打听要走多久。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andycui.top/"/>
  <updated>2018-10-19T00:24:45.992Z</updated>
  <id>http://andycui.top/</id>
  
  <author>
    <name>AndyCui</name>
    <email>AndyCuiYTT@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>禁止 UIButton 连续点击</title>
    <link href="http://andycui.top/2018/09/10/swift%20%E7%A6%81%E6%AD%A2%20UIButton%20%E8%BF%9E%E7%BB%AD%E7%82%B9%E5%87%BB/"/>
    <id>http://andycui.top/2018/09/10/swift 禁止 UIButton 连续点击/</id>
    <published>2018-09-10T02:24:19.000Z</published>
    <updated>2018-10-19T00:24:45.992Z</updated>
    
    <content type="html"><![CDATA[<p>UIButton是我们iOS开发中常用的控件，连续／抖动点击造成数据请求或其它操作重复执行也是用户使用中常发生的 !解决这一问题的方法很多,简单总结了一下.<br><a id="more"></a></p><h2 id="使用UIButton的enabled或userInteractionEnabled"><a href="#使用UIButton的enabled或userInteractionEnabled" class="headerlink" title="使用UIButton的enabled或userInteractionEnabled"></a>使用UIButton的enabled或userInteractionEnabled</h2><p>使用UIButton的enabled属性,点击后将enabled设置为 false, 进行任务处理,完成任务后再将其设置为 false.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    sender.isEnabled = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 网络请求</span></span><br><span class="line">    <span class="comment">// 数据处理</span></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    sender.isEnabled = <span class="literal">true</span>        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="runtime-对-sendAction-to-forEvent-进行处理"><a href="#runtime-对-sendAction-to-forEvent-进行处理" class="headerlink" title="runtime 对 sendAction:to:forEvent: 进行处理"></a>runtime 对 sendAction:to:forEvent: 进行处理</h2><p>添加 UIButton 的分类,在其分类进行处理,对全局 UIButton 有效<br>自定义 ytt<em>sendAction(</em> action:  to:, for event:) 方法,对点击进行处理,利用 runtime 进行方法交换.<br>swift 取消了 load 方法,具体实现方法交换参考<a href="https://www.jianshu.com/p/335ba236b56a" target="_blank" rel="noopener">swift下使用runtime交换方法的实现</a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> <span class="type">UIButton_acceptEventTime</span>: <span class="type">Void</span>?</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> <span class="type">UIButton_acceptInterval</span>: <span class="type">Void</span>?</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span>: <span class="title">YTTExtensionProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">awake</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> oldMethod = class_getInstanceMethod(<span class="keyword">self</span>, #selector(sendAction(<span class="number">_</span>:to:<span class="keyword">for</span>:))), <span class="keyword">let</span> newMethod = class_getInstanceMethod(<span class="keyword">self</span>, #selector(ytt_sendAction(<span class="number">_</span>:to:<span class="keyword">for</span>:))) &#123;</span><br><span class="line">            method_exchangeImplementations(oldMethod, newMethod)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连续点击时间间隔</span></span><br><span class="line">    <span class="keyword">var</span> acceptEventInterval: <span class="type">TimeInterval</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> time = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">UIButton_acceptInterval</span>) <span class="keyword">as</span>? <span class="type">TimeInterval</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> time</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">UIButton_acceptInterval</span>, <span class="number">1</span>, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">UIButton_acceptInterval</span>, newValue, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上次点击时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> acceptEventTime: <span class="type">TimeInterval</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> time = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">UIButton_acceptEventTime</span>) <span class="keyword">as</span>? <span class="type">TimeInterval</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> time</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">UIButton_acceptEventTime</span>, <span class="number">0</span>, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">UIButton_acceptEventTime</span>, newValue, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">ytt_sendAction</span><span class="params">(<span class="number">_</span> action: Selector, to target: Any?, <span class="keyword">for</span> event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">Date</span>().timeIntervalSince1970 - <span class="keyword">self</span>.acceptEventTime &gt;= acceptEventInterval &#123;</span><br><span class="line">            <span class="keyword">self</span>.ytt_sendAction(action, to: target, <span class="keyword">for</span>: event)</span><br><span class="line">            acceptEventTime = <span class="type">Date</span>().timeIntervalSince1970</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下载文件<a href="UIButton+YTT.zip">UIButton+YTT</a>,将两个文件拖入到工程,添加 AppDelegate 扩展:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIApplication</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> runOnce: <span class="type">Void</span> = &#123;</span><br><span class="line">        <span class="type">YTTExtensionManager</span>.harmlessFunction()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">open</span> <span class="keyword">var</span> next: <span class="type">UIResponder</span>? &#123;</span><br><span class="line">        <span class="comment">// Called before applicationDidFinishLaunching</span></span><br><span class="line">        <span class="type">UIApplication</span>.runOnce</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIButton是我们iOS开发中常用的控件，连续／抖动点击造成数据请求或其它操作重复执行也是用户使用中常发生的 !解决这一问题的方法很多,简单总结了一下.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="总结" scheme="http://andycui.top/categories/iOS/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="runtime" scheme="http://andycui.top/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>带复制功能的 Label</title>
    <link href="http://andycui.top/2018/08/30/swift%20%E5%B8%A6%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%E7%9A%84%20Label/"/>
    <id>http://andycui.top/2018/08/30/swift 带复制功能的 Label/</id>
    <published>2018-08-30T07:09:16.000Z</published>
    <updated>2018-10-19T00:25:00.671Z</updated>
    
    <content type="html"><![CDATA[<p>产品需求需要对 UILabel 展示的文本进行复制操作,针对这一需求想出了两种实现方式: 1.自定义控件,添加复制功能. 2.使用 UItextView 实现.<br><a id="more"></a></p><h2 id="通过自定义-UILabel-的子类实现"><a href="#通过自定义-UILabel-的子类实现" class="headerlink" title="通过自定义 UILabel 的子类实现"></a>通过自定义 UILabel 的子类实现</h2><ul><li><p>创建 YTTCopyLabel, 使其继承于 UILabel.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YTTCopyLabel</span>: <span class="title">UILabel</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使 YTTCopyLabel 可以进行交互, 添加长按手势使其触发复制事件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> canBecomeFirstResponder: <span class="type">Bool</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">    setup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    setup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> longPressGestureRecognizer = <span class="type">UILongPressGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(longPressAction(<span class="number">_</span>:)))</span><br><span class="line">    <span class="keyword">self</span>.addGestureRecognizer(longPressGestureRecognizer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在长按事件中实现复制功能<br><em>使用 UIMenuController 弹出复制菜单.<a href="https://www.jianshu.com/p/71076f65835d" target="_blank" rel="noopener">使用简介</a></em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">longPressAction</span><span class="params">(<span class="number">_</span> sender: UIGestureRecognizer)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> sender.state == .began <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变为第一响应者</span></span><br><span class="line">    <span class="keyword">self</span>.becomeFirstResponder()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 菜单控制器</span></span><br><span class="line">    <span class="keyword">let</span> menuController = <span class="type">UIMenuController</span>.shared</span><br><span class="line">    <span class="comment">// 复制 item</span></span><br><span class="line">    <span class="keyword">let</span> copyItem = <span class="type">UIMenuItem</span>(title: <span class="string">"复制"</span>, action: #selector(copyText))</span><br><span class="line">    <span class="comment">// 添加 item 到 menu 控制器</span></span><br><span class="line">    menuController.menuItems = [copyItem]</span><br><span class="line">    <span class="comment">// 设置菜单控制器点击区域为当前控件 bounds</span></span><br><span class="line">    menuController.setTargetRect(<span class="keyword">self</span>.bounds, <span class="keyword">in</span>: <span class="keyword">self</span>)</span><br><span class="line">    <span class="comment">// 菜单显示器可见</span></span><br><span class="line">    menuController.setMenuVisible(<span class="literal">true</span>, animated: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确认 label 具有的操作能力</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">canPerformAction</span><span class="params">(<span class="number">_</span> action: Selector, withSender sender: Any?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> action == #selector(copyText) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现将 label 内容放到剪切板</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">copyText</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">UIPasteboard</span>.general.string = <span class="keyword">self</span>.text</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在需要的地方使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> label = <span class="type">YTTCopyLabel</span>(frame: <span class="type">CGRect</span>(x: <span class="number">20</span>, y: <span class="number">100</span>, width: <span class="keyword">self</span>.view.frame.width - <span class="number">40</span>, height: <span class="number">30</span>))</span><br></pre></td></tr></table></figure></li></ul><p>运行效果如下:<br><img src="YTTCopyLabel.PNG" alt="copyLabel"><br><a href="YTTCopyLabel.zip">YTTCopyLabel.swift</a></p><h2 id="通过设置-UITextView-的属性实现"><a href="#通过设置-UITextView-的属性实现" class="headerlink" title="通过设置 UITextView 的属性实现"></a>通过设置 UITextView 的属性实现</h2><p>UITextView 本身就有复制的功能,他有两个属性，一个可控制其是否编辑，一个是可控制其是否可选,只需将其可编辑设为 false<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEditable = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><ul><li><p>创建 YTTCustomTextView,使其继承与 UITextView</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YTTCustomTextView</span>: <span class="title">UITextView</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写父类方法,使其使其编辑功能</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBInspectable</span></span><br><span class="line"><span class="keyword">var</span> isAutoLayout: <span class="type">Bool</span> = <span class="literal">true</span>  <span class="comment">// 是否是自适应布局</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">    setup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>, textContainer: <span class="type">NSTextContainer</span>?) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame, textContainer: textContainer)</span><br><span class="line">    setup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.isEditable = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">self</span>.isScrollEnabled = <span class="literal">false</span> <span class="comment">// 设为 false 可自适应</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写属性 text 与 attributedText, 进行自适应布局</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> text: <span class="type">String</span>! &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.text</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.text = newValue</span><br><span class="line">        <span class="keyword">if</span> !isAutoLayout &#123;</span><br><span class="line">            <span class="keyword">let</span> width = <span class="keyword">self</span>.bounds.width - (<span class="keyword">self</span>.contentInset.<span class="keyword">left</span> + <span class="keyword">self</span>.contentInset.<span class="keyword">right</span> + <span class="keyword">self</span>.textContainerInset.<span class="keyword">left</span> + <span class="keyword">self</span>.textContainerInset.<span class="keyword">right</span> + <span class="keyword">self</span>.textContainer.lineFragmentPadding * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">let</span> paragraphStyle = <span class="type">NSMutableParagraphStyle</span>()</span><br><span class="line">            paragraphStyle.lineBreakMode = <span class="keyword">self</span>.textContainer.lineBreakMode</span><br><span class="line">            <span class="keyword">let</span> wordHeight = (<span class="keyword">self</span>.text <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with: <span class="type">CGSize</span>(width: width, height: <span class="type">CGFloat</span>.greatestFiniteMagnitude), options: [.usesLineFragmentOrigin, .usesFontLeading], attributes: [.font : <span class="keyword">self</span>.font!, .paragraphStyle: paragraphStyle ], context: <span class="literal">nil</span>).height + <span class="keyword">self</span>.textContainerInset.top + <span class="keyword">self</span>.textContainerInset.bottom + <span class="keyword">self</span>.textContainer.lineFragmentPadding * <span class="number">2</span> + <span class="keyword">self</span>.contentInset.top + <span class="keyword">self</span>.contentInset.bottom</span><br><span class="line">            <span class="keyword">let</span> rect = <span class="type">CGRect</span>(x: <span class="keyword">self</span>.frame.minX, y: <span class="keyword">self</span>.frame.minY, width: width, height: wordHeight)</span><br><span class="line">            <span class="keyword">self</span>.frame = rect</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> attributedText: <span class="type">NSAttributedString</span>! &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.attributedText</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.attributedText = newValue</span><br><span class="line">        <span class="keyword">if</span> !isAutoLayout &#123;</span><br><span class="line">            <span class="keyword">let</span> width = <span class="keyword">self</span>.bounds.width - (<span class="keyword">self</span>.contentInset.<span class="keyword">left</span> + <span class="keyword">self</span>.contentInset.<span class="keyword">right</span> + <span class="keyword">self</span>.textContainerInset.<span class="keyword">left</span> + <span class="keyword">self</span>.textContainerInset.<span class="keyword">right</span> + <span class="keyword">self</span>.textContainer.lineFragmentPadding * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">let</span> wordHeight = newValue.boundingRect(with: <span class="type">CGSize</span>(width: width, height: <span class="type">CGFloat</span>.greatestFiniteMagnitude), options: [.usesLineFragmentOrigin, .usesFontLeading], context: <span class="literal">nil</span>).height + <span class="keyword">self</span>.textContainerInset.top + <span class="keyword">self</span>.textContainerInset.bottom + <span class="keyword">self</span>.textContainer.lineFragmentPadding * <span class="number">2</span> + <span class="keyword">self</span>.contentInset.top + <span class="keyword">self</span>.contentInset.bottom</span><br><span class="line">            <span class="keyword">let</span> rect = <span class="type">CGRect</span>(x: <span class="keyword">self</span>.frame.minX, y: <span class="keyword">self</span>.frame.minY, width: width, height: wordHeight)</span><br><span class="line">            <span class="keyword">self</span>.frame = rect</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断屏幕点击事件是否在本视图,不是取消选中状态</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置点击空白取消选中效果</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(<span class="number">_</span> point: CGPoint, with event: UIEvent?)</span></span> -&gt; <span class="type">UIView</span>? &#123;</span><br><span class="line">    <span class="comment">// 判断点击点是否在本视图</span></span><br><span class="line">    <span class="keyword">if</span> !<span class="keyword">self</span>.point(inside: point, with: event) &#123;</span><br><span class="line">        <span class="keyword">self</span>.selectedRange = <span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 设置为 NSMakeRange(0, 0) 取消选中效果</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.hitTest(point, with: event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="YTTCustomTextView.zip">YTTCustomTextView</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;产品需求需要对 UILabel 展示的文本进行复制操作,针对这一需求想出了两种实现方式: 1.自定义控件,添加复制功能. 2.使用 UItextView 实现.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="自定义视图" scheme="http://andycui.top/categories/iOS/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="自定义视图" scheme="http://andycui.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>YTTCache</title>
    <link href="http://andycui.top/2018/08/27/YTTCache/"/>
    <id>http://andycui.top/2018/08/27/YTTCache/</id>
    <published>2018-08-27T03:00:26.000Z</published>
    <updated>2018-09-06T03:47:59.785Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/release/AndyCuiYTT/YTTCache.svg?style=plastic" alt="GitHub release"><br>iOS 开发中经常会用到本地存储,加之最近在了解组件化,所以对本地存储这块做了组件化处理,且在完善中…<br><a id="more"></a></p><h2 id="YTTCache"><a href="#YTTCache" class="headerlink" title="YTTCache"></a><a href="https://github.com/AndyCuiYTT/YTTCache" target="_blank" rel="noopener">YTTCache</a></h2><p>使用 SQLite3 对数据进行存储,采用键值对形式存储数据.<br>使用 <a href="https://github.com/AndyCuiYTT/SQLite.swift" target="_blank" rel="noopener">SQLite.swift</a> 进行数据库操作.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>YTTCache  可以通过 <a href="https://cocoapods.org" target="_blank" rel="noopener">CocoaPods</a> 安装. 只需要在你的 Podfile 添加:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'YTTCache'</span></span><br></pre></td></tr></table></figure></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Cache-for-String"><a href="#Cache-for-String" class="headerlink" title="Cache for String"></a>Cache for String</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> YTTCache</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存数据</span></span><br><span class="line"><span class="type">YTTCache</span>.storeString(<span class="string">"value"</span>, key: <span class="string">"key"</span>)</span><br><span class="line"><span class="comment">// 刷新缓存数据</span></span><br><span class="line"><span class="type">YTTCache</span>.updateStoreString(<span class="string">"new value"</span>, key: <span class="string">"key"</span>)</span><br><span class="line"><span class="comment">// 获取缓存数据</span></span><br><span class="line"><span class="type">YTTCache</span>.stringForKey(<span class="string">"key"</span>)</span><br><span class="line"><span class="comment">// 删除缓存数据</span></span><br><span class="line"><span class="type">YTTCache</span>.removeCacheForKey(<span class="string">"key"</span>)</span><br><span class="line"><span class="comment">// 清空缓存</span></span><br><span class="line"><span class="type">YTTCache</span>.cleanCache()</span><br></pre></td></tr></table></figure><h3 id="Cache-For-Request"><a href="#Cache-For-Request" class="headerlink" title="Cache For Request"></a>Cache For Request</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> YTTCache</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 缓存请求结果 JSON 数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - jsonStr: JSON 字符串</span></span><br><span class="line"><span class="comment">///   - url: 请求 URL 地址</span></span><br><span class="line"><span class="comment">///   - param: 请求参数</span></span><br><span class="line"><span class="comment">/// - Returns: 是否缓存成功</span></span><br><span class="line"><span class="type">YTTRequestCache</span>.storeJSONString(<span class="string">"&#123;/"</span>name/<span class="string">":/"</span><span class="type">AndyCui</span>/<span class="string">",/"</span>email/<span class="string">":/"</span><span class="type">AndyCuiYTT</span>@<span class="number">163</span>.com/<span class="string">"&#125;"</span>, url: <span class="string">"https:****"</span>, param: [<span class="string">"username"</span>:<span class="string">"AndyCui"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 获取缓存 JSON 数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - url: 请求 URL 地址</span></span><br><span class="line"><span class="comment">///   - param: 请求参数</span></span><br><span class="line"><span class="comment">///   - timeoutIntervalForCache: 缓存时间(以秒为单位),默认永久</span></span><br><span class="line"><span class="comment">/// - Returns: 缓存 JSON 字符串,没有返回 nil</span></span><br><span class="line"><span class="type">YTTRequestCache</span>.<span class="type">JSONStringForKey</span>(url: <span class="string">"https:****"</span>, param: [<span class="string">"username"</span>:<span class="string">"AndyCui"</span>], timeoutIntervalForCache: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 删除某条 JSON 数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - url: 请求 URL 地址</span></span><br><span class="line"><span class="comment">///   - param: 请求参数</span></span><br><span class="line"><span class="comment">/// - Returns: 是否删除成功</span></span><br><span class="line"><span class="type">YTTRequestCache</span>.removeJSONStringForKey(url: <span class="string">"https:****"</span>, param: [<span class="string">"username"</span>:<span class="string">"AndyCui"</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/release/AndyCuiYTT/YTTCache.svg?style=plastic&quot; alt=&quot;GitHub release&quot;&gt;&lt;br&gt;iOS 开发中经常会用到本地存储,加之最近在了解组件化,所以对本地存储这块做了组件化处理,且在完善中…&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="组件库" scheme="http://andycui.top/categories/iOS/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
    
      <category term="持久化" scheme="http://andycui.top/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
      <category term="三方库" scheme="http://andycui.top/tags/%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发常用三方库总结</title>
    <link href="http://andycui.top/2018/08/23/iOS%20%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93%E6%80%BB%E7%BB%93/"/>
    <id>http://andycui.top/2018/08/23/iOS 开发常用三方库总结/</id>
    <published>2018-08-23T01:40:06.000Z</published>
    <updated>2018-09-06T03:47:59.890Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 开发中为了加快开发速度经常会引用一些三方库,对常用的库进行了总结.<br><a id="more"></a></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">OC</th><th style="text-align:center">swift</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">网络请求</td><td style="text-align:center"><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a></td><td style="text-align:center"><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a></td><td style="text-align:center">轻量级网络请求开源框架</td></tr><tr><td style="text-align:center">图片加载</td><td style="text-align:center"><a href="https://github.com/rs/SDWebImage" target="_blank" rel="noopener">SDWebImage</a></td><td style="text-align:center"><a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="noopener">Kingfisher</a></td><td style="text-align:center">在网络下载并缓存图片</td></tr><tr><td style="text-align:center">布局</td><td style="text-align:center"><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="noopener">Masonry</a></td><td style="text-align:center"><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit</a></td><td style="text-align:center">自动布局框架</td></tr><tr><td style="text-align:center">加载</td><td style="text-align:center"><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="noopener">MJRefresh</a></td><td style="text-align:center">-</td><td style="text-align:center">下拉刷新框架</td></tr><tr><td style="text-align:center">模型转换</td><td style="text-align:center"><a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a>/<a href="https://github.com/ibireme/YYModel" target="_blank" rel="noopener">YYModel</a></td><td style="text-align:center"><a href="https://github.com/alibaba/HandyJSON" target="_blank" rel="noopener">HandyJSON</a></td><td style="text-align:center">模型序列化成JSON及反序列化库</td></tr><tr><td style="text-align:center">SQLite</td><td style="text-align:center"><a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">FMDB</a></td><td style="text-align:center"><a href="https://github.com/stephencelis/SQLite.swift" target="_blank" rel="noopener">SQLite.swift</a></td><td style="text-align:center">SQILite 管理工具</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 开发中为了加快开发速度经常会引用一些三方库,对常用的库进行了总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="总结" scheme="http://andycui.top/categories/iOS/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="三方库" scheme="http://andycui.top/tags/%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="iOS" scheme="http://andycui.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 获取系统信息</title>
    <link href="http://andycui.top/2018/08/21/iOS%20%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://andycui.top/2018/08/21/iOS 获取系统信息/</id>
    <published>2018-08-21T08:02:51.000Z</published>
    <updated>2018-09-06T03:47:59.943Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 开发经常需要获取手机系统一些消息,总结了常用的一些信息获取.<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YTTSystemInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取设备名称</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">deviceName</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.current.name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取系统名称</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">systemName</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.current.systemName</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 系统版本号</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">systemVersion</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.current.systemVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取设备唯一标示</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">deviceUUID</span>: <span class="title">String</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.current.identifierForVendor?.uuidString</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取设备型号</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">deviceModel</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIDevice</span>.current.model</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取 app 名称</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">appName</span>: <span class="title">String</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Bundle</span>.main.infoDictionary?[<span class="string">"CFBundleDisplayName"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取 app 版本号</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">appVersion</span>: <span class="title">String</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Bundle</span>.main.infoDictionary?[<span class="string">"CFBundleShortVersionString"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取 app 构建版本号</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">appBuildVersion</span>: <span class="title">String</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Bundle</span>.main.infoDictionary?[<span class="string">"CFBundleVersion"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取设备具体型号</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">deviceModelName</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> systemInfo = utsname()</span><br><span class="line">        uname(&amp;systemInfo)</span><br><span class="line">        <span class="keyword">let</span> machineMirror = <span class="type">Mirror</span>(reflecting: systemInfo.machine)</span><br><span class="line">        <span class="keyword">let</span> identifier = machineMirror.children.<span class="built_in">reduce</span>(<span class="string">""</span>) &#123; identifier, element <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> value = element.value <span class="keyword">as</span>? <span class="type">Int8</span>, value != <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> identifier &#125;</span><br><span class="line">            <span class="keyword">return</span> identifier + <span class="type">String</span>(<span class="type">UnicodeScalar</span>(<span class="type">UInt8</span>(value)))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> identifier &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"i386"</span>: <span class="keyword">return</span> <span class="string">"Simulator"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"x86_64"</span>: <span class="keyword">return</span> <span class="string">"Simulator"</span></span><br><span class="line">            <span class="comment">// iphone 系列</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone1,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 1G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone1,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 3G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone2,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 3GS"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone3,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 4 (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone3,2"</span>: <span class="keyword">return</span> <span class="string">"Verizon iPhone 4"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone3,3"</span>: <span class="keyword">return</span> <span class="string">"iPhone 4 (CDMA/Verizon/Sprint)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone4,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 4S"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone5,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 5"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone5,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 5"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone5,3"</span>: <span class="keyword">return</span> <span class="string">"iPhone 5C"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone5,4"</span>: <span class="keyword">return</span> <span class="string">"iPhone 5C"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone6,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 5S"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone6,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 5S"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone7,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 6 Plus"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone7,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 6"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone8,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 6s"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone8,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 6s Plus"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone8,4"</span>: <span class="keyword">return</span> <span class="string">"iPhone SE"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone9,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 7 (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone9,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 7 Plus (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone9,3"</span>: <span class="keyword">return</span> <span class="string">"iPhone 7 (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone9,4"</span>: <span class="keyword">return</span> <span class="string">"iPhone 7 Plus (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone10,1"</span>: <span class="keyword">return</span> <span class="string">"iPhone 8 (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone10,2"</span>: <span class="keyword">return</span> <span class="string">"iPhone 8 Plus (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone10,3"</span>: <span class="keyword">return</span> <span class="string">"iPhone X (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone10,4"</span>: <span class="keyword">return</span> <span class="string">"iPhone 8 (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone10,5"</span>: <span class="keyword">return</span> <span class="string">"iPhone 8 Plus (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPhone10,6"</span>: <span class="keyword">return</span> <span class="string">"iPhone X (GSM)"</span></span><br><span class="line">            <span class="comment">// iPod 系列</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPod1,1"</span>: <span class="keyword">return</span> <span class="string">"iPod Touch 1G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPod2,1"</span>: <span class="keyword">return</span> <span class="string">"iPod Touch 2G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPod3,1"</span>: <span class="keyword">return</span> <span class="string">"iPod Touch 3G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPod4,1"</span>: <span class="keyword">return</span> <span class="string">"iPod Touch 4G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPod5,1"</span>: <span class="keyword">return</span> <span class="string">"iPod Touch 5G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPod7,1"</span>: <span class="keyword">return</span> <span class="string">"iPod Touch 6G"</span></span><br><span class="line">            <span class="comment">// iPad</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad1,1"</span>: <span class="keyword">return</span> <span class="string">"iPad"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad1,2"</span>: <span class="keyword">return</span> <span class="string">"iPad 3G"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,1"</span>: <span class="keyword">return</span> <span class="string">"iPad 2 (WiFi)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,2"</span>: <span class="keyword">return</span> <span class="string">"iPad 2 (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,3"</span>: <span class="keyword">return</span> <span class="string">"iPad 2 (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,4"</span>: <span class="keyword">return</span> <span class="string">"iPad 2 (32nm)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,5"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini (WiFi)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,6"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini (GSM)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad2,7"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad3,1"</span>: <span class="keyword">return</span> <span class="string">"iPad 3(WiFi)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad3,2"</span>: <span class="keyword">return</span> <span class="string">"iPad 3(CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad3,3"</span>: <span class="keyword">return</span> <span class="string">"iPad 3(4G)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad3,4"</span>: <span class="keyword">return</span> <span class="string">"iPad 4 (WiFi)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad3,5"</span>: <span class="keyword">return</span> <span class="string">"iPad 4 (4G)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad3,6"</span>: <span class="keyword">return</span> <span class="string">"iPad 4 (CDMA)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,1"</span>: <span class="keyword">return</span> <span class="string">"iPad Air"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,2"</span>: <span class="keyword">return</span> <span class="string">"iPad Air"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,3"</span>: <span class="keyword">return</span> <span class="string">"iPad Air"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,4"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 2"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,5"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 2"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,6"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 2"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,7"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 3"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,8"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 3"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad4,9"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 3"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad5,1"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 4"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad5,2"</span>: <span class="keyword">return</span> <span class="string">"iPad Mini 4"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad5,3"</span>: <span class="keyword">return</span> <span class="string">"iPad Air 2"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad5,4"</span>: <span class="keyword">return</span> <span class="string">"iPad Air 2"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad6,3"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO (12.9)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad6,4"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO (12.9)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad6,7"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO (9.7)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad6,8"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO (9.7)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad6,11"</span>: <span class="keyword">return</span> <span class="string">"iPad 5"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad6,12"</span>: <span class="keyword">return</span> <span class="string">"iPad 5"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad7,1"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO 2 (12.9)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad7,2"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO 2 (12.9)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad7,3"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO (10.5)"</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"iPad7,4"</span>: <span class="keyword">return</span> <span class="string">"iPad PRO (10.5)"</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="YTTSystemInfo.zip">附件下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 开发经常需要获取手机系统一些消息,总结了常用的一些信息获取.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="系统信息" scheme="http://andycui.top/categories/iOS/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    
    
      <category term="系统信息" scheme="http://andycui.top/tags/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Navigation 返回按钮</title>
    <link href="http://andycui.top/2018/08/21/swift%20%E8%87%AA%E5%AE%9A%E4%B9%89Navigation%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/"/>
    <id>http://andycui.top/2018/08/21/swift 自定义Navigation返回按钮/</id>
    <published>2018-08-21T02:27:52.000Z</published>
    <updated>2018-09-06T03:48:00.018Z</updated>
    
    <content type="html"><![CDATA[<p>UINavigationController 是 iOS 开发中常用的空间,在开发中难免会遇到一些样式与我们需求不相符合,这里针对于返回按钮(backBarButtonItem)进行总结.<br><a id="more"></a></p><h2 id="通过继承与-NavigationController-的子类实现自定义返回按钮"><a href="#通过继承与-NavigationController-的子类实现自定义返回按钮" class="headerlink" title="通过继承与 NavigationController 的子类实现自定义返回按钮"></a>通过继承与 NavigationController 的子类实现自定义返回按钮</h2><ul><li>新建类继承与 UINavigationController</li><li>通过重写 pushViewController,方法设置返回按钮<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pushViewController</span><span class="params">(<span class="number">_</span> viewController: UIViewController, animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.viewControllers.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">        viewController.hidesBottomBarWhenPushed = <span class="literal">true</span></span><br><span class="line">        viewController.navigationItem.leftBarButtonItem = <span class="type">UIBarButtonItem</span>(image: <span class="type">UIImage</span>(named: <span class="string">"icon_nav_back"</span>)?.withRenderingMode(.alwaysOriginal), style: .plain, target: <span class="keyword">self</span>, action: #selector(back))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.pushViewController(viewController, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="设置滑动返回"><a href="#设置滑动返回" class="headerlink" title="设置滑动返回"></a>设置滑动返回</h2><p>如果使用系统的返回按钮是有轻扫左边缘返回的操作的,如果设置了 leftBarButtonItem 滑动返回将消失.</p><ul><li>设置 interactivePopGestureRecognizer 的代理为当前类</li><li>实现 gestureRecognizerShouldBegin 代理方法<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizerShouldBegin</span><span class="params">(<span class="number">_</span> gestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.<span class="built_in">count</span> &gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UINavigationController 是 iOS 开发中常用的空间,在开发中难免会遇到一些样式与我们需求不相符合,这里针对于返回按钮(backBarButtonItem)进行总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="总结" scheme="http://andycui.top/categories/iOS/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="navigation" scheme="http://andycui.top/tags/navigation/"/>
    
  </entry>
  
  <entry>
    <title>UILabel 加载 HTML</title>
    <link href="http://andycui.top/2018/08/13/UILabel%E5%8A%A0%E8%BD%BDHTML/"/>
    <id>http://andycui.top/2018/08/13/UILabel加载HTML/</id>
    <published>2018-08-13T08:04:32.000Z</published>
    <updated>2018-09-06T03:47:59.783Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 开发中为了开发方便时长会加载一些 HTML 静态页面,目前主要使用 UIWebView 与 WKWebView 进行加载,但仅仅作为页面展示我认为没有必要使用他们,且他们高度自适应比较繁琐,因此比较推荐使用 UILabel 加载富文本形式展现 HTML 页面.<br><a id="more"></a></p><h2 id="OC-代码"><a href="#OC-代码" class="headerlink" title="OC 代码"></a>OC 代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSAttributedString</span> * attrStr = [[<span class="type">NSAttributedString</span> alloc] initWithData:[htmlString dataUsingEncoding:<span class="type">NSUnicodeStringEncoding</span>] options:@&#123; <span class="type">NSDocumentTypeDocumentAttribute</span>: <span class="type">NSHTMLTextDocumentType</span> &#125; documentAttributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</span><br><span class="line">label.attributedText = attrStr;</span><br></pre></td></tr></table></figure><h2 id="swift-代码"><a href="#swift-代码" class="headerlink" title="swift 代码"></a>swift 代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = htmlStr.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.unicode), <span class="keyword">let</span> attributedStr = <span class="keyword">try</span>? <span class="type">NSAttributedString</span>(data: data, options: [<span class="type">NSAttributedString</span>.<span class="type">DocumentReadingOptionKey</span>.documentType : <span class="type">NSAttributedString</span>.<span class="type">DocumentType</span>.html], documentAttributes: <span class="literal">nil</span>) &#123;</span><br><span class="line">    label.attributedText = attributedStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 开发中为了开发方便时长会加载一些 HTML 静态页面,目前主要使用 UIWebView 与 WKWebView 进行加载,但仅仅作为页面展示我认为没有必要使用他们,且他们高度自适应比较繁琐,因此比较推荐使用 UILabel 加载富文本形式展现 HTML 页面.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="总结" scheme="http://andycui.top/categories/iOS/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="HTML" scheme="http://andycui.top/tags/HTML/"/>
    
      <category term="富文本" scheme="http://andycui.top/tags/%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>UIButton 设置图片与文字位置</title>
    <link href="http://andycui.top/2018/08/10/UIButton%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E4%B8%8E%E6%96%87%E5%AD%97%E4%BD%8D%E7%BD%AE/"/>
    <id>http://andycui.top/2018/08/10/UIButton设置图片与文字位置/</id>
    <published>2018-08-10T01:52:00.000Z</published>
    <updated>2018-09-06T03:47:59.780Z</updated>
    
    <content type="html"><![CDATA[<p>UIButton 可谓是 iOS 开发中使用频率最多的控件了,然而很多时候系统为我们提供的 UIButton 样式不能满足我们的需求,需要我们对样式进行调整,主要对文字图片的位置进行总结.<br><a id="more"></a></p><h2 id="以-UIButton-为跟视图-添加-UIImageView-与-UILabel"><a href="#以-UIButton-为跟视图-添加-UIImageView-与-UILabel" class="headerlink" title="以 UIButton 为跟视图,添加 UIImageView 与 UILabel"></a>以 UIButton 为跟视图,添加 UIImageView 与 UILabel</h2><ul><li>优点: 处理简单,可以很便捷的进行布局.</li><li>缺点: UIButton 本身自带有 UIImageView 与 UILabel 控件,重复.</li></ul><h2 id="通过设置-titleEdgeInsets-与-imageEdgeInsets-属性"><a href="#通过设置-titleEdgeInsets-与-imageEdgeInsets-属性" class="headerlink" title="通过设置 titleEdgeInsets 与 imageEdgeInsets 属性"></a>通过设置 titleEdgeInsets 与 imageEdgeInsets 属性</h2><ul><li>优点: 可以直接调整 UIButton 的 UIImageView 与 UILabel,不必再次添加.</li><li>确定: 便宜量计算比较复杂.  </li></ul><p><font color="red">注意:</font> 设置 titleEdgeInsets 与 imageEdgeInsets 属性并不会调整 UIButton, UIImageView, UILabel 的 frame, 如果偏移后超出父视图范围则不会响应.</p><h2 id="自定义-UIButton"><a href="#自定义-UIButton" class="headerlink" title="自定义 UIButton"></a>自定义 UIButton</h2><p>新建 YTTCustomButton 类,继承与 UIButton, 通过重写 layoutSubviews 方法进行调整.  </p><ul><li>imageAlignment属性: YTTButtonImageAlignment 类型 ( top, bottom, right, left 图片位置)</li><li>spaceBetweenTitleAndImage: CGFloat 类型, 图片文字间距  </li></ul><p><a href="CustomButton.zip">CustomButton 下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIButton 可谓是 iOS 开发中使用频率最多的控件了,然而很多时候系统为我们提供的 UIButton 样式不能满足我们的需求,需要我们对样式进行调整,主要对文字图片的位置进行总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="总结" scheme="http://andycui.top/categories/iOS/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="自定义视图" scheme="http://andycui.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Git 忽略不必要提交的文件</title>
    <link href="http://andycui.top/2018/08/09/git%E5%BF%BD%E7%95%A5%E4%B8%8D%E5%BF%85%E8%A6%81%E6%8F%90%E4%BA%A4%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://andycui.top/2018/08/09/git忽略不必要提交的文件/</id>
    <published>2018-08-09T01:15:29.000Z</published>
    <updated>2018-09-06T03:47:59.828Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中版本控制是开发人员必不可少的,现在常用的版本控制主要是 git/svn.在实际开发过程中会产生一些中间文件或者项目中有些文件是不需要进行版本管理的,我们可以通过设置 .gitignore 文件忽略这些文件.<br><a id="more"></a></p><h2 id="创建-gitignore-文件"><a href="#创建-gitignore-文件" class="headerlink" title="创建 .gitignore 文件"></a>创建 .gitignore 文件</h2><blockquote><p>指定不需要提交的文件需要在版本管理根目录下创建 .gitignore (gitignore是隐藏文件，所以前面有个点), 与 .git 同级  </p></blockquote><ul><li>进入版本管理文件夹: cd /Users/**/**/**</li><li>创建 .gitignore 文件: touch .gitignore</li><li>编辑 .gitignore 文件: vim .gitignore</li></ul><h2 id="编辑-gitignore-文件"><a href="#编辑-gitignore-文件" class="headerlink" title="编辑 .gitignore 文件"></a>编辑 .gitignore 文件</h2><h3 id="忽略规则："><a href="#忽略规则：" class="headerlink" title="忽略规则："></a>忽略规则：</h3><ul><li>’#’是注释，将被git忽略。 </li><li>可以使用Linux通配符。 </li><li>如果名称的最前面有一个感叹号(!)，表示例外规则，将不被忽略 </li><li>如果名称的最前面有一个路径分隔符（/）,表示将忽略的文件在此目录下，而子目录中的文件不忽略 </li><li>如果名称的最后面有一个路径分隔符（/）,表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）  </li></ul><p><strong><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">gitignore 配置例子</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># Xcode</span><br><span class="line">#</span><br><span class="line"># gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore</span><br><span class="line"></span><br><span class="line">## Build generated</span><br><span class="line">build/</span><br><span class="line">DerivedData/</span><br><span class="line"></span><br><span class="line">## Various settings</span><br><span class="line">*.pbxuser</span><br><span class="line">!default.pbxuser</span><br><span class="line">*.mode1v3</span><br><span class="line">!default.mode1v3</span><br><span class="line">*.mode2v3</span><br><span class="line">!default.mode2v3</span><br><span class="line">*.perspectivev3</span><br><span class="line">!default.perspectivev3</span><br><span class="line">xcuserdata/</span><br><span class="line"></span><br><span class="line">## Other</span><br><span class="line">*.moved-aside</span><br><span class="line">*.xccheckout</span><br><span class="line">*.xcscmblueprint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Obj-C/Swift specific</span><br><span class="line">*.hmap</span><br><span class="line">*.ipa</span><br><span class="line">*.dSYM.zip</span><br><span class="line">*.dSYM</span><br><span class="line"></span><br><span class="line"># CocoaPods</span><br><span class="line">#</span><br><span class="line"># We recommend against adding the Pods directory to your .gitignore. However</span><br><span class="line"># you should judge for yourself, the pros and cons are mentioned at:</span><br><span class="line"># https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control</span><br><span class="line"></span><br><span class="line">Pods/</span><br><span class="line"></span><br><span class="line"># Carthage</span><br><span class="line">#</span><br><span class="line"># Add this line if you want to avoid checking in source code from Carthage dependencies.</span><br><span class="line"></span><br><span class="line"># Carthage/Checkouts</span><br><span class="line">Carthage/Build</span><br><span class="line"></span><br><span class="line"># fastlane</span><br><span class="line">#</span><br><span class="line"># It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the</span><br><span class="line"># screenshots whenever they are needed.</span><br><span class="line"># For more information about the recommended setup visit:</span><br><span class="line"># https://docs.fastlane.tools/best-practices/source-control/#source-control</span><br><span class="line"></span><br><span class="line">fastlane/report.xml</span><br><span class="line">fastlane/Preview.html</span><br><span class="line">fastlane/screenshots</span><br><span class="line">fastlane/test_output</span><br><span class="line"></span><br><span class="line"># Code Injection</span><br><span class="line">#</span><br><span class="line"># After new code Injection tools there&apos;s a generated folder /iOSInjectionProject</span><br><span class="line"># https://github.com/johnno1962/injectionforxcode</span><br><span class="line"></span><br><span class="line">iOSInjectionProject/</span><br><span class="line"></span><br><span class="line"># fastlane</span><br><span class="line">fastlane</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中版本控制是开发人员必不可少的,现在常用的版本控制主要是 git/svn.在实际开发过程中会产生一些中间文件或者项目中有些文件是不需要进行版本管理的,我们可以通过设置 .gitignore 文件忽略这些文件.&lt;br&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://andycui.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="http://andycui.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/"/>
    
    
      <category term="git" scheme="http://andycui.top/tags/git/"/>
    
      <category term="版本控制" scheme="http://andycui.top/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>iOS 总结</title>
    <link href="http://andycui.top/2018/06/21/iOS%20%E6%80%BB%E7%BB%93/"/>
    <id>http://andycui.top/2018/06/21/iOS 总结/</id>
    <published>2018-06-21T00:34:35.000Z</published>
    <updated>2018-09-06T03:47:59.893Z</updated>
    
    <content type="html"><![CDATA[<p>iOS是由苹果公司开发的移动操作系统.<br><a id="more"></a></p><h1 id="iOS-简介"><a href="#iOS-简介" class="headerlink" title="iOS 简介"></a>iOS 简介</h1><h2 id="开发语言"><a href="#开发语言" class="headerlink" title="开发语言"></a>开发语言</h2><h3 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h3><ul><li>通常写作ObjC或OC和较少用的Objective C或Obj-C，是扩充C的面向对象编程语言。OC 完全兼容 C语言.</li><li>面向对象语言(C 语言面向过程).</li><li>是MAC OSX和IOS开发的基础语言。</li></ul><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul><li>苹果于2014年WWDC（苹果开发者大会）发布的新开发语言，可与Objective-C*共同运行于Mac OS和iOS平台，用于搭建基于苹果平台的应用程序.</li><li>Swift和Objective-C共用一套运行时环境,项目中可以通过桥接的方式互相调用.</li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li>Xcode: 运行在操作系统Mac OS X上的集成开发工具（IDE），由苹果公司开发。</li></ul><h1 id="iOS-基础"><a href="#iOS-基础" class="headerlink" title="iOS 基础"></a>iOS 基础</h1><h2 id="APP-生命周期"><a href="#APP-生命周期" class="headerlink" title="APP 生命周期"></a>APP 生命周期</h2><p>iOS 应用有5中状态:</p><ul><li>Not running 应用还没启动或正在运行但是中途被系统停止</li><li>Inactive 应用正在前台运行(不接收事件)</li><li>Active 应用正在前台运行(接收事件)</li><li>Background 应用处于后台运行(还在执行代码)</li><li>Suspended 应用处于后台运行(停止执行代码)<br>对应的函数:<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用将要进入非活动调用   (不接受消息或事件)</span></span><br><span class="line">- (void)applicationWillResignActive:(<span class="type">UIApplication</span> *)application;</span><br><span class="line"><span class="comment">//应用进入活动调用        (接收消息或事件)</span></span><br><span class="line">- (void)applicationDidBecomeActive:(<span class="type">UIApplication</span> *)application;</span><br><span class="line"><span class="comment">//应用进入后台调用        (设置后台继续运行)</span></span><br><span class="line">- (void)applicationDidEnterBackground:(<span class="type">UIApplication</span> *)application;</span><br><span class="line"><span class="comment">//应用将要进入前台调用</span></span><br><span class="line">- (void)applicationWillEnterForeground:(<span class="type">UIApplication</span> *)application;</span><br><span class="line"><span class="comment">//应用将要退出调用        (保存数据,退出前清理)</span></span><br><span class="line">- (void)applicationWillTerminate:(<span class="type">UIApplication</span> *)application;</span><br><span class="line"><span class="comment">//应用被终止前调用        (内存清理,方式应用被终止)</span></span><br><span class="line">- (void)applicationDidReceiveMemoryWarning:(<span class="type">UIApplication</span> *)application;</span><br><span class="line"><span class="comment">//应用载入后调用</span></span><br><span class="line">- (<span class="type">BOOL</span>)application:(<span class="type">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="type">NSDictionary</span> *)launchOptions;</span><br><span class="line"><span class="comment">//应用打开URL时调用</span></span><br><span class="line">- (<span class="type">BOOL</span>)application:(<span class="type">UIApplication</span> *)application handleOpenURL:(<span class="type">NSURL</span> *)url;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内存管理机制-引用计数"><a href="#内存管理机制-引用计数" class="headerlink" title="内存管理机制(引用计数)"></a>内存管理机制(引用计数)</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>OC 引入引用计数机制来跟踪并管理对象的生命周期.<br>iOS 5之前采用 MRC(手动内存管理) 管理内存.需用开发人员手动调用reatain,release等方法.<br>iOS 5之后采用 ARC(自动内存管理) 管理内存,不用开发人员去关心引用计数的变化.</p><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">对应 OC 方法</th><th>引用计数变化</th></tr></thead><tbody><tr><td style="text-align:center">创建对象</td><td style="text-align:center">alloc,new 等</td><td>生成对象,引用计数设置为 1</td></tr><tr><td style="text-align:center">持有对象</td><td style="text-align:center">reatain</td><td>引用计数 +1</td></tr><tr><td style="text-align:center">释放对象</td><td style="text-align:center">release</td><td>引用计数 -1</td></tr><tr><td style="text-align:center">废弃对象</td><td style="text-align:center">dealloc</td><td>引用计数为0,释放内存</td></tr></tbody></table><p>alloc 与 dealloc,reatain与 release 成对存在, <strong>谁创建谁释放，谁retain谁释放</strong><br>只有当引用计数为 0 是对象才会销毁回收内存.</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>当我们创建(alloc)一个新对象A的时候，它的引用计数从零变为 1.</li><li>当有一个指针指向这个对象A，也就是某对象想通过引用保留(retain)该对象A时，引用计数加 1.</li><li>当某个指针/对象不再指向这个对象A，也就是释放(release)该引用后，我们将其引用计数减 1.</li><li>当对象A的引用计数变为 0 时，说明这个对象不再被任何指针指向(引用)了，这个时候我们就可以将对象A销毁，所占内存将被回收，且所有指向该对象的引用也都变得无效了。系统也会将其占用的内存标记为“可重用”(reuse).</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><code>@property(nonatomic, strong)UITextField *textField;</code><br>OC 采用 ‘@property’ 声明对象, 会默认生成一个 ‘_textField’ 成员变量与与之对应的 ‘setter/getter’ 方法.</p><h3 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h3><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">描述</th><th style="text-align:center">引用计数变化</th></tr></thead><tbody><tr><td style="text-align:center">copy</td><td style="text-align:center">复制,创建一个新对象,通常修饰 NSString,NSArray,NSDictionary,NSSet</td><td style="text-align:center">新对象引用计数为 1,旧对象不变</td></tr><tr><td style="text-align:center">retain</td><td style="text-align:center">释放旧对象,主要用于(MRC)</td><td style="text-align:center">释放旧对象,计数 -1,新对象 retain, 计数 +1</td></tr><tr><td style="text-align:center">strong</td><td style="text-align:center">强引用,与 retain相似</td><td style="text-align:center">释放旧对象,计数 -1,新对象 retain, 计数 +1</td></tr><tr><td style="text-align:center">assign</td><td style="text-align:center">修饰基本数据类型</td><td style="text-align:center">不变</td></tr><tr><td style="text-align:center">weak</td><td style="text-align:center">与assign类似,修饰对象,对消销毁后自动变成 nil,主要用于修饰 delegate</td><td style="text-align:center">不变</td></tr><tr><td style="text-align:center">readwrite</td><td style="text-align:center">可读写,生成 setter 与 getter 方法</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">readonly</td><td style="text-align:center">只读,只为属性生成 getter 方法</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">nonatomic</td><td style="text-align:center">非原子属性,不为 setter 方式加锁,非线程安全,通常采用这种,执行效率高</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">atomic</td><td style="text-align:center">原子属性,为 setter 方式加锁,线程安全</td><td style="text-align:center">-</td></tr></tbody></table><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><ul><li>对 block 修饰 Strong,copy 都可以,建议使用 copy. block 声明默认为栈变量,为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。</li><li>NSString,NSArray,NSDictionary,NSSet 建议使用 copy. 当将 NSMutableString 赋值给 NSString 时, strong 修饰只会进行浅拷贝(引用计数 +1),NSMutableString与NSString 指向同一内存空间,NSMutableString修改时NSString会随之改变. copy 修饰深拷贝(复制内存单元),NSMutableString与NSString 指向不同内存空间,NSMutableString修改时NSString不会改变.</li><li>__weak __Strong __block 在 block 使用时有时为了避免造成循环引用会用 __weak __Strong 进行修饰下. 有时在 block 中,为了避免对象过早释放用 __Strong 修饰.</li></ul><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><ul><li>读写文件: 比较复杂,对对象保存需要进行归档反归档处理.</li><li>云端存储: 需要后台配合.</li><li>本地数据库(SQLite,<a href="http://andycui.top/2018/06/01/iOS%20%E5%BC%80%E5%8F%91%E4%B9%8B%20CoreData/">CoreDate</a>): CoreDate 是 iOS5 之后出现的,实质是对 SQLite 的封装.</li><li>NSUserDefaults: 系统自带的持久化类,进行简单数据存储(用户登录信息等).</li></ul><h2 id="类继承关系-单继承"><a href="#类继承关系-单继承" class="headerlink" title="类继承关系(单继承)"></a>类继承关系(单继承)</h2><p>iOS 所有的类都继承与 NSObject, 主要分为 UI 和 NS 两大类. UI 主要为视图, NS 为数据操作.<br>图解:<br><img src="iOS 总结_1.png" alt="UI 系"><br><img src="iOS 总结_2.png" alt="UI 系"></p><p>其他:<br>UIViewController 生命周期: 初始化 –&gt; loadView –&gt; viewDidLoad –&gt; viewWillAppear –&gt; viewWillLayoutSubviews –&gt; viewDidLayoutSubviews –&gt; viewDidAppear –&gt; viewWillDisappear –&gt; viewDidDisappear –&gt; dealloc </p><h2 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h2><ul><li>属性传值</li><li>block 传值</li><li>代理传值</li><li>通知传值</li><li>单例传值</li><li>持久化传值</li></ul><h2 id="协议与代理"><a href="#协议与代理" class="headerlink" title="协议与代理"></a>协议与代理</h2><p>在iOS开发中，Protocol是一种经常用到的设计模式，苹果的系统框架中也普遍用到了这种方式,比如UITableView中的<uitableviewdelegate>.<br>协议声明:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@<span class="class"><span class="keyword">protocol</span> <span class="title">ProtocolDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 必须实现方法</span></span><br><span class="line"><span class="class">@<span class="title">required</span></span></span><br><span class="line"><span class="class">- (<span class="title">NSString</span>*)<span class="title">getName</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 可选方法</span></span><br><span class="line"><span class="class">@<span class="title">optional</span></span></span><br><span class="line"><span class="class">- (<span class="title">NSString</span>*)<span class="title">getAge</span>;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">end</span></span></span><br></pre></td></tr></table></figure></uitableviewdelegate></p><p>协议使用</p><ul><li>协议是一系列标准的方法列表，可以被任何类实现.</li><li>协议中不能声明成员变量，只要一个类遵守了这个协议，也相当于拥有了该协议中所有方法的声明.</li><li>父类遵守了该协议，那么它的子类也就都遵守该协议,可以遵守多个协议.</li></ul><p>代理: 当前类(委托者)将一些操作委托给另一个类(代理)去完成.<br>委托者需要做的事：</p><ul><li>创建协议（也就是代理要实现的方法）</li><li>声明委托变量</li><li>设置代理（也可以在代理中设置）</li><li>利用委托变量来调用协议方法（也就是让代理者开始执行协议）<br>代理需要做的事：</li><li>遵循协议</li><li>实现协议方法</li></ul><h2 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h2><h1 id="iOS-中级"><a href="#iOS-中级" class="headerlink" title="iOS 中级"></a>iOS 中级</h1><h2 id="响应者链"><a href="#响应者链" class="headerlink" title="响应者链"></a>响应者链</h2><ul><li>响应对象: 继承自UIResponder的对象称之为响应者对象.</li><li>响应事件: 触摸事件、点按事件(长按,多次点击,轻点等)、加速事件和远程控制.</li><li>响应者链: 由多个响应者组合起来的链条</li></ul><h3 id="事件产生与传递"><a href="#事件产生与传递" class="headerlink" title="事件产生与传递"></a>事件产生与传递</h3><ul><li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中.</li><li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow).</li><li>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步.</li><li>找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理.</li><li>如果调用了[super touches….];就会将事件顺着响应者链条往上传递，传递给上一个响应者，调用上一个响应者的touches….方法<br><strong>注意:</strong> 如果父控件不能接受触摸事件，那么子控件就不可能接收到触摸事件<br><img src="iOS 总结_3.png" alt="UI 系"></li></ul><h3 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h3><ul><li>如果视图不响应事件，则将其传递给它的父视图</li><li>在最顶级的视图层次结构中，如果都不能处理收到的事件或消息，则其将事件或消息传递给UIWindow对象进行处理</li><li>如果UIWindow对象也不处理，则其将事件或消息传递给UIApplication对象处理</li><li>如果UIApplication也不能处理该事件或消息，则将该事件丢弃<br>如何判断上一个响应者<ul><li>如果当前这个view不是控制器的view, 那么它的父控件就是上一个响应者</li><li>如果当前这个view是控制器的view, 那么控制器就是上一个响应者</li></ul></li></ul><h3 id="UIView不能接收触摸事件的情况"><a href="#UIView不能接收触摸事件的情况" class="headerlink" title="UIView不能接收触摸事件的情况"></a>UIView不能接收触摸事件的情况</h3><ul><li>不允许交互: userInteractionEnabled = NO(eg: UIImageView)</li><li>隐藏</li><li>透明度: 透明度&lt;0.01</li><li>子视图超出了父视图区域</li><li>当前 View 被遮挡</li></ul><h2 id="分类-category-与类扩展-extension"><a href="#分类-category-与类扩展-extension" class="headerlink" title="分类(category)与类扩展(extension)"></a>分类(category)与类扩展(extension)</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>在不改变原类的基础上为一个类扩展方法.</li><li>主要用法为系统类扩展方法</li><li>不可添加成员变量. 如果要添加成员变量需要自己实现 setter 和 getter 方法(runtime).</li><li>分类文件(.h,.m),以为 Person 添加分类为例,可以通过 Person 实例对象直接调用 playFootBall 方法(分类方法执行优先级高于本类).</li></ul><p>Person+sport.h<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> "Person.h"</span><br><span class="line"></span><br><span class="line">@interface <span class="type">Person</span> (sport)</span><br><span class="line"></span><br><span class="line">- (void)playFootBall;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>Person+sport.m<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> "Person+sport.h"</span><br><span class="line"></span><br><span class="line">@implementation <span class="type">Person</span> (sport)</span><br><span class="line"></span><br><span class="line">- (void)playFootBall &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">"playFootBall"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h3 id="类扩展"><a href="#类扩展" class="headerlink" title="类扩展"></a>类扩展</h3><p>类扩展是分类的一个特例,为一个类添加一些私有成员变量和方法(常用).<br>类扩展定义的方法，须在类的implement 中实现<br>类扩展可以定义属性<br>声明:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> "Person.h"</span><br><span class="line"></span><br><span class="line">@interface <span class="type">Person</span> ()</span><br><span class="line">- (void)say;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h3 id="分类与继承"><a href="#分类与继承" class="headerlink" title="分类与继承"></a>分类与继承</h3><p>iOS 中分类(Categories) 和 继承(Inherit)有相同的功能，但在一些细节上又有差异，如何选择。<br>使用继承:</p><ul><li>扩展方法与原方法名相同,还需要使用父类方法.</li><li>扩展类属性(分类不能扩展类属性)<br>使用分类:</li><li>为系统类添加方法(eg: 为 NSString 添加字符串校验).</li><li>开发人员针对自己的类,将相关方法分组到不同的文件.</li></ul><h2 id="UITableView-重用机制"><a href="#UITableView-重用机制" class="headerlink" title="UITableView 重用机制"></a>UITableView 重用机制</h2><p>UITableView 是 iOS 开发中最长用的控件,为了节省内存开销, UITableView 使用重用机制(重用 cell 单元格).</p><h3 id="使用重用机制创建-cell"><a href="#使用重用机制创建-cell" class="headerlink" title="使用重用机制创建 cell"></a>使用重用机制创建 cell</h3><ul><li>定义重用标示(static 修饰字符串).</li><li>在重用池取出 cell.</li><li>若重用池没有可用 cell, 创建新的 cell.<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">NSString</span> *reuseIndentifier = @<span class="string">"MyCell"</span>;  </span><br><span class="line"><span class="type">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:reuseIndentifier];  </span><br><span class="line"><span class="keyword">if</span> (!cell) &#123;  </span><br><span class="line">    cell = [[<span class="type">UITableViewCell</span> alloc] initWithStyle:<span class="type">UITableViewCellStyleDefault</span> reuseIdentifier:reuseIndentifier];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>UITableView 维护这两个队列,单前可视 cell 队列 visiableCells, 可重用 cell 队列 reusableTableCells(重回池).<br>在最初visiableCells, reusableTableCells 都为空, “UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@”cell”];” 获取 cell 为 nil, 执行 cell 初始化方法创建显示并存入到 visiableCells.如果屏幕最多显示 cell 个数为10,当加载完第11个 cell 时创建的第一个 cell 在 visiableCells 移除加入到 reusableTableCells 中,所以在加载第12个 cell 时只需在 reusableTableCells 取出 cell 即可.第十二个 cell 加载完成后创建的第二个 cell 移出 visiableCells 进入 reusableTableCells 中,依次类推(理论讲只需创建11个 cell 就可).</p><h3 id="遇到问题和优化"><a href="#遇到问题和优化" class="headerlink" title="遇到问题和优化"></a>遇到问题和优化</h3><ul><li>重取出来的cell是有可能已经捆绑过数据或者加过子视图的，造成视图叠加混乱的现象<ul><li>删除已有数据或子视图.</li><li>放弃了重用机制，每次根据indexPath获取对应的cell返回(内存销耗特大).</li></ul></li><li>结合 MJFresh 实现数据分页加载.</li><li>结合 SDWebImage 实现 cell 中图片异步加载以及缓存.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS是由苹果公司开发的移动操作系统.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://andycui.top/tags/iOS/"/>
    
      <category term="Other" scheme="http://andycui.top/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>iOS音视频播放</title>
    <link href="http://andycui.top/2018/06/16/iOS%20%E9%9F%B3%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
    <id>http://andycui.top/2018/06/16/iOS 音视频播放/</id>
    <published>2018-06-16T05:26:11.000Z</published>
    <updated>2018-09-06T03:47:59.946Z</updated>
    
    <content type="html"><![CDATA[<p>按公司需求需要对音频文件进行后台播放,借此机会对音频播放做了个总结.主要针对 AVPlayer 进行详细说明.<br><a id="more"></a></p><h1 id="iOS-各播放器比较"><a href="#iOS-各播放器比较" class="headerlink" title="iOS 各播放器比较"></a>iOS 各播放器比较</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">使用环境</th><th>优点</th><th>确点</th></tr></thead><tbody><tr><td style="text-align:center">System Sound Services</td><td style="text-align:center">AVFoundation</td><td>C语言的底层写法，节省内存</td><td>支持的格式有限，音量无法通过音量键控制，而且播放方式单一。</td></tr><tr><td style="text-align:center">AVAudioPlayer</td><td style="text-align:center">AVFoundation</td><td>抒写效率更高，基本上支持所有的音频格式，对播放的控制，如循环播放，声音大小，暂停等比较方便。</td><td>对内存的消耗会多些。不支持流式，即无法播放在线音乐。</td></tr><tr><td style="text-align:center">AVPlayer</td><td style="text-align:center">AVFoundation</td><td>可以播放音视频,可播放在线音乐,使用灵活</td><td></td></tr><tr><td style="text-align:center">MPMoviePlayerController</td><td style="text-align:center">MediaPlayer</td><td>简单易用</td><td>不可定制</td></tr><tr><td style="text-align:center">AVPlayerViewController</td><td style="text-align:center">AVKit</td><td>简单易用</td><td>不可定制</td></tr><tr><td style="text-align:center">IJKPlayer</td><td style="text-align:center">IJKMediaFramework</td><td>定制度高，支持流媒体播放</td><td>使用稍复杂</td></tr></tbody></table><h1 id="AVPlayer-使用"><a href="#AVPlayer-使用" class="headerlink" title="AVPlayer 使用"></a>AVPlayer 使用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AVPlayer 是iOS上常用的视频播放器组件，支持常见的音视频格式,支持流播放,可以播放在线音乐.<br>支持视频格式： WMV，AVI，MKV，RMVB，RM，XVID，MP4，3GP，MPG等。<br>支持音频格式：MP3，WMA，RM，ACC，OGG，APE，FLAC，FLV等。</p><h2 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h2><ul><li>AVPlayer：播放器,控制播放器的播放，暂停，播放速度.</li><li>AVURLAsset : AVAsset 的一个子类，使用 URL 进行实例化，实例化对象包换 URL 对应视频资源的所有信息.</li><li>AVPlayerItem：管理资源对象，提供播放数据源.</li><li>AVPlayerLayer：负责显示视频，如果没有添加该类，只有声音没有画面.</li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="使用-url-创建-AVPlayer"><a href="#使用-url-创建-AVPlayer" class="headerlink" title="使用 url 创建 AVPlayer"></a>使用 url 创建 AVPlayer</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = <span class="type">AVPlayer</span>(url: <span class="type">URL</span>(string: <span class="string">"http://www.xxxx.mp3"</span>))</span><br></pre></td></tr></table></figure><h3 id="使用-AVPlayerItem-创建-AVPlayer"><a href="#使用-AVPlayerItem-创建-AVPlayer" class="headerlink" title="使用 AVPlayerItem 创建 AVPlayer"></a>使用 AVPlayerItem 创建 AVPlayer</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"http://www.***.mp3"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> asset = <span class="type">AVAsset</span>(url: url)</span><br><span class="line">    <span class="keyword">guard</span> asset.isPlayable <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 检测文件是否可播放</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> playItem = <span class="type">AVPlayerItem</span>(asset: asset)</span><br><span class="line">    <span class="keyword">let</span> player = <span class="type">AVPlayer</span>(playerItem: playItem)</span><br><span class="line">    player.play()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AVPlayer-控制播放"><a href="#AVPlayer-控制播放" class="headerlink" title="AVPlayer 控制播放"></a>AVPlayer 控制播放</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">player.play() <span class="comment">// 播放</span></span><br><span class="line">player.pause() <span class="comment">//暂停</span></span><br><span class="line">player.rate = <span class="number">1.0</span> <span class="comment">// 播放速度</span></span><br></pre></td></tr></table></figure><h3 id="通过通知监听播放状态变化"><a href="#通过通知监听播放状态变化" class="headerlink" title="通过通知监听播放状态变化"></a>通过通知监听播放状态变化</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//播放完成</span></span><br><span class="line"><span class="type">AVPlayerItemDidPlayToEndTimeNotification</span></span><br><span class="line"><span class="comment">//播放失败</span></span><br><span class="line"><span class="type">AVPlayerItemFailedToPlayToEndTimeNotification</span></span><br><span class="line"><span class="comment">//异常中断</span></span><br><span class="line"><span class="type">AVPlayerItemPlaybackStalledNotification</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eg: 播放结束通知</span></span><br><span class="line"><span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: #selector(finish(<span class="number">_</span>:)), name: <span class="type">NSNotification</span>.<span class="type">Name</span>.<span class="type">AVPlayerItemDidPlayToEndTime</span>, object: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="监听播放进度"><a href="#监听播放进度" class="headerlink" title="监听播放进度"></a>监听播放进度</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加周期时间观察者 一秒执行一次 block</span></span><br><span class="line"><span class="keyword">let</span> timeObserver = player.addPeriodicTimeObserver(forInterval: <span class="type">CMTime</span>(seconds: <span class="number">1</span>, preferredTimescale: <span class="number">1</span>), queue: <span class="type">DispatchQueue</span>.main, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (cmTime) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> totalTime = <span class="keyword">self</span>?.currentPlayItem?.duration &#123;</span><br><span class="line">        <span class="keyword">self</span>?.delegate?.player(<span class="keyword">self</span>!, currentTime: cmTime.seconds, totalTime: totalTime.seconds)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不要忘记移除</span></span><br><span class="line">player.removeTimeObserver(observer)</span><br></pre></td></tr></table></figure><h3 id="AVPlayerItem-创建"><a href="#AVPlayerItem-创建" class="headerlink" title="AVPlayerItem 创建"></a>AVPlayerItem 创建</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 AVAsset 创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"http://www.***.mp3"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> asset = <span class="type">AVAsset</span>(url: url)</span><br><span class="line">    <span class="keyword">guard</span> asset.isPlayable <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 检测文件是否可播放</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> playItem = <span class="type">AVPlayerItem</span>(asset: asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 URL 创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"http://www.***.mp3"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> playItem = <span class="type">AVPlayerItem</span>(url: url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听-AVPlayerItem-状态和缓存进度"><a href="#监听-AVPlayerItem-状态和缓存进度" class="headerlink" title="监听 AVPlayerItem 状态和缓存进度"></a>监听 AVPlayerItem 状态和缓存进度</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 playerItem 状态变化</span></span><br><span class="line">playItem.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"status"</span>, options: .new, context: <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// 监听缓存时间</span></span><br><span class="line">playItem.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"loadedTimeRanges"</span>, options: .new, context: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除监听</span></span><br><span class="line">currentPlayItem?.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"status"</span>)</span><br><span class="line">currentPlayItem?.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"loadedTimeRanges"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> object <span class="keyword">is</span> <span class="type">AVPlayerItem</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> keyPath == <span class="string">"status"</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> playerItem = object <span class="keyword">as</span>? <span class="type">AVPlayerItem</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> playerItem.status &#123;</span><br><span class="line">                <span class="keyword">case</span> .readyToPlay:</span><br><span class="line">                    <span class="comment">// 准备播放</span></span><br><span class="line">                <span class="keyword">case</span> .failed:</span><br><span class="line">                    <span class="comment">// 加载失败                    </span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// 未知状态</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> keyPath == <span class="string">"loadedTimeRanges"</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> playerItem = object <span class="keyword">as</span>? <span class="type">AVPlayerItem</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> timeRange = playerItem.loadedTimeRanges.first <span class="keyword">as</span>? <span class="type">CMTimeRange</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> cache = timeRange.start.seconds + timeRange.duration.seconds <span class="comment">// 缓存总时长</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="音频后台播放"><a href="#音频后台播放" class="headerlink" title="音频后台播放"></a>音频后台播放</h1><h2 id="开启所需后台模式"><a href="#开启所需后台模式" class="headerlink" title="开启所需后台模式"></a>开启所需后台模式</h2><p>选中Targets–&gt;Capabilities–&gt;BackgroundModes–&gt;ON,<br>并勾选Audio and AirPlay选项，如下图:<br><img src="iOS音视频播放_2.png" alt=""><br>或者 plist 文件添加如下字段:<br><img src="iOS音视频播放_1.png" alt=""><br>利用 AVAudioSession 申请后台播放权限</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> session = <span class="type">AVAudioSession</span>.sharedInstance()</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> session.setActive(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">try</span> session.setCategory(<span class="type">AVAudioSessionCategoryPlayback</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在播放控制界面接受远程控制-Remote-Control"><a href="#在播放控制界面接受远程控制-Remote-Control" class="headerlink" title="在播放控制界面接受远程控制(Remote Control)"></a>在播放控制界面接受远程控制(Remote Control)</h1><h2 id="开启远程控制"><a href="#开启远程控制" class="headerlink" title="开启远程控制"></a>开启远程控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 声明接收Remote Control事件</span><br><span class="line">UIApplication.shared.beginReceivingRemoteControlEvents()</span><br></pre></td></tr></table></figure><h2 id="设置-Remote-Control-响应"><a href="#设置-Remote-Control-响应" class="headerlink" title="设置 Remote Control 响应"></a>设置 Remote Control 响应</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应 Remote Control事件</span></span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().playCommand.addTarget(<span class="keyword">self</span>, action: #selector(play))</span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().nextTrackCommand.addTarget(<span class="keyword">self</span>, action: #selector(next))</span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().pauseCommand.addTarget(<span class="keyword">self</span>, action: #selector(pause))</span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().previousTrackCommand.addTarget(<span class="keyword">self</span>, action: #selector(previous))</span><br></pre></td></tr></table></figure><h2 id="移除-Remote-Control-响应"><a href="#移除-Remote-Control-响应" class="headerlink" title="移除 Remote Control 响应"></a>移除 Remote Control 响应</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在关闭播放页面时记得移除</span></span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().playCommand.removeTarget(<span class="keyword">self</span>, action: #selector(play))</span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().nextTrackCommand.removeTarget(<span class="keyword">self</span>, action: #selector(next))</span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().pauseCommand.removeTarget(<span class="keyword">self</span>, action: #selector(pause))</span><br><span class="line"><span class="type">MPRemoteCommandCenter</span>.shared().previousTrackCommand.removeTarget(<span class="keyword">self</span>, action: #selector(previous))</span><br><span class="line"><span class="comment">// 停止响应 Remote Control</span></span><br><span class="line"><span class="type">UIApplication</span>.shared.endReceivingRemoteControlEvents()</span><br></pre></td></tr></table></figure><h2 id="通过重写父类方法响应外部事件"><a href="#通过重写父类方法响应外部事件" class="headerlink" title="通过重写父类方法响应外部事件"></a>通过重写父类方法响应外部事件</h2><ul><li>开启接受远程控制</li><li>使当前页面成为第一响应者</li><li><p>重写 remoteControlReceivedWithEvent 方法. UIEvent Type 取值:</p><ul><li>UIEventSubtypeRemoteControlTogglePlayPause // 暂停</li><li>UIEventSubtypeRemoteControlPreviousTrack // 上一首</li><li>UIEventSubtypeRemoteControlNextTrack // 下一首</li><li>UIEventSubtypeRemoteControlPlay // 播放</li><li>UIEventSubtypeRemoteControlPause // 暂停</li></ul></li><li><p>关闭接受远程控制</p></li></ul><h1 id="锁屏页面显示播放信息-Now-Playing-Center"><a href="#锁屏页面显示播放信息-Now-Playing-Center" class="headerlink" title="锁屏页面显示播放信息(Now Playing Center)"></a>锁屏页面显示播放信息(Now Playing Center)</h1><p>使用 MPNowPlayingInfoCenter 设置锁屏页面音乐信息.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setLockScreenPlayingInfo</span><span class="params">(<span class="number">_</span> info: YTTMediaInfo)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Now Playing Center可以在锁屏界面展示音乐的信息，也达到增强用户体验的作用。</span></span><br><span class="line">    <span class="comment">// https://www.jianshu.com/p/458b67f84f27</span></span><br><span class="line">    <span class="keyword">var</span> infoDic: [<span class="type">String</span> : <span class="type">Any</span>] = [:]</span><br><span class="line">    infoDic[<span class="type">MPMediaItemPropertyTitle</span>] = info.title <span class="comment">// 歌曲名</span></span><br><span class="line">    infoDic[<span class="type">MPMediaItemPropertyArtist</span>] = info.singer <span class="comment">// 歌手</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> img = info.image &#123;</span><br><span class="line">        infoDic[<span class="type">MPMediaItemPropertyArtwork</span>] = <span class="type">MPMediaItemArtwork</span>(image: img) <span class="comment">// 专辑图片</span></span><br><span class="line">    &#125;</span><br><span class="line">    infoDic[<span class="type">MPMediaItemPropertyPlaybackDuration</span>] = info.totalTime <span class="comment">// 歌曲总时长</span></span><br><span class="line">    infoDic[<span class="type">MPNowPlayingInfoPropertyElapsedPlaybackTime</span>] = info.currentTime <span class="comment">// 当前播放时间</span></span><br><span class="line">    infoDic[<span class="type">MPNowPlayingInfoPropertyPlaybackRate</span>] = <span class="number">1.0</span> <span class="comment">// 播放速度</span></span><br><span class="line">    <span class="type">MPNowPlayingInfoCenter</span>.<span class="keyword">default</span>().nowPlayingInfo = infoDic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: MPNowPlayingInfoPropertyElapsedPlaybackTime 设置的并不是时时的,他是根据你设置的值进行计时的,如果想要在锁屏页面得到准确的时间,请及时刷新 MPNowPlayingInfoPropertyElapsedPlaybackTime 的值.当暂停时要暂停播放时间,只需将 MPNowPlayingInfoPropertyPlaybackRate 设置为 0.播放时设置回 1.</p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>iOS 对后台管理十分严格,任何 app 都有大约3分钟或者10分钟的后台执行时间.3分钟或者10分钟后, app 就会被强制挂起.使用 AVAudioSession 申请后台权限时,可以保证播放本地音乐能在后台长久播放,当播放网络音乐时就会出现不能播放情况,针对这情况使用了 beginBackgroundTask 设置后台任务 ID,通过这种方式我们大约可以获得额外的 10 分钟来执行后台任务.为了能无限后台播放网络音乐添加计时器,当即将挂起时再次申请后台任务 ID.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDidEnterBackground</span><span class="params">(<span class="number">_</span> application: UIApplication)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这样做，可以在按home键进入后台后 ，播放一段时间，几分钟吧。但是不能持续播放网络歌曲，若需要持续播放网络歌曲，还需要申请后台任务id</span></span><br><span class="line">    bgTask = application.beginBackgroundTask(expirationHandler: <span class="literal">nil</span>)</span><br><span class="line">    timer = <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">1</span>, target: <span class="keyword">self</span>, selector: #selector(timerAction), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">timerAction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    timerCount = timerCount + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> timerCount &lt; <span class="number">500</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    timerCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> newTask = <span class="type">UIApplication</span>.shared.beginBackgroundTask(expirationHandler: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> bgTask != <span class="type">UIBackgroundTaskInvalid</span> &amp;&amp; newTask != <span class="type">UIBackgroundTaskInvalid</span> &#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.endBackgroundTask(bgTask)</span><br><span class="line">        bgTask = newTask</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://www.jianshu.com/p/b6e3ea118fc7" target="_blank" rel="noopener">AVPlayer那些坑</a></li><li><a href="https://github.com/AndyCuiYTT/AVPlayerTools" target="_blank" rel="noopener">项目参考地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按公司需求需要对音频文件进行后台播放,借此机会对音频播放做了个总结.主要针对 AVPlayer 进行详细说明.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="音视频" scheme="http://andycui.top/categories/iOS/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="音视频" scheme="http://andycui.top/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发之 CoreData</title>
    <link href="http://andycui.top/2018/06/01/iOS%20%E5%BC%80%E5%8F%91%E4%B9%8B%20CoreData/"/>
    <id>http://andycui.top/2018/06/01/iOS 开发之 CoreData/</id>
    <published>2018-06-01T05:52:05.000Z</published>
    <updated>2018-09-06T03:47:59.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CoreData 是苹果公司封装的进行数据持久化的框架,首次在 iOS3.0版本的系统中出现,它允许按照实体-属性-值模型组织数据,并以 XML, 二进制文件或者 SQLite 数据文件格式持久化数据.<br><a id="more"></a></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>CoreData 是苹果公司原生态的产品是在 iOS3.0版本系统出现,是苹果大力推广的技术之一,可以实现对 XML, 二进制文件和 SQLite 数据文件的访问.</li><li>可以节省代码量,一般要节省30%到70%的代码量.</li><li>支持可视化建模.</li><li>CoreData 支持模型版本升级等.</li></ul><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><ul><li>创建 CoreData 项目,记住选中 “Use Core Data”.项目会自动创建出数据模型文件.<br><img src="iOS 开发之 CoreData_1.png" alt="">  </li><li>创建出项目会发现多了 CoreDataDemo.xcdatamodeld 模型文件(可视化建模文件)<br><img src="iOS 开发之 CoreData_2.png" alt=""></li></ul><h2 id="主要类"><a href="#主要类" class="headerlink" title="主要类"></a>主要类</h2><ul><li>NSManagedObjectContext: 被管理对象上下文(数据管理器).</li><li>NSManagedObjectModel: 被管理对象(数据模型器).</li><li>NSPersistentStoreCoordinator: 持久化存储助理(数据链接器).</li></ul><h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><ul><li>点击 “CoreDataDemo.xcdatamodeld” 文件,添加实体.<br><img src="iOS 开发之 CoreData_3.png" alt="">  </li><li>这里我们需要创建Person和Card的实体以及实体属性:<br><img src="iOS 开发之 CoreData_4.png" alt="">  </li><li>选中Person实体，在Person中添加card属性:<br><img src="iOS 开发之 CoreData_5.png" alt="">  </li><li>选中Card实体，在Card中添加person属性:<br><img src="iOS 开发之 CoreData_6.png" alt="">   </li><li>添加后模型对应关系:<br><img src="iOS 开发之 CoreData_7.png" alt=""> </li></ul><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><ul><li><p>获取上下文对象,在创建项目时, AppDelegate 提供了相应方法获取上下文.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context: <span class="type">NSManagedObjectContext</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span></span><br><span class="line">    <span class="keyword">return</span> appDelegate.persistentContainer.viewContext</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">selected</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSFetchRequestResult</span>&gt;()</span><br><span class="line">    request.entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Person"</span>, <span class="keyword">in</span>: context)</span><br><span class="line">    request.predicate = <span class="type">NSPredicate</span>(format: <span class="string">"age=%@"</span>, <span class="string">"26"</span>)</span><br><span class="line">    request.sortDescriptors = [<span class="type">NSSortDescriptor</span>(key: <span class="string">"age"</span>, ascending: <span class="literal">true</span>)]</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">try</span> context.fetch(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> person = result <span class="keyword">as</span>? [<span class="type">Person</span>] &#123;</span><br><span class="line">            <span class="keyword">for</span> per <span class="keyword">in</span> person &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"<span class="subst">\(per.name)</span> : <span class="subst">\(per.age)</span> ---- <span class="subst">\(per.card?.no)</span> : <span class="subst">\(per.card?.name)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> person = <span class="type">NSEntityDescription</span>.insertNewObject(forEntityName: <span class="string">"Person"</span>, into: context)</span><br><span class="line">    person.setValue(nameText.text, forKey: <span class="string">"name"</span>)</span><br><span class="line">    person.setValue(<span class="type">Int</span>(ageText.text!), forKey: <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">let</span> card = <span class="type">NSEntityDescription</span>.insertNewObject(forEntityName: <span class="string">"Card"</span>, into: context)</span><br><span class="line">    card.setValue(<span class="string">"123456"</span>, forKey: <span class="string">"no"</span>)</span><br><span class="line">    card.setValue(<span class="string">"学生卡"</span>, forKey: <span class="string">"name"</span>)</span><br><span class="line">    person.setValue(card, forKey: <span class="string">"card"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> context.save()</span><br><span class="line">    &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 修改数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - 修改数据要查询出需要修改的数据,依次修改</span></span><br><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSFetchRequestResult</span>&gt;()</span><br><span class="line">    request.entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Person"</span>, <span class="keyword">in</span>: context)</span><br><span class="line">    request.predicate = <span class="type">NSPredicate</span>(format: <span class="string">"age=%@"</span>, <span class="string">"26"</span>)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">try</span> context.fetch(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> person = result <span class="keyword">as</span>? [<span class="type">Person</span>] &#123;</span><br><span class="line">            <span class="keyword">for</span> per <span class="keyword">in</span> person &#123;</span><br><span class="line">                per.name = <span class="string">"Angelo"</span></span><br><span class="line">                <span class="keyword">try</span> context.save()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 删除数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - 删除数据需要先查询出要删除的数据,依次删除</span></span><br><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">deleter</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> request = <span class="type">NSFetchRequest</span>&lt;<span class="type">NSFetchRequestResult</span>&gt;()</span><br><span class="line">    request.entity = <span class="type">NSEntityDescription</span>.entity(forEntityName: <span class="string">"Person"</span>, <span class="keyword">in</span>: context)</span><br><span class="line">    request.predicate = <span class="type">NSPredicate</span>(format: <span class="string">"age=%@"</span>, <span class="string">"26"</span>)</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">try</span> context.fetch(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> person = result <span class="keyword">as</span>? [<span class="type">Person</span>] &#123;</span><br><span class="line">            <span class="keyword">for</span> per <span class="keyword">in</span> person &#123;</span><br><span class="line">                context.delete(per)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span>  &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>GitHub 地址:<a href="https://github.com/AndyCuiYTT/CoreDataDemo" target="_blank" rel="noopener">https://github.com/AndyCuiYTT/CoreDataDemo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;CoreData 是苹果公司封装的进行数据持久化的框架,首次在 iOS3.0版本的系统中出现,它允许按照实体-属性-值模型组织数据,并以 XML, 二进制文件或者 SQLite 数据文件格式持久化数据.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="数据处理" scheme="http://andycui.top/categories/iOS/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
      <category term="CoreData" scheme="http://andycui.top/tags/CoreData/"/>
    
  </entry>
  
  <entry>
    <title>iOS 沙盒机制</title>
    <link href="http://andycui.top/2018/05/31/iOS%20%E6%B2%99%E7%9B%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://andycui.top/2018/05/31/iOS 沙盒机制/</id>
    <published>2018-05-31T07:02:15.000Z</published>
    <updated>2018-09-06T03:47:59.942Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 每个 APP 都有自己的存储空间,这个存储空间叫做沙盒. APP可以在自己的沙盒中进行数据存取操作,但不能访问其他 app 的沙盒空间.对 app 做一些数据存储或者文件缓存时,一般都保存在沙盒中.<br><a id="more"></a></p><h1 id="沙盒机制简介"><a href="#沙盒机制简介" class="headerlink" title="沙盒机制简介"></a>沙盒机制简介</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>沙盒机制根据访问权限和功能区别分为不同的目录: document,library,temp,.app, library又包含 caches 和preferences.</p><ul><li>document: 保存应用运行时生成的需要持久化的数据iTunes会自动备份该目录。苹果建议将在应用程序中浏览到的文件数据保存在该目录下.</li><li><p>library: 这个目录下有两个目录  </p><blockquote><ul><li>caches: 一般存储的是缓存文件，例如图片视频等，此目录下的文件不会再应用程序退出时删除，在手机备份的时候，iTunes不会备份该目录。  </li><li>preferences: 保存应用程序的所有偏好设置iOS的Settings(设置)，我们不应该直接在这里创建文件，而是需要通过NSUserDefault这个类来访问应用程序的偏好设置。iTunes会自动备份该文件目录下的内容.</li></ul></blockquote></li><li><p>temp: 临时文件目录，在程序重新运行的时候，和开机的时候，会清空tmp文件夹。</p></li><li>.app: 这个就是可运行的应用文件，带有签名的文件包，包含应用程序代码和静态数据.  </li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>每个应用程序都在自己的沙盒内.</li><li>不能随意跨越自己的沙盒去访问别的应用程序沙盒的内容.</li><li>应用程序向外请求或接收数据都需要经过权限认证.</li></ul><h1 id="沙盒操作"><a href="#沙盒操作" class="headerlink" title="沙盒操作"></a>沙盒操作</h1><h2 id="获取沙盒路径"><a href="#获取沙盒路径" class="headerlink" title="获取沙盒路径"></a>获取沙盒路径</h2><h2 id="获取沙盒根路径"><a href="#获取沙盒根路径" class="headerlink" title="获取沙盒根路径"></a>获取沙盒根路径</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> homePath = <span class="type">NSHomeDirectory</span>()</span><br></pre></td></tr></table></figure><h3 id="获取-document-路径"><a href="#获取-document-路径" class="headerlink" title="获取 document 路径"></a>获取 document 路径</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> documentPath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="获取-library-路径"><a href="#获取-library-路径" class="headerlink" title="获取 library 路径"></a>获取 library 路径</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> libraryPath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.libraryDirectory, .userDomainMask, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="获取-cache-路径"><a href="#获取-cache-路径" class="headerlink" title="获取 cache 路径"></a>获取 cache 路径</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cachePath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.cachesDirectory, .userDomainMask, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="获取-preferences-路径"><a href="#获取-preferences-路径" class="headerlink" title="获取 preferences 路径"></a>获取 preferences 路径</h3><p>由系统维护,不需要我们手动获取文件目录.可借助 UserDefault 维护</p><h3 id="获取-tmp-路径"><a href="#获取-tmp-路径" class="headerlink" title="获取 tmp 路径"></a>获取 tmp 路径</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tmpPath = <span class="type">NSTemporaryDirectory</span>()</span><br></pre></td></tr></table></figure><h3 id="获取程序目录和内容"><a href="#获取程序目录和内容" class="headerlink" title="获取程序目录和内容"></a>获取程序目录和内容</h3><ul><li>获取程序包路径<br><code>let path = Bundle.main.resourcePath</code></li><li>获取图片资源路径<br><code>let imagePath = Bundle.main.path(forResource: &quot;temp&quot;, ofType: &quot;png&quot;)</code></li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>iOS 对文件进行管理需要用到文件管理器: FileManager.</p><h3 id="检测文件是否存在"><a href="#检测文件是否存在" class="headerlink" title="检测文件是否存在"></a>检测文件是否存在</h3><p><code>FileManager.default.fileExists(atPath: filePath)</code></p><h3 id="创建文件路径"><a href="#创建文件路径" class="headerlink" title="创建文件路径"></a>创建文件路径</h3><p><code>FileManager.default.createDirectory(atPath: path, withIntermediateDirectories: true, attributes: nil)</code></p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><code>FileManager.default.createFile(atPath: path, contents: data, attributes: nil)</code></p><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p><code>FileManager.default.removeItem(atPath: path)</code></p><h3 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h3><p><code>FileManager.default.moveItem(atPath: oldPath, toPath: newPath)</code></p><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><p><code>FileManager.default.copyItem(atPath: oldPath, toPath: newPath)</code></p><h3 id="获取文件属性"><a href="#获取文件属性" class="headerlink" title="获取文件属性"></a>获取文件属性</h3><p><code>FileManager.default.attributesOfItem(atPath: filePath)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 每个 APP 都有自己的存储空间,这个存储空间叫做沙盒. APP可以在自己的沙盒中进行数据存取操作,但不能访问其他 app 的沙盒空间.对 app 做一些数据存储或者文件缓存时,一般都保存在沙盒中.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://andycui.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>实现 cell 加载网络图片自适应方案</title>
    <link href="http://andycui.top/2018/05/23/%E5%AE%9E%E7%8E%B0cell%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/"/>
    <id>http://andycui.top/2018/05/23/实现cell图片自适应方案/</id>
    <published>2018-05-23T06:57:56.000Z</published>
    <updated>2018-09-06T03:47:59.995Z</updated>
    
    <content type="html"><![CDATA[<p>UITableView 是 iOS 开发中最常用的控件之一,使用 UITaleView 时最头疼的莫过于 cell 高度的计算,虽说在 iOS8.0 以后引入了自适应方法,但在适配过程中任然会遇到各种难题,尤其是为了满足产品需求进行复杂 cell 自定义时,高度计算可谓是难上加难.这里主要对开发中遇到的自定义 cell 是加载网络图片适配问题进行总结.<br><a id="more"></a></p><p>在开发中为了用户能有更好体验,对网络请求多采用异步请求的方式,更有甚者对请求数据做了本地缓存.图片作为 app 中最常见的展现形式无疑是最耗流量的,对图片的处理直接影响到用户的体验,好在有大神为我们提供了好的框架(<a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="noopener">Kingfisher</a>,<a href="https://github.com/rs/SDWebImage" target="_blank" rel="noopener">SDWebImage</a>),大大提高了我们的开发效率.</p><p>图片的异步加载提高了用户体验,却在开发中遇到了新的难题,因为图片异步加载你无法提前预知图片的尺寸,在布局时难以控制 UIImageView 的大小,如果将 UIImageView 固定大小势必会造成图片的压缩或拉伸,现在主要针对于自定义 cell 时对图片自适应布局提一些建议.</p><h3 id="固定-UIImageView-大小"><a href="#固定-UIImageView-大小" class="headerlink" title="固定 UIImageView 大小"></a>固定 UIImageView 大小</h3><p>在开发中我们时常会将 UIImageView 固定大小或者固定宽高比例,通过设置 ImageView 的 contentMode 属性设置图片的显示风格.<br>该方法简单容易造成图片压缩拉伸或显示不全问题.<br>contentMode 取值:  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIViewContentMode</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> scaleToFill <span class="comment">//缩放内容到合适比例大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> scaleAspectFit <span class="comment">//缩放内容到合适的大小，边界多余部分透明</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> scaleAspectFill  <span class="comment">//缩放内容填充到指定大小，边界多余的部分省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> redraw <span class="comment">//重绘视图边界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> center <span class="comment">//视图保持等比缩放,居中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> top <span class="comment">//视图顶部对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> bottom <span class="comment">//视图底部对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span> <span class="comment">//视图左侧对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span> <span class="comment">//视图右侧对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> topLeft <span class="comment">//视图左上角对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> topRight <span class="comment">//视图右上角对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> bottomLeft <span class="comment">//视图左下角对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> bottomRight <span class="comment">//视图右下角对齐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过获取服务器存储的图片尺寸布局"><a href="#通过获取服务器存储的图片尺寸布局" class="headerlink" title="通过获取服务器存储的图片尺寸布局"></a>通过获取服务器存储的图片尺寸布局</h3><p>在上传图片时可以将图片的大小一起上传服务器保存,在用户加载图片时将图片信息和图片 URL 地址一起返回,根据返回的图片信息计算 UIImageView 的 size 进行布局.<br>该方法比较简单,但需要后台配合使用.</p><h3 id="通过监听图片加载刷新-cell-实现-配合-cell-自适应"><a href="#通过监听图片加载刷新-cell-实现-配合-cell-自适应" class="headerlink" title="通过监听图片加载刷新 cell 实现(配合 cell 自适应)"></a>通过监听图片加载刷新 cell 实现(配合 cell 自适应)</h3><p>无论 SDWebiamge 还是 Kingfisher,作者都给我们提供了图片加载完回调方法,我们可以在图片加载完后重新计算 cell 高度.<br>该方法大大加大了 cell 的刷新频率.<br>具体步骤:  </p><ul><li>在自定义 cell 中定义闭包变量.<br><code>var refreshCell: ((IndexPath) -&gt; Void)?</code></li><li><p>在图片加载完成的回调中调用闭包,为了减少 cell 的刷新,判断是拉取网络数据还是加载的缓存数据,如果是网络数据调整图片大小并将调整后图片覆盖网络加载图片,如果是缓存图片不处理.  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iconImageView.kf.setImage(with: <span class="type">URL</span>(string: iconImageURL), placeholder: <span class="type">UIImage</span>(named: <span class="string">"tmp"</span>)) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>](image, error, type, url) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> type == .<span class="keyword">none</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>?.iconImageView.image =  <span class="keyword">self</span>?.iconImageView.image?.ytt.resetImageSizeWithWidth(<span class="type">UIScreen</span>.main.bounds.width)</span><br><span class="line">        <span class="type">ImageCache</span>.<span class="keyword">default</span>.store((image?.ytt.resetImageSizeWithWidth(<span class="type">UIScreen</span>.main.bounds.width))!, forKey: (url?.absoluteString)!)</span><br><span class="line">        <span class="keyword">self</span>?.refreshCell?(indexPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 TableView 回调方法中实现闭包,仅当 cell 展现在屏幕时刷新</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cell.refreshCell = &#123;(index) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> (tableView.indexPathsForVisibleRows?.<span class="built_in">contains</span>(index))! &#123;</span><br><span class="line">        tableView.reloadRows(at: [index], with: .automatic)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="通过-ImageIO-框架获取图片信息"><a href="#通过-ImageIO-框架获取图片信息" class="headerlink" title="通过 ImageIO 框架获取图片信息"></a>通过 ImageIO 框架获取图片信息</h3><p>在给 UIImageView 赋值时通过 ImageIO 获取 image 的尺寸,修改 UIImageView 的大小.<br>该方法需要在网络请求数据,加大了数据请求量.<br>实现代码:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageSource = <span class="type">CGImageSourceCreateWithURL</span>(<span class="type">URL</span>(string: iconImageURL)! <span class="keyword">as</span> <span class="type">CFURL</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = <span class="type">CGImageSourceCopyPropertiesAtIndex</span>(imageSource!, <span class="number">0</span>, <span class="literal">nil</span>) <span class="keyword">as</span>? <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> width = result[<span class="string">"PixelWidth"</span>] <span class="keyword">as</span>? <span class="type">CGFloat</span>, <span class="keyword">let</span> height = result[<span class="string">"PixelHeight"</span>] <span class="keyword">as</span>? <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> h =  (<span class="type">UIScreen</span>.main.bounds.width - <span class="number">20</span>) / (width / height)</span><br><span class="line">        iconImageView.snp.remakeConstraints &#123; (make) <span class="keyword">in</span></span><br><span class="line">            make.height.equalTo(h)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UITableView 是 iOS 开发中最常用的控件之一,使用 UITaleView 时最头疼的莫过于 cell 高度的计算,虽说在 iOS8.0 以后引入了自适应方法,但在适配过程中任然会遇到各种难题,尤其是为了满足产品需求进行复杂 cell 自定义时,高度计算可谓是难上加难.这里主要对开发中遇到的自定义 cell 是加载网络图片适配问题进行总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="TableView" scheme="http://andycui.top/categories/iOS/TableView/"/>
    
    
      <category term="cell 自适应" scheme="http://andycui.top/tags/cell-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>Carthage 安装以及初步实用</title>
    <link href="http://andycui.top/2018/05/22/Carthage%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%88%9D%E6%AD%A5%E5%AE%9E%E7%94%A8/"/>
    <id>http://andycui.top/2018/05/22/Carthage安装以及初步实用/</id>
    <published>2018-05-22T02:49:52.000Z</published>
    <updated>2018-09-06T03:47:59.724Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/Carthage/Carthage/raw/master/Logo/PNG/header.png" alt="Carthage"></p><p>本人从事 iOS 开发已有2年多,用 swift 开发也有一年多的时间了,此前一直利用 cocopods 管理三方框架和依赖,最近了解到 Carthage 这个工具,本着学习的态度对这工具进行了了解.  </p><p>官方地址: <a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">https://github.com/Carthage/Carthage</a></p><a id="more"></a><h2 id="Carthage-简介"><a href="#Carthage-简介" class="headerlink" title="Carthage 简介"></a>Carthage 简介</h2><ul><li>Carthage 类似于 CocoaPods，为用户管理第三方框架和依赖，但不会自动修改项目文件和生成配置</li><li>Carthage 是去中心化的依赖管理工具，安装依赖时不需要去中心仓库获取 CocoaPods 所有依赖的索引，节省时间</li><li>对项目无侵入性，Carthage 设计上也比较简单，利用的都是 Xcode 自身的功能，开发者在创建依赖时，相比 CocoaPods 也简单许多</li><li>Carthage 管理的依赖只需编译一次，项目干净编译时，不会再去重新编译依赖，节省时间</li><li>自动将第三方框架编程为 Dynamic framework( 动态库 )<br>与 CocoaPods 无缝集成，一个项目能同时拥有 CocoaPods 和 Carthage</li><li>缺点： <ul><li>仅支持 iOS8 +</li><li>它只支持框架，所以不能用来针对 iOS 8 以前的系统版本进行开发<br>支持的 Carthage 安装的第三方框架和依赖不如 CocoaPods 丰富</li><li>无法在 Xcode 里定位到源码</li><li>安装包的大小比用CocoaPods安装的包大</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装 Carthage.</p></blockquote><h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><ul><li><p>Install Homebrew:<br><img src="Carthage_1.png" alt="Install Homebrew"></p></li><li><p>获取 Homebrew 最新版本<br><code>$ brew update</code></p></li><li><p>Homebrew 常用命令</p><ul><li>搜索<br><code>$ brew search &lt;packageName&gt;</code></li><li>安装<br><code>$ brew install &lt;packageName&gt;</code></li><li>卸载<br><code>$ brew uninstall &lt;packageName&gt;</code></li><li>查看已安装包列表<br><code>$ brew list</code></li><li>查看包信息<br><code>$ brew info &lt;packageName&gt;</code></li><li>查看Homebrew版本<br><code>$ brew -v</code></li></ul></li></ul><h3 id="安装-Cartgage"><a href="#安装-Cartgage" class="headerlink" title="安装 Cartgage"></a>安装 Cartgage</h3><ul><li>安装<br><code>$ brew install carthage</code></li><li>查看 Cartgage 版本<br><code>$ carthage version</code></li><li>更新 carthage 版本<br><code>brew upgrade carthage</code></li><li>删除carthage旧版本<br><code>brew cleanup carthage</code></li></ul><h2 id="使用-Cartgage-安装依赖"><a href="#使用-Cartgage-安装依赖" class="headerlink" title="使用 Cartgage 安装依赖"></a>使用 Cartgage 安装依赖</h2><ul><li>进入项目所在路径<br><code>$ cd ~/路径/项目文件夹</code>  </li><li>创建空的 Carthage 文件 Cartfile<br><code>$ touch Cartfile</code></li><li>使用 Xcode 打开 Cartfile 文件<br><code>$ open -a Xcode Cartfile</code></li><li>编辑 Carfile 文件(以Alamofire为例)<br><code>github &quot;Alamofire/Alamofire&quot; == 4.4.0</code></li><li>执行更新命令,获取类库<br><code>$ carthage update --platform iOS</code></li><li>更新完成,检查目录结构<br><code>更新完成后项目根路径会多出两个文件(Cartfile.resolved,Cartfile)和一个文件夹(Carthage), Carthage下又有两个文件夹(Checkouts 和 Build), Checkouts 从github获取的源代码, Build 编译出来的Framework二进制代码库.</code><br><img src="Carthage_2.png" alt=""></li></ul><h2 id="添加-Frameworks-到项目中"><a href="#添加-Frameworks-到项目中" class="headerlink" title="添加 Frameworks 到项目中"></a>添加 Frameworks 到项目中</h2><ul><li><p>点击’项目名’ –&gt; ‘TARGETS’ –&gt; ‘General’, 在最下边找到’Linked Framework and Libraries’.<br><img src="Carthage_3.png" alt=""></p></li><li><p>点击’+’ –&gt; ‘Add Other ..’, 选择’Carthage/Build/iOS/Alamofire.framework’,点击 ‘Open’ 导入.<br><img src="Carthage_4.png" alt=""></p></li><li><p>选择菜单选项 ‘Build Phases’ –&gt; 点击 ‘+’ –&gt; ‘New Run Script Phase’, 添加以下命令:<br><code>/usr/local/bin/carthage copy-frameworks</code><br><img src="Carthage_5.png" alt=""></p></li><li><p>点击 ‘Input Files’ 下的 ‘+’,为每个 Framework 添加访问路径:<br><code>$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework</code><br><img src="Carthage_6.png" alt=""></p></li><li><p>在项目中 import 所需包就可以使用了.<br><code>import Alamofire</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/Carthage/Carthage/raw/master/Logo/PNG/header.png&quot; alt=&quot;Carthage&quot;&gt;&lt;/p&gt;
&lt;p&gt;本人从事 iOS 开发已有2年多,用 swift 开发也有一年多的时间了,此前一直利用 cocopods 管理三方框架和依赖,最近了解到 Carthage 这个工具,本着学习的态度对这工具进行了了解.  &lt;/p&gt;
&lt;p&gt;官方地址: &lt;a href=&quot;https://github.com/Carthage/Carthage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
      <category term="开发工具" scheme="http://andycui.top/categories/Other/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="开发工具" scheme="http://andycui.top/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>YTTCoder</title>
    <link href="http://andycui.top/2018/01/24/YTTCoder/"/>
    <id>http://andycui.top/2018/01/24/YTTCoder/</id>
    <published>2018-01-24T02:17:18.000Z</published>
    <updated>2018-09-06T03:47:59.812Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作之余对开发中用到的数据解析相关进行了整理,整合了开发中常用到的数据解析,并将其封装成模块.(持续完善中)</p><p><a href="https://github.com/AndyCuiYTT/YTTCoder" target="_blank" rel="noopener">YTTCoder</a> : 实现常用的数据解析,例如: JSON 转 Model, 字典转 JSON等<br><a id="more"></a></p><p><img src="https://img.shields.io/badge/language-swift-green.svg" alt=""> <img src="https://img.shields.io/cocoapods/v/YTTCoder.svg" alt=""> <a href="http://andycui.top"><img src="https://img.shields.io/badge/blog-AndyCuiの博客-yellowgreen.svg" alt=""></a></p><h4 id="YTTJsonCodable-JSON-与-Model-之间相互转化的工具类"><a href="#YTTJsonCodable-JSON-与-Model-之间相互转化的工具类" class="headerlink" title="YTTJsonCodable: JSON 与 Model 之间相互转化的工具类"></a>YTTJsonCodable: JSON 与 Model 之间相互转化的工具类</h4><blockquote><p>提供数据转化的类方法,可直接调用.</p></blockquote><h4 id="YTTJson-协议-继承Codable协议"><a href="#YTTJson-协议-继承Codable协议" class="headerlink" title="YTTJson: 协议,继承Codable协议"></a>YTTJson: 协议,继承Codable协议</h4><blockquote><p>定义 Model 实体类只需遵守该协议即可调用装换方法.</p></blockquote><h4 id="YTTArrayCoder-数组扩展类"><a href="#YTTArrayCoder-数组扩展类" class="headerlink" title="YTTArrayCoder: 数组扩展类"></a>YTTArrayCoder: 数组扩展类</h4><blockquote><p>调用使用 obj.ytt.toJson() 形式调用</p><ul><li>toJson: 数组转 JSON 字符串</li></ul></blockquote><h4 id="YTTDictionaryCoder-字典扩展类"><a href="#YTTDictionaryCoder-字典扩展类" class="headerlink" title="YTTDictionaryCoder: 字典扩展类"></a>YTTDictionaryCoder: 字典扩展类</h4><blockquote><p>调用使用 obj.ytt.toJson() 形式调用</p><ul><li>toJson: 字典转 JSON 字符串</li><li>getValue(withKeyPath): 根据路径获取值</li></ul></blockquote><h4 id="YTTStringCoder-字符串扩展类"><a href="#YTTStringCoder-字符串扩展类" class="headerlink" title="YTTStringCoder: 字符串扩展类"></a>YTTStringCoder: 字符串扩展类</h4><blockquote><p>调用使用 obj.ytt.toDictionary() 形式调用</p><ul><li>toDictionary: JSON 字符串转字典</li><li>toArray: JSON 字符串转数组</li><li>toDate: 时间字符串转 Date 对象</li></ul></blockquote><h4 id="YTTDateCoder-Date-扩展类"><a href="#YTTDateCoder-Date-扩展类" class="headerlink" title="YTTDateCoder: Date 扩展类"></a>YTTDateCoder: Date 扩展类</h4><blockquote><p>调用使用 obj.ytt.toString() 形式调用</p><ul><li>toString: Date 格式化</li></ul></blockquote><h4 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h4><p>如果您有什么好的修改建议,可以发邮件到<a href="mailto://AndyCuiYTT@163.com" target="_blank" rel="noopener">AndyCuiYTT@163.com</a>, 也欢迎到我的博客<a href="http://andycui.top">AndyCuiの博客</a>一起讨论学习~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作之余对开发中用到的数据解析相关进行了整理,整合了开发中常用到的数据解析,并将其封装成模块.(持续完善中)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AndyCuiYTT/YTTCoder&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YTTCoder&lt;/a&gt; : 实现常用的数据解析,例如: JSON 转 Model, 字典转 JSON等&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="数据处理" scheme="http://andycui.top/categories/iOS/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数据处理" scheme="http://andycui.top/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>多台电脑共同管理hexo博客</title>
    <link href="http://andycui.top/2017/10/20/hexo-version-control/"/>
    <id>http://andycui.top/2017/10/20/hexo-version-control/</id>
    <published>2017-10-20T01:57:30.000Z</published>
    <updated>2018-09-06T03:47:59.829Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。<br>这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。<br>网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。<br><a id="more"></a></p><p>先删除主题文件下的.git文件，<br>可以直接删除或者执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf .git</span><br></pre></td></tr></table></figure><p>然后在本地博客文件夹下边依次输入以下指令(部分指令因为有提示可以自己修改下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git checkout -b hexo</span><br><span class="line">$ git remote add origin git@github.com:vonfly（你自己giuhub账号名）/vonfly.github.io（项目名）.git</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"提交说明"</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure><p>执行到这里我们就已经把本地的源文件添加到了分支hexo上。</p><p>说明：博客文件夹下根目录.gitignore（此文件的作用是因此忽略所写的文件或者目录，加快push速度。）可以不修改，我的就没有修改，如果不修改的话<br>在；另外一台电脑上克隆下来的博客项目就要先运行一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>我的.gitignore文件内容为<br>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p><p>当然你也可以把node_modules/去掉，这样在另外的电脑克隆下来的项目就不用在运行上面的命令了</p><p>扩展：</p><h3 id="github常见操作和常见错误！"><a href="#github常见操作和常见错误！" class="headerlink" title="github常见操作和常见错误！"></a>github常见操作和常见错误！</h3><h4 id="如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git"><a href="#如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git" class="headerlink" title="如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git"></a>如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git</h4><p>提示出错信息：fatal: remote origin already exists.</p><p>解决办法如下：<br>1、先输入$ git remote rm origin<br>2、再输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git 就不会报错了！</p><h4 id="如果输入-git-remote-rm-origin-还是报错的话，"><a href="#如果输入-git-remote-rm-origin-还是报错的话，" class="headerlink" title="如果输入$ git remote rm origin 还是报错的话，"></a>如果输入$ git remote rm origin 还是报错的话，</h4><p>error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容<br>4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc<br>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</p><h4 id="如果输入-git-push-origin-master"><a href="#如果输入-git-push-origin-master" class="headerlink" title="如果输入$ git push origin master"></a>如果输入$ git push origin master</h4><p>提示出错信息：error:failed to push som refs to …….<br>解决办法如下：<br>1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来<br>2、再输入$ git push origin master<br>3、如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.<br>4、则需要重新输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。&lt;br&gt;这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。&lt;br&gt;网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
    
      <category term="hexo" scheme="http://andycui.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SliderView</title>
    <link href="http://andycui.top/2017/10/14/SliderViews/"/>
    <id>http://andycui.top/2017/10/14/SliderViews/</id>
    <published>2017-10-14T04:57:30.000Z</published>
    <updated>2018-09-06T03:47:59.746Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/AndyCuiYTT/SliderViews" target="_blank" rel="noopener">SliderViews</a> : 简单易用的滑动标签工具,『标签栏工具』『滑动视图工具』可单独使用.<br><a id="more"></a></p><p><img src="https://img.shields.io/badge/language-swift-green.svg" alt=""> <a href=""><img src="https://img.shields.io/cocoapods/l/SliderViews.svg" alt="CRAN"></a> <img src="https://img.shields.io/cocoapods/v/SliderViews.svg" alt=""> <a href="http://andycui.top"><img src="https://img.shields.io/badge/blog-AndyCuiの博客-yellowgreen.svg" alt=""></a><br><img src="sliderview-02.gif" alt=""></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SliderViews&apos;</span><br></pre></td></tr></table></figure><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="SegmentedControl-使用"><a href="#SegmentedControl-使用" class="headerlink" title="SegmentedControl 使用"></a>SegmentedControl 使用</h2><p> SegmentedControl: 标签栏工具,使用需要实现 YTTSegmentedDelegate 代理方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let segmented = YTTSegmentedControl()</span><br><span class="line">segmented.delegate = self // 实现 YTTSegmentedDelegate</span><br><span class="line">segmented.addTitleItems([&quot;SliderView1&quot;,&quot;SliderView2&quot;,&quot;SliderView3&quot;], isSelected: 1)</span><br><span class="line">segmented.backgroundColor = UIColor.cyan</span><br><span class="line">self.view.addSubview(segmented)</span><br><span class="line">segmented.snp.makeConstraints &#123; (make) in</span><br><span class="line">    make.left.right.centerY.equalToSuperview()</span><br><span class="line">    make.height.equalTo(50)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="sliderview-05.gif" alt=""></p><h2 id="SliderView-使用"><a href="#SliderView-使用" class="headerlink" title="SliderView 使用"></a>SliderView 使用</h2><p> SliderView: 滑动视图工具,使用需要实现YTTSliderViewDelegate代理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let sliderView = YTTSliderView()</span><br><span class="line">sliderView = self // 实现 YTTSliderViewDelegate</span><br><span class="line">let view1 = UIView()</span><br><span class="line">view1.backgroundColor = UIColor.cyan</span><br><span class="line">let view2 = UIView()</span><br><span class="line">view2.backgroundColor = UIColor.orange</span><br><span class="line">let view3 = UIView()</span><br><span class="line">view3.backgroundColor = UIColor.blue</span><br><span class="line">sliderView.addChildViews([view1, view2, view3], isSelected: 1)</span><br><span class="line">self.view.addSubview(sliderView)</span><br><span class="line">sliderView.snp.makeConstraints &#123; (make) in</span><br><span class="line">    make.edges.equalToSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="sliderview-04.gif" alt=""></p><h2 id="TabSliderView-使用"><a href="#TabSliderView-使用" class="headerlink" title="TabSliderView 使用"></a>TabSliderView 使用</h2><p> TabSliderView: SegmentedControl 与 SliderView 组合使用.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let tabSliderView = YTTTabSliderView()</span><br><span class="line">tabSliderView.addSubviews([(&quot;SliderView1&quot;,view1),(&quot;SliderView2&quot;,view2),(&quot;SliderView3&quot;,view3)])</span><br><span class="line">view.addSubview(tabSliderView)</span><br><span class="line">tabSliderView.snp.makeConstraints &#123; (make) in</span><br><span class="line">    make.edges.equalToSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="sliderview-03.gif" alt=""></p><h1 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h1><p>如果您有什么好的修改建议,可以发邮件到<a href="mailto://AndyCuiYTT@163.com" target="_blank" rel="noopener">AndyCuiYTT@163.com</a>, 也欢迎到我的博客<a href="http://andycui.top">AndyCuiの博客</a>一起讨论学习~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/AndyCuiYTT/SliderViews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SliderViews&lt;/a&gt; : 简单易用的滑动标签工具,『标签栏工具』『滑动视图工具』可单独使用.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="自定义视图" scheme="http://andycui.top/categories/iOS/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="slider" scheme="http://andycui.top/tags/slider/"/>
    
  </entry>
  
  <entry>
    <title>swift 处理 JSON - 转换 JSON 和 Model</title>
    <link href="http://andycui.top/2017/08/29/Swift%20%E5%A4%84%E7%90%86JSON%20-%20%E8%BD%AC%E6%8D%A2JSON%E5%92%8CModel/"/>
    <id>http://andycui.top/2017/08/29/Swift 处理JSON - 转换JSON和Model/</id>
    <published>2017-08-29T01:28:19.000Z</published>
    <updated>2018-09-06T03:47:59.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;&emsp;很多时候我们再服务端请求下来的数据都是<a href="https://baike.baidu.com/item/JSON/2462549" target="_blank" rel="noopener">JSON</a>格式，我们需要将这些数据展示在UI界面。我们一般都会先将JSON转化为数据模型或字典进行使用。<br>&emsp;&emsp;为了更快的开发我们时常会用到一些开源库，其中JSON解析的库必不可少，在OC开发中我们常用的JSON解析库如<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a>，<a href="https://github.com/jsonmodel/jsonmodel" target="_blank" rel="noopener">JSONModel</a>等,这些库基本都是利用runtime实现读取属性并利用kvc赋值的。在swift中由于runtime的局限性，产生了一些通过反射等机制实现的库，比如<a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a>，<a href="https://github.com/Hearst-DD/ObjectMapper" target="_blank" rel="noopener">ObjectMapper</a>，<a href="https://github.com/alibaba/handyjson" target="_blank" rel="noopener">HandyJSON</a>等，而 HandyJSON 是其中使用最舒服的一个库，本文将介绍用  HandyJSON 来进行Model和JSON间的互相转换。</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"doubleOptional\":1.1,\"stringImplicitlyUnwrapped\":\"hello\",\"int\":1&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(object.int)</span><br><span class="line">    <span class="built_in">print</span>(object.doubleOptional!)</span><br><span class="line">    <span class="built_in">print</span>(object.stringImplicitlyUnwrapped)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = <span class="type">BasicTypes</span>()</span><br><span class="line">object.int = <span class="number">1</span></span><br><span class="line">object.doubleOptional = <span class="number">1.1</span></span><br><span class="line">object.stringImplicitlyUnwrapped = “hello<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(object.toJSON()!) // serialize to dictionary</span></span><br><span class="line"><span class="string">print(object.toJSONString()!) // serialize to JSON string</span></span><br><span class="line"><span class="string">print(object.toJSONString(prettyPrint: true)!) // serialize to pretty JSON string</span></span><br></pre></td></tr></table></figure><h1 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h1><ul><li><a href="#特性">特性</a></li><li><a href="#环境要求">环境要求</a></li><li><a href="#安装">安装</a></li><li><a href="#反序列化-1">反序列化</a><ul><li><a href="#基本类型">基本类型</a></li><li><a href="#支持struct">支持struct</a></li><li><a href="#支持enum">支持enum</a></li><li><a href="#可选隐式解包可选集合等">可选、隐式解包可选、集合等</a></li><li><a href="#指定解析路径">指定解析路径</a></li><li><a href="#组合对象">组合对象</a></li><li><a href="#继承自父类的子类">继承自父类的子类</a></li><li><a href="#json中的数组">JSON中的数组</a></li><li><a href="#自定义解析规则">自定义解析规则</a></li><li><a href="#排除指定属性">排除指定属性</a></li><li><a href="#支持的属性类型">支持的属性类型</a></li></ul></li><li><a href="#序列化-1">序列化</a><ul><li><a href="#基本类型-1">基本类型</a></li><li><a href="#自定义映射和排除">自定义映射和排除型</a></li></ul></li><li><a href="#待办">待办</a></li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li><p>序列化Model到JSON、从JSON反序列化到Model</p></li><li><p>自然地以Model的属性名称作为解析JSON的Key，不需要额外指定</p></li><li><p>支持Swift中大部分类型</p></li><li><p>支持class、struct定义的Model</p></li><li><p>支持自定义解析规则</p></li><li><p>类型自适应，如JSON中是一个Int，但对应Model是String字段，会自动完成转化</p></li></ul><p>具体支持的类型，可以参考代码文件: <a href="./HandyJSONTests/BasicTypes.swift">BasicTypes</a>。</p><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul><li><p>iOS 8.0+/OSX 10.9+/watchOS 2.0+/tvOS 9.0+</p></li><li><p>Swift 2.3+ / Swift 3.0+</p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>HandyJSON只在Swift3.x版本上(master分支)开发新特性，在Swift2.x中使用，参见: <a href="https://github.com/alibaba/HandyJSON/tree/master_for_swift_2x" target="_blank" rel="noopener">swift2 branch</a></p><p>具体操作指引参考 <a href="./README.md">英文版README</a> 的 <code>Installation</code> 章节。</p><h1 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>要支持从JSON串反序列化，Model定义时要声明服从<code>HandyJSON</code>协议。确实是一个协议，而不是继承自<code>NSObject</code>。</p><p>服从<code>HandyJSON</code>协议，需要实现一个空的<code>init</code>方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"doubleOptional\":1.1,\"stringImplicitlyUnwrapped\":\"hello\",\"int\":1&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持struct"><a href="#支持struct" class="headerlink" title="支持struct"></a>支持struct</h2><p>对于声明为<code>struct</code>的Model，由于<code>struct</code>默认提供了空的<code>init</code>方法，所以不需要额外声明。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"doubleOptional\":1.1,\"stringImplicitlyUnwrapped\":\"hello\",\"int\":1&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但需要注意，如果你为<code>struct</code>指定了别的构造函数，那就要显示声明一个空的<code>init</code>函数。</p><h2 id="支持enum"><a href="#支持enum" class="headerlink" title="支持enum"></a>支持enum</h2><p>支持值类型的enum，且需要声明服从<code>HandyJSONEnum</code>协议。不再需要其他特殊处理了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AnimalType</span>: <span class="title">String</span>, <span class="title">HandyJSONEnum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Cat</span> = <span class="string">"cat"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Dog</span> = <span class="string">"dog"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Bird</span> = <span class="string">"bird"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">AnimalType</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"type\":\"cat\",\"name\":\"Tom\"&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> animal = <span class="type">Animal</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(animal.type?.rawValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可选、隐式解包可选、集合等"><a href="#可选、隐式解包可选、集合等" class="headerlink" title="可选、隐式解包可选、集合等"></a>可选、隐式解包可选、集合等</h2><p>HandyJSON支持这些非基础类型，包括嵌套结构。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bool: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> intOptional: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> doubleImplicitlyUnwrapped: <span class="type">Double</span>!</span><br><span class="line">    <span class="keyword">var</span> anyObjectOptional: <span class="type">Any</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arrayInt: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = []</span><br><span class="line">    <span class="keyword">var</span> arrayStringOptional: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?</span><br><span class="line">    <span class="keyword">var</span> setInt: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;?</span><br><span class="line">    <span class="keyword">var</span> dictAnyObject: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt; = [:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nsNumber = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> nsString: <span class="type">NSString</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object = <span class="type">BasicTypes</span>()</span><br><span class="line">object.intOptional = <span class="number">1</span></span><br><span class="line">object.doubleImplicitlyUnwrapped = <span class="number">1.1</span></span><br><span class="line">object.anyObjectOptional = <span class="string">"StringValue"</span></span><br><span class="line">object.arrayInt = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">object.arrayStringOptional = [<span class="string">"a"</span>, <span class="string">"b"</span>]</span><br><span class="line">object.setInt = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">object.dictAnyObject = [<span class="string">"key1"</span>: <span class="number">1</span>, <span class="string">"key2"</span>: <span class="string">"stringValue"</span>]</span><br><span class="line">object.nsNumber = <span class="number">2</span></span><br><span class="line">object.nsString = <span class="string">"nsStringValue"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = object.toJSONString()!</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指定解析路径"><a href="#指定解析路径" class="headerlink" title="指定解析路径"></a>指定解析路径</h2><p>HandyJSON支持指定从哪个具体路径开始解析，反序列化到Model。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int64</span>!</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"code\":200,\"msg\":\"success\",\"data\":&#123;\"cat\":&#123;\"id\":12345,\"name\":\"Kitty\"&#125;&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString, designatedPath: <span class="string">"data.cat"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合对象"><a href="#组合对象" class="headerlink" title="组合对象"></a>组合对象</h2><p>注意，如果Model的属性不是基本类型或集合类型，那么它必须是一个服从<code>HandyJSON</code>协议的类型。</p><p>如果是泛型集合类型，那么要求泛型实参是基本类型或者服从<code>HandyJSON</code>协议的类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aInt: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> aString: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composition</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aInt: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> comp1: <span class="type">Component</span>?</span><br><span class="line">    <span class="keyword">var</span> comp2: <span class="type">Component</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"num\":12345,\"comp1\":&#123;\"aInt\":1,\"aString\":\"aaaaa\"&#125;,\"comp2\":&#123;\"aInt\":2,\"aString\":\"bbbbb\"&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> composition = <span class="type">Composition</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(composition)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承自父类的子类"><a href="#继承自父类的子类" class="headerlink" title="继承自父类的子类"></a>继承自父类的子类</h2><p>如果子类要支持反序列化，那么要求父类也服从<code>HandyJSON</code>协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"id\":12345,\"color\":\"black\",\"name\":\"cat\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON数组"><a href="#JSON数组" class="headerlink" title="JSON数组"></a>JSON数组</h2><p>如果JSON的第一层表达的是数组，可以转化它到一个Model数组。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonArrayString: <span class="type">String</span>? = <span class="string">"[&#123;\"name\":\"Bob\",\"id\":\"1\"&#125;, &#123;\"name\":\"Lily\",\"id\":\"2\"&#125;, &#123;\"name\":\"Lucy\",\"id\":\"3\"&#125;]"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cats = [<span class="type">Cat</span>].deserialize(from: jsonArrayString) &#123;</span><br><span class="line">    cats.forEach(&#123; (cat) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义解析规则"><a href="#自定义解析规则" class="headerlink" title="自定义解析规则"></a>自定义解析规则</h2><p>HandyJSON支持自定义映射关系，或者自定义解析过程。你需要实现一个可选的<code>mapping</code>函数，在里边实现<code>NSString</code>值(HandyJSON会把对应的JSON字段转换为NSString)转换为你需要的字段类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int64</span>!</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line">    <span class="keyword">var</span> parent: (<span class="type">String</span>, <span class="type">String</span>)?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(mapper: HelpingMapper)</span></span> &#123;</span><br><span class="line">        <span class="comment">// specify 'cat_id' field in json map to 'id' property in object</span></span><br><span class="line">        mapper &lt;&lt;&lt;</span><br><span class="line">            <span class="keyword">self</span>.id &lt;-- <span class="string">"cat_id"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// specify 'parent' field in json parse as following to 'parent' property in object</span></span><br><span class="line">        mapper &lt;&lt;&lt;</span><br><span class="line">            <span class="keyword">self</span>.parent &lt;-- <span class="type">TransformOf</span>&lt;(<span class="type">String</span>, <span class="type">String</span>), <span class="type">String</span>&gt;(fromJSON: &#123; (rawString) -&gt; (<span class="type">String</span>, <span class="type">String</span>)? <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> parentNames = rawString?.characters.<span class="built_in">split</span>(separator: <span class="string">"/"</span>).<span class="built_in">map</span>(<span class="type">String</span>.<span class="keyword">init</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (parentNames[<span class="number">0</span>], parentNames[<span class="number">1</span>])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;, toJSON: &#123; (tuple) -&gt; <span class="type">String</span>? <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> _tuple = tuple &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"<span class="subst">\(_tuple.<span class="number">0</span>)</span>/<span class="subst">\(_tuple.<span class="number">1</span>)</span>"</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"cat_id\":12345,\"name\":\"Kitty\",\"parent\":\"Tom/Lily\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat.id)</span><br><span class="line">    <span class="built_in">print</span>(cat.parent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排除指定属性"><a href="#排除指定属性" class="headerlink" title="排除指定属性"></a>排除指定属性</h2><p>如果在Model中存在因为某些原因不能实现<code>HandyJSON</code>协议的非基本字段，或者不能实现<code>HandyJSONEnum</code>协议的枚举字段，又或者说不希望反序列化影响某个字段，可以在<code>mapping</code>函数中将它排除。如果不这么做，可能会出现未定义的行为。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotHandyJSONType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dummy: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int64</span>!</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line">    <span class="keyword">var</span> notHandyJSONTypeProperty: <span class="type">NotHandyJSONType</span>?</span><br><span class="line">    <span class="keyword">var</span> basicTypeButNotWantedProperty: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(mapper: HelpingMapper)</span></span> &#123;</span><br><span class="line">        mapper &gt;&gt;&gt; <span class="keyword">self</span>.notHandyJSONTypeProperty</span><br><span class="line">        mapper &gt;&gt;&gt; <span class="keyword">self</span>.basicTypeButNotWantedProperty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"name\":\"cat\",\"id\":\"12345\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持的属性类型"><a href="#支持的属性类型" class="headerlink" title="支持的属性类型"></a>支持的属性类型</h2><ul><li><p><code>Int</code>/<code>Bool</code>/<code>Double</code>/<code>Float</code>/<code>String</code>/<code>NSNumber</code>/<code>NSString</code></p></li><li><p><code>NSArray/NSDictionary</code></p></li><li><p><code>Int8/Int16/Int32/Int64</code>/<code>UInt8/UInt16/UInt23/UInt64</code></p></li><li><p><code>Optional&lt;T&gt;/ImplicitUnwrappedOptional&lt;T&gt;</code> // T is one of the above types</p></li><li><p><code>Array&lt;T&gt;</code> // T is one of the above types</p></li><li><p><code>Dictionary&lt;String, T&gt;</code> // T is one of the above types</p></li><li><p>以上类型的嵌套</p></li></ul><h1 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h1><h2 id="基本类型-1"><a href="#基本类型-1" class="headerlink" title="基本类型"></a>基本类型</h2><p>现在，序列化也要求Model声明服从<code>HandyJSON</code>协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object = <span class="type">BasicTypes</span>()</span><br><span class="line">object.int = <span class="number">1</span></span><br><span class="line">object.doubleOptional = <span class="number">1.1</span></span><br><span class="line">object.stringImplicitlyUnwrapped = “hello<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(object.toJSON()!) // serialize to dictionary</span></span><br><span class="line"><span class="string">print(object.toJSONString()!) // serialize to JSON string</span></span><br><span class="line"><span class="string">print(object.toJSONString(prettyPrint: true)!) // serialize to pretty JSON string</span></span><br></pre></td></tr></table></figure><h2 id="自定义映射和排除"><a href="#自定义映射和排除" class="headerlink" title="自定义映射和排除"></a>自定义映射和排除</h2><p>和反序列化一样，只要定义<code>mapping</code>和<code>exclude</code>就可以了。被排除的属性，序列化和反序列化都不再影响到它。而在<code>mapping</code>中定义的<code>Transformer</code>，同时定义了序列化和反序列的规则，所以只要为属性指明一个<code>Transformer</code>关系就可以了。</p><h1 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h1><p>提供几个 JSON 字符串生成 model 类的工具：</p><ul><li><a href="https://github.com/Ahmed-Ali/JSONExport" target="_blank" rel="noopener">JSONExport</a></li><li><a href="https://github.com/banxi1988/iOSCodeGenerator/blob/master/README.md" target="_blank" rel="noopener">iOS Code Generator</a></li><li><a href="https://github.com/mozhenhau/D3Json" target="_blank" rel="noopener">D3Json</a></li><li><a href="https://github.com/lucianomarisi/JSONUtilities" target="_blank" rel="noopener">JSONUtilities</a></li></ul>]]></content>
    
    <summary type="html">
    
      iOS 开发中 model 数据模型是最长的一种数据处理方式，通常与服务器端数据交互时，服务端返回JSON文本，然后由客户端对JSON数据进行解析转化为model类型进行使用。主要针对与JSON转model进行简单描述。
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="数据处理" scheme="http://andycui.top/categories/iOS/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="model" scheme="http://andycui.top/tags/model/"/>
    
      <category term="JSON" scheme="http://andycui.top/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 tableViewCell高度自适应</title>
    <link href="http://andycui.top/2017/08/01/%E6%B5%85%E8%B0%88-tableViewCell%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://andycui.top/2017/08/01/浅谈-tableViewCell高度自适应/</id>
    <published>2017-08-01T10:10:43.000Z</published>
    <updated>2018-09-06T03:48:00.011Z</updated>
    
    <content type="html"><![CDATA[<p> UITableView 是开发中最常用到的控件,可以说没有哪个 APP 离得开 UITableView 控件,使用时难免会遇到各种各样的问题,其中 cell 高度自适应是最让人头疼的,简单说一下我在开发中总结.<br><a id="more"></a><br>开发中面对 cell 的自适应有着各种各样的方法,无外乎以下几种:</p><h2 id="根据数据源计算"><a href="#根据数据源计算" class="headerlink" title="根据数据源计算"></a>根据数据源计算</h2><blockquote><p>通常做法为自定义 cell 添加类方法,传入当前 cell 的数据源,计算除 cell 的高度,返回.然后在 tableView 的代理方法中设置 cell 高度.<br>这种方法计算 cell 高度是需要注意:但计算 label 的高度时,要留意 label 的宽度和字体大小的设置,否则将会得到错误的高度</p></blockquote><h2 id="调用-tableView-的代理方法-拿到-cell-获取高度"><a href="#调用-tableView-的代理方法-拿到-cell-获取高度" class="headerlink" title="调用 tableView 的代理方法,拿到 cell 获取高度"></a>调用 tableView 的代理方法,拿到 cell 获取高度</h2><blockquote><p>这种做法的缺点使cell 的生成代码重复执行.</p></blockquote><h2 id="iOS-8-0-以后可以与新引入-cell-自适应方法-在-xib-下使用"><a href="#iOS-8-0-以后可以与新引入-cell-自适应方法-在-xib-下使用" class="headerlink" title="iOS 8.0 以后可以与新引入 cell 自适应方法(在 xib 下使用)"></a>iOS 8.0 以后可以与新引入 cell 自适应方法(在 xib 下使用)</h2><blockquote><p>需要设置 rowHeight( = UITableViewAutomaticDimension) 与 estimatedRowHeight 两个属性, rowHeight 设置表明使用自适应, estimatedRowHeight 一个参考值.<br>使用自适应如果 cell 中有图片,最好对 ImageView 的宽高进行限定,否则适配将会根据图片大小自适应.<br>当加载图片张数不确定时,可以添加一个 View, 在给 cell 赋值时用代码添加 ImgView, 将 view 的高度约束拖成属性,在图片添加完成后修改 view 的高度.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; UITableView 是开发中最常用到的控件,可以说没有哪个 APP 离得开 UITableView 控件,使用时难免会遇到各种各样的问题,其中 cell 高度自适应是最让人头疼的,简单说一下我在开发中总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="TableView" scheme="http://andycui.top/categories/iOS/TableView/"/>
    
    
      <category term="cell 自适应" scheme="http://andycui.top/tags/cell-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>swift 打包 framework</title>
    <link href="http://andycui.top/2017/07/25/swift-%E6%89%93%E5%8C%85-framework/"/>
    <id>http://andycui.top/2017/07/25/swift-打包-framework/</id>
    <published>2017-07-25T01:40:48.000Z</published>
    <updated>2018-09-06T03:47:59.970Z</updated>
    
    <content type="html"><![CDATA[<p> 在开发中我们常常会用到一些第三方 SDK 库，使用时只需将 framework 文件添加到项目中即可，十分方便。同样地，我们也可以创建自己的 framework 框架，用来封装一些常用的工具方法、框架类等。一来不会使源代码完全暴露在外，二来也便于代码复用。<br><a id="more"></a></p><h1 id="打包篇"><a href="#打包篇" class="headerlink" title=" 打包篇 "></a><center> 打包篇 </center></h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><blockquote><p>选择 File-&gt;New-&gt;Project-&gt;Framework&amp;Library-&gt;Cocoa Touch Framework, 点击 Next,语言选择 swift 如图:<br><img src="图-1.png" alt="创建"><br><strong> 创建完成生成以下目录: </strong><br><img src="图-2.png" alt="项目结构"></p><ul><li>xxx.h 文件的作用是整个包对外提供的入口头文件，除了正常定义参数属性之外还提供 Swift项目内引用的OC文件的import引用</li><li>info.plist 文件的作用就如同正常项目的plist文件作用，用来定义或添加一些属性。</li></ul></blockquote><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><blockquote><p>可以新建文件也可以在已有项目拷贝<br>这里要注意一下：由于打包类库工程不是一个完整项目工程，所以并没有AppDelegate等文件，所以涉及到这些的文件要额外处理，或改代码，或适当改变功能。<br>注意：工程如果有桥接文件，是不能拷贝过来的，否则编译不通过。桥接文件下的 import 引用应该放到 xxx.h 文件中<br><strong>注意:</strong> 如果 swift 文件想要暴露给外部使用,类及方法要用 public 修饰</p></blockquote><h2 id="经过以上操作本库已基本完成"><a href="#经过以上操作本库已基本完成" class="headerlink" title="经过以上操作本库已基本完成"></a>经过以上操作本库已基本完成</h2><blockquote><p><img src="图-3.png" alt="框架图"><br>注意: 如果用到资源文件,如:图片,视频,音频等直接用Assets.xcassets是无效的,我们要新建文件夹,将图片放入其中,添加后缀名.bundle,例如 xxx.bundle,使用图片时图片名:xxx.bundle/icon.png.</p></blockquote><h2 id="文件添加完毕就可以尝试-build-一下了"><a href="#文件添加完毕就可以尝试-build-一下了" class="headerlink" title="文件添加完毕就可以尝试 build 一下了"></a>文件添加完毕就可以尝试 build 一下了</h2><blockquote><p>正常情况下，如果我们swift项目引入了oc文件，我们必须通过一个桥接文件来处理两者之间的转换，而我们在新建类库包的时候，是禁止桥接文件存在的，即使你添加了，也会永远编译不过，打包不了。<br>所以这里就用到这个 xxx.h 头文件了。<br>我们可以通过这个文件来实现两者之间的转换，前提就是必须先将oc的.h暴露出来，否则即使你import，也会报错找不到.h 文件。</p></blockquote><h2 id="暴露文件给外部使用"><a href="#暴露文件给外部使用" class="headerlink" title="暴露文件给外部使用"></a>暴露文件给外部使用</h2><blockquote><p>选择 target-&gt;Build Phases-&gt;Header, 将要暴露给外部使用OC 的.h 的文件拖到 public 下,如果是 swift 只需要将类和方法声明成 public<br><img src="图-4.png" alt=""></p></blockquote><h2 id="编译通过，查看这里"><a href="#编译通过，查看这里" class="headerlink" title="编译通过，查看这里"></a>编译通过，查看这里</h2><blockquote><p><img src="图-5.png" alt=""><br>红框内就是最终我们得到的Framework包。<br>右击本地查看，会看到本类库以及对应的依赖第三方库包，后面在其他项目引用的时候，这些都是需要的（需要一起拷贝添加）。</p></blockquote><h1 id="合并真机和模拟器framework"><a href="#合并真机和模拟器framework" class="headerlink" title=" 合并真机和模拟器framework "></a><center> 合并真机和模拟器framework </center></h1><blockquote><h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><p>编译得到的包可分为 debug 包和 release包, debug 包一般用于测试,如果要发布务必打 release 包.<br><img src="图-6.png" alt=""><br>release 包又包含模拟器包和真机包,发布时需要将模拟器包与真机包合并<br>去包文件夹<br><img src="图-7.png" alt=""><img src="图-8.png" alt=""></p><h2 id="合并包"><a href="#合并包" class="headerlink" title="合并包"></a>合并包</h2><p>终端输入 lipo -create 真机路径 模拟器路径 -output 真机路径（ps：这几个路径就是上图拖动到终端后的路径）<br>但是并没有完，不知道为什么，终端这样合并只是假象，你需要手动去将Modules里的的 xxx.swiftmodule文件合并到一起</p></blockquote><h1 id="引用篇"><a href="#引用篇" class="headerlink" title=" 引用篇 "></a><center> 引用篇 </center></h1><blockquote><ul><li>新建空白工程</li><li>将之前所得到 framework 拷贝到项目</li><li>在工程Targets－General－EmbeddedBinaries内添加Frameworks包</li></ul></blockquote><h1 id="附加"><a href="#附加" class="headerlink" title=" 附加 "></a><center> 附加 </center></h1><blockquote><h2 id="引用-CommonCrypto"><a href="#引用-CommonCrypto" class="headerlink" title="引用 CommonCrypto"></a>引用 CommonCrypto</h2><p>项目中用到了 MD5加密, swift 是无法调用 C语言库的,在 xxx.h 中添加#import <commoncrypto commoncrypto.h=""> 报错,解决方法:<br>新建 module.modulemap 文件,在里边添加<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> module <span class="type">CommonCrypto</span> [system] &#123;</span><br><span class="line">    header <span class="string">"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/CommonCrypto/CommonCrypto.h"</span></span><br><span class="line">    export *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></commoncrypto></p></blockquote><p>选择 target-&gt;Build Settings, 找到 swift compler-Search Paths, 在 Import paths 添加创建文件路径<br>在需要 MD5机密的文件中 import CommonCrypto</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><blockquote><p><a href="http://www.cnblogs.com/yajunLi/p/5987687.html" target="_blank" rel="noopener">iOS打包framework - Swift完整项目打包Framework，嵌入OC项目使用</a><br><a href="http://www.cnblogs.com/yajunLi/p/6005077.html" target="_blank" rel="noopener">iOS打包Framework真机和模拟器兼容合并版本 - 详细攻略步骤</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 在开发中我们常常会用到一些第三方 SDK 库，使用时只需将 framework 文件添加到项目中即可，十分方便。同样地，我们也可以创建自己的 framework 框架，用来封装一些常用的工具方法、框架类等。一来不会使源代码完全暴露在外，二来也便于代码复用。&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
    
      <category term="framework" scheme="http://andycui.top/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>swift 网络请求</title>
    <link href="http://andycui.top/2017/07/18/network-swift/"/>
    <id>http://andycui.top/2017/07/18/network-swift/</id>
    <published>2017-07-18T02:13:11.000Z</published>
    <updated>2018-09-06T03:47:59.961Z</updated>
    
    <content type="html"><![CDATA[<p>对 Alamofire与系统的网络请求进行简易封装<br><a id="more"></a></p><h1 id="Alamofire"><a href="#Alamofire" class="headerlink" title="Alamofire"></a>Alamofire</h1><blockquote><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// post 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 服务器端返回数据为 JSON 数据格式</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求网络地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_post</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> params: ayParams? = <span class="literal">nil</span>, result: @escaping <span class="params">(Any)</span></span></span>-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>)&#123;</span><br><span class="line">    <span class="type">Alamofire</span>.request(urlStr, method: .post, parameters: params, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>, headers: <span class="literal">nil</span>).responseJSON &#123; (response) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> response.result.isSuccess&#123;</span><br><span class="line">            result(response.result.value!)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fail(response.error?.localizedDescription ?? <span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// get 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 服务器端返回数据为 JSON 数据格式</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求网络地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 请求成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 请求失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_get</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> params: ayParams? = <span class="literal">nil</span>, result: @escaping <span class="params">(Any)</span></span></span>-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>)&#123;</span><br><span class="line">    <span class="type">Alamofire</span>.request(urlStr, method: .<span class="keyword">get</span>, parameters: params, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>, headers: <span class="literal">nil</span>).responseJSON &#123; (response) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> response.result.isSuccess&#123;</span><br><span class="line">            result(response.result.value!)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fail(response.error?.localizedDescription ?? <span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 下载文件</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 文件地址</span></span><br><span class="line"><span class="comment">///   - method: 请求方式</span></span><br><span class="line"><span class="comment">///   - param: 请求参数</span></span><br><span class="line"><span class="comment">///   - fileURL: 保存文件路径</span></span><br><span class="line"><span class="comment">///   - progress: 下载进度</span></span><br><span class="line"><span class="comment">///   - result: 成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_downloadFile</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> method: HTTPMethod? = .<span class="keyword">get</span>, <span class="number">_</span> param: ayParams? = <span class="literal">nil</span>, fileURL: URL, progress: @escaping <span class="params">(Progress)</span></span></span>-&gt;<span class="type">Void</span>, result: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="comment">//拼接文件保存地址</span></span><br><span class="line">    <span class="keyword">let</span> destination: <span class="type">DownloadRequest</span>.<span class="type">DownloadFileDestination</span> = &#123; <span class="number">_</span>, response <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> (fileURL.appendingPathComponent(response.suggestedFilename!), [.removePreviousFile, .createIntermediateDirectories])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Alamofire</span>.download(urlStr, method: method!, parameters: param, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>, headers: <span class="literal">nil</span>, to: destination).downloadProgress(queue: <span class="type">DispatchQueue</span>.main, closure: &#123; (progres) <span class="keyword">in</span></span><br><span class="line">        progress(progres)</span><br><span class="line">    &#125;).responseData&#123;(response) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> response.result.isSuccess &#123;</span><br><span class="line">            result(response.destinationURL!)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fail(response.error?.localizedDescription ?? <span class="string">"Error"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 文件上传</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 上传文件时注意文件名与 mimeType</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 上传地址</span></span><br><span class="line"><span class="comment">///   - param: 上传参数</span></span><br><span class="line"><span class="comment">///   - filesData: 上传数据数组 data 类型</span></span><br><span class="line"><span class="comment">///   - progress: 上传进度</span></span><br><span class="line"><span class="comment">///   - result: 成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_uploadFile</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> param:ayParams? = <span class="literal">nil</span>,filesData: [Data], progress:@escaping <span class="params">(Progress)</span></span></span>-&gt;<span class="type">Void</span>, result: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="type">Alamofire</span>.upload(multipartFormData: &#123; (formData) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">for</span> data:<span class="type">Data</span> <span class="keyword">in</span> filesData &#123;</span><br><span class="line">            formData.append(data, withName: <span class="string">"file"</span>, fileName: <span class="string">"fileName.png"</span>, mimeType: <span class="string">"image/png"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> param != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (key , value) <span class="keyword">in</span> param! &#123;</span><br><span class="line">                formData.append(value.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!, withName: key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, to: urlStr) &#123; (encodingResult) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> encodingResult&#123;</span><br><span class="line">        <span class="keyword">case</span> .success(request: <span class="keyword">let</span> upload,<span class="number">_</span>,<span class="number">_</span>):</span><br><span class="line">            upload.uploadProgress(closure: &#123; (progres) <span class="keyword">in</span></span><br><span class="line">                progress(progres)</span><br><span class="line">            &#125;)</span><br><span class="line">            upload.responseJSON(completionHandler: &#123; (response) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> value = response.result.value <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">AnyObject</span>]&#123;</span><br><span class="line">                    result(value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            fail(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="系统网络请求"><a href="#系统网络请求" class="headerlink" title="系统网络请求"></a>系统网络请求</h1><blockquote><h2 id="post-请求-1"><a href="#post-请求-1" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// post 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 返回结果</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">post</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">params</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">    request.timeoutInterval = <span class="type">NetworkConfig</span>.timeoutInterval</span><br><span class="line">    request.httpMethod = <span class="string">"POST"</span></span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="type">String</span>()</span><br><span class="line">    <span class="keyword">for</span> (key , value) <span class="keyword">in</span> params &#123;</span><br><span class="line">        paramStr.append(<span class="string">"<span class="subst">\(key)</span>=<span class="subst">\(value)</span>&amp;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    paramStr.remove(at: paramStr.index(before: paramStr.endIndex))</span><br><span class="line">    request.httpBody = paramStr.data(using: .utf8)</span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .mutableContainers) &#123;</span><br><span class="line">                result(value)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result (<span class="type">String</span>.<span class="keyword">init</span>(data: data!, encoding: .utf8)!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get-请求-1"><a href="#get-请求-1" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// get 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 返回结果</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">get</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">params</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="type">String</span>()</span><br><span class="line">    <span class="keyword">for</span> (key , value) <span class="keyword">in</span> params &#123;</span><br><span class="line">        paramStr.append(<span class="string">"<span class="subst">\(key)</span>=<span class="subst">\(value)</span>&amp;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    paramStr.remove(at: paramStr.index(before: paramStr.endIndex))</span><br><span class="line">    <span class="keyword">var</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: <span class="type">URL</span>(string: urlStr + <span class="string">"?"</span> + paramStr)!)</span><br><span class="line">    request.timeoutInterval = <span class="type">NetworkConfig</span>.timeoutInterval</span><br><span class="line">    request.httpMethod = <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .mutableContainers) &#123;</span><br><span class="line">                result(value)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result (<span class="type">String</span>.<span class="keyword">init</span>(data: data!, encoding: .utf8)!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 文件下载</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 下载地址</span></span><br><span class="line"><span class="comment">///   - fileName: 文件名</span></span><br><span class="line"><span class="comment">///   - result: 文件缓存路径</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">download</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">fileName</span>: <span class="title">String</span>, <span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">String</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.downloadTask(with: request) &#123; (pathUrl, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> filePath: <span class="type">String</span> = pathUrl?.path &#123;</span><br><span class="line">                <span class="keyword">let</span> fileManager = <span class="type">FileManager</span>()</span><br><span class="line">                <span class="keyword">try</span>! fileManager.moveItem(atPath: filePath, toPath: <span class="type">NetworkConfig</span>.downloadPath.appending(fileName))</span><br><span class="line">                <span class="keyword">try</span>! fileManager.removeItem(atPath: filePath)</span><br><span class="line">                result(<span class="type">NetworkConfig</span>.downloadPath.appending(fileName))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="仿-form-表单多文件上传"><a href="#仿-form-表单多文件上传" class="headerlink" title="仿 form 表单多文件上传"></a>仿 form 表单多文件上传</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 仿 form 表单多文件上传</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 上传文件路径</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - filesData: 文件数据</span></span><br><span class="line"><span class="comment">///   - fileName: 文件名</span></span><br><span class="line"><span class="comment">///   - fileExtensions: 文件扩展名</span></span><br><span class="line"><span class="comment">///   - contentType: 文件类型</span></span><br><span class="line"><span class="comment">///   - result: 返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">upload</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">params</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">filesData</span>: [<span class="title">Data</span>], <span class="title">fileName</span>: <span class="title">String</span>, <span class="title">fileExtensions</span>:<span class="title">String</span>, <span class="title">contentType</span>: <span class="title">String</span>,<span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> boundary = <span class="string">"*****"</span> <span class="comment">// 分界标识</span></span><br><span class="line">    <span class="keyword">var</span> bodyData = <span class="type">Data</span>()</span><br><span class="line">    <span class="comment">// 添加普通参数</span></span><br><span class="line">    <span class="keyword">for</span> (key , value) <span class="keyword">in</span> params &#123;</span><br><span class="line">        bodyData.append(<span class="string">"\r\n--<span class="subst">\(boundary)</span>\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Disposition:form-data;name=\"<span class="subst">\(key)</span>\"\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Type:text/plain;charset=utf-8\r\n\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"<span class="subst">\(value)</span>"</span>.data(using: .utf8)!)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加文件数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; filesData.<span class="built_in">count</span> &#123;</span><br><span class="line">        bodyData.append(<span class="string">"\r\n--<span class="subst">\(boundary)</span>\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Disposition:form-data; name=\"file\";filename=<span class="subst">\(fileName)</span>-<span class="subst">\(i)</span>.<span class="subst">\(fileExtensions)</span>\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Type: <span class="subst">\(contentType)</span>\r\n\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(filesData[i])</span><br><span class="line">    &#125;</span><br><span class="line">    bodyData.append(<span class="string">"\r\n--<span class="subst">\(boundary)</span>--\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">    <span class="comment">// 设置 request</span></span><br><span class="line">    <span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">    request.addValue(<span class="string">"multipart/form-data;boundary=\"<span class="subst">\(boundary)</span>\";charset=\"UTF-8\""</span>, forHTTPHeaderField: <span class="string">"Content-Type"</span>)</span><br><span class="line">    request.addValue(<span class="string">"<span class="subst">\(bodyData.<span class="built_in">count</span>)</span>"</span>, forHTTPHeaderField: <span class="string">"Content-Length"</span>)</span><br><span class="line">    request.httpMethod = <span class="string">"POST"</span></span><br><span class="line">    request.httpBody = bodyData</span><br><span class="line">    request.timeoutInterval = <span class="type">NetworkConfig</span>.timeoutInterval</span><br><span class="line">    <span class="comment">// 发起请求</span></span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .mutableContainers) &#123;</span><br><span class="line">                result(value)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result (<span class="type">String</span>.<span class="keyword">init</span>(data: data!, encoding: .utf8)!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="添加网络数据缓存类"><a href="#添加网络数据缓存类" class="headerlink" title="添加网络数据缓存类"></a>添加网络数据缓存类</h1><blockquote><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul><li>网络请求缓存处理</li><li>将网络请求结果保存在本地，发起网路请求时先检测缓存区是否有缓存数据并判断是否超出缓存有效时间，如果数据有效则加载缓存区数据，否则加载网络数据.</li><li>数据缓存采用 SQLite 存储，采用 FMDB 库.</li><li>缓存数据表表数据有 key,value,date 三个字段. key: 网络请求参数 MD5加密数据. value:网络请求数据. date: 数据有效时间</li><li>添加计时器,定时清除无效数据.</li></ul><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter key: 键值</span></span><br><span class="line"><span class="comment">/// - Returns: 数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt; <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - key: 键值</span></span><br><span class="line"><span class="comment">///   - result: 请求数据</span></span><br><span class="line"><span class="comment">///   - date: 有效时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addResult</span><span class="params">(<span class="number">_</span> key: String, result: String, date: TimeInterval)</span></span> -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 移除失效数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter date: 时间点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeResult</span><span class="params">(withOldDate date: TimeInterval)</span></span> -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 根据 key 移除数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter key: 键值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeResult</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure></blockquote><p><a href="https://github.com/AndyCuiYTT/AYNetwork_Swift" target="_blank" rel="noopener">具体实现参考 Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 Alamofire与系统的网络请求进行简易封装&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
    
      <category term="network" scheme="http://andycui.top/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>支付宝微信简单封装</title>
    <link href="http://andycui.top/2017/07/14/PayDemo/"/>
    <id>http://andycui.top/2017/07/14/PayDemo/</id>
    <published>2017-07-14T10:57:25.000Z</published>
    <updated>2018-09-06T03:47:59.745Z</updated>
    
    <content type="html"><![CDATA[<p>封装支付宝与微信支付,采用代理的方式接收支付结果.<br><a id="more"></a></p><h1 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h1><blockquote><h2 id="调起支付"><a href="#调起支付" class="headerlink" title="调起支付"></a>调起支付</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 调起支付宝支付</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - orderinfo: 商品信息字符串</span></span><br><span class="line"><span class="comment">///   - signedString: 商户信息签名</span></span><br><span class="line"><span class="comment">///   - fromScheme: 应用注册scheme</span></span><br><span class="line"><span class="comment">///   - resultDic: 支付结果回调</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">(<span class="number">_</span> orderinfo: String, signedString: String, fromScheme: String)</span></span> -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure><h2 id="支付结果回调-遵守-AlipayDelegate-协议"><a href="#支付结果回调-遵守-AlipayDelegate-协议" class="headerlink" title="支付结果回调,遵守 AlipayDelegate 协议"></a>支付结果回调,遵守 AlipayDelegate 协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 支付成功</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipaySuccess</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付失败</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipayFail</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付取消</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipayCancel</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 其他未知错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipayUnknownError</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br></pre></td></tr></table></figure></blockquote><h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><blockquote><h2 id="调起支付-1"><a href="#调起支付-1" class="headerlink" title="调起支付"></a>调起支付</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 微信支付</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter orderInfo: 支付信息(包含:partnerId,prepayId,package,nonceStr,timeStamp,sign等信息)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">(<span class="number">_</span> orderInfo: [String : String])</span></span> -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure><h2 id="微信支付-item"><a href="#微信支付-item" class="headerlink" title="微信支付 item"></a>微信支付 item</h2><blockquote><ul><li>appid: 应用ID(微信开放平台审核通过的应用APPID)</li><li>partnerid: 商户号(微信支付分配的商户号)</li><li>prepayid: 预支付交易会话ID(微信返回的支付交易会话ID)</li><li>package: 扩展字段(只读)</li><li>noncestr： 随机字符串（只读）</li><li>timestamp： 时间撮（只读）</li><li>getSignDic()： 获取签名后的字典</li></ul></blockquote><h2 id="数据签名-获取签名字符串"><a href="#数据签名-获取签名字符串" class="headerlink" title="数据签名(获取签名字符串)"></a>数据签名(获取签名字符串)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取签名字符串(MD5 签名)</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - orderInfo: 支付信息</span></span><br><span class="line"><span class="comment">///   - keyStr: API密钥</span></span><br><span class="line"><span class="comment">/// - Returns: 签名字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSignStr</span><span class="params">(<span class="number">_</span> orderInfo: [String : String] ,keyStr: String)</span></span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure><h2 id="支付结果回调-遵守-WeChatPayDelegate-协议"><a href="#支付结果回调-遵守-WeChatPayDelegate-协议" class="headerlink" title="支付结果回调,遵守 WeChatPayDelegate 协议"></a>支付结果回调,遵守 WeChatPayDelegate 协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 微信未安装</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPayWXAppUninstall</span><span class="params">()</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付成功</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPaySuccess</span><span class="params">()</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付失败</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPayFail</span><span class="params">(errStr: String)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付取消</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPayCancel</span><span class="params">()</span></span> -&gt; <span class="type">Void</span>;</span><br></pre></td></tr></table></figure></blockquote><p><a href="https://github.com/AndyCuiYTT/PayDemo" target="_blank" rel="noopener">具体实现参考 Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;封装支付宝与微信支付,采用代理的方式接收支付结果.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="三方接入" scheme="http://andycui.top/categories/iOS/%E4%B8%89%E6%96%B9%E6%8E%A5%E5%85%A5/"/>
    
    
      <category term="pay" scheme="http://andycui.top/tags/pay/"/>
    
      <category term="alipay" scheme="http://andycui.top/tags/alipay/"/>
    
      <category term="wechatpay" scheme="http://andycui.top/tags/wechatpay/"/>
    
  </entry>
  
  <entry>
    <title>[swift] 星级评分</title>
    <link href="http://andycui.top/2017/07/13/swift-%E6%98%9F%E7%BA%A7%E8%AF%84%E5%88%86/"/>
    <id>http://andycui.top/2017/07/13/swift-星级评分/</id>
    <published>2017-07-13T03:39:29.000Z</published>
    <updated>2018-09-06T03:47:59.994Z</updated>
    
    <content type="html"><![CDATA[<p>许多App都会有评价功能，这个时候或许会需要实现星级评分，下面我们来简单的实现一个星级评分功能。<br><a id="more"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>通过添加图片形式实现星级打分功能.创建两个视图,其中一个添加灰色星星图片,另一个添加橘色星星图片.橘色星星视图覆盖灰色星星视图,通过修改橘色星星视图的宽度实现评分的展现.</p><ol><li>创建一个继承于 UIView 的类,作为星级打分的显示视图</li><li>创建灰色星星视图,并添加到父视图.</li><li>创建橘色星星视图,添加到父视图,保证橘色视图覆盖灰色星星视图.</li><li>通过修改橘色星星视图宽度实现评分.</li><li>可通过手势等方式实现打分功能.</li></ol></blockquote><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><h3 id="创建子视图代码"><a href="#创建子视图代码" class="headerlink" title="创建子视图代码:"></a>创建子视图代码:</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_creatStartView</span><span class="params">(<span class="number">_</span> imageName: String)</span></span> -&gt; <span class="type">UIView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> starView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="keyword">self</span>.frame.width, height: <span class="keyword">self</span>.frame.height))</span><br><span class="line">        starView.clipsToBounds = <span class="literal">true</span></span><br><span class="line">        starView.backgroundColor = <span class="type">UIColor</span>.clear</span><br><span class="line">        starView.isUserInteractionEnabled = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> imgViewWidth = (<span class="keyword">self</span>.frame.width - <span class="type">CGFloat</span>(totalStarNumber - <span class="number">1</span>) * <span class="number">3</span>) / <span class="type">CGFloat</span>(totalStarNumber)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; totalStarNumber &#123;</span><br><span class="line">            <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(named: imageName))</span><br><span class="line">            imageView.frame = <span class="type">CGRect</span>(x: <span class="type">CGFloat</span>(i) * (imgViewWidth + <span class="number">3</span>), y: <span class="number">0</span>, width: imgViewWidth, height: <span class="keyword">self</span>.frame.height)</span><br><span class="line">            imageView.contentMode = .scaleAspectFit</span><br><span class="line">            starView.addSubview(imageView)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> starView</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="手指滑动打分代码"><a href="#手指滑动打分代码" class="headerlink" title="手指滑动打分代码"></a>手指滑动打分代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesMoved</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">       <span class="keyword">let</span> touch = touches.first</span><br><span class="line">       <span class="keyword">let</span> point = touch?.location(<span class="keyword">in</span>: <span class="keyword">self</span>)</span><br><span class="line">       <span class="keyword">if</span> (point?.x)! &gt;= <span class="type">CGFloat</span>(<span class="number">0</span>) &amp;&amp; (point?.x)! &lt;= <span class="keyword">self</span>.frame.width &#123;</span><br><span class="line">           rate = (point?.x)! / <span class="keyword">self</span>.frame.width</span><br><span class="line">           delegate?.ay_starRateChange(rate: rate)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">       <span class="keyword">let</span> touch = touches.first</span><br><span class="line">       <span class="keyword">let</span> point = touch?.location(<span class="keyword">in</span>: <span class="keyword">self</span>)</span><br><span class="line">       rate = (point?.x)! / <span class="keyword">self</span>.frame.width</span><br><span class="line">       delegate?.ay_starRateChange(rate: rate)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/AndyCuiYTT/StarRating" target="_blank" rel="noopener">具体实现参考Demo</a></p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>星级评分通过图片实现是最简单的办法,当然也可以通过其他方式实现.例如通过 UIBezierPath 绘制,具体可参考<a href="https://git.oschina.net/soyeon/CPSliderView" target="_blank" rel="noopener">CPSliderView</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多App都会有评价功能，这个时候或许会需要实现星级评分，下面我们来简单的实现一个星级评分功能。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="自定义视图" scheme="http://andycui.top/categories/iOS/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="自定义视图" scheme="http://andycui.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>通过 UIBezierPath 与 CAShapeLayer 为 UIView 添加边框</title>
    <link href="http://andycui.top/2017/07/12/swift%20%E9%80%9A%E8%BF%87-CGMutablePath-%E4%B8%BA-UIView-%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86/"/>
    <id>http://andycui.top/2017/07/12/swift 通过-CGMutablePath-为-UIView-添加边框/</id>
    <published>2017-07-12T06:44:15.000Z</published>
    <updated>2018-09-06T03:48:00.020Z</updated>
    
    <content type="html"><![CDATA[<p> 通过贝塞尔曲线与 CAShapeLayer 为 View 添加虚线边框,可设置宽度,颜色,圆角等<br><a id="more"></a></p><p><img src="17-7-12.png" alt="效果图"></p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h2> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 为视图添加虚线边框</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameters:</span></span><br><span class="line">  <span class="comment">///   - view: 要添加边框的视图</span></span><br><span class="line">  <span class="comment">///   - size: 视图 size</span></span><br><span class="line">  <span class="comment">///   - cornerRadius: 视图圆角 默认:10</span></span><br><span class="line">  <span class="comment">///   - lineWidth: 边框宽 默认: 1</span></span><br><span class="line">  <span class="comment">///   - lineColor: 边框颜色 默认: black</span></span><br><span class="line">  <span class="comment">///   - lineDashPattern: 边框段长和间距 默认: [5,3]</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">addBorderLine</span><span class="params">(view:UIView, size:CGSize, cornerRadius:CGFloat = <span class="number">10</span>, lineWidth:CGFloat = <span class="number">1</span>, lineColor:Color? = Color.black, lineDashPattern: [NSNumber] = [<span class="number">5</span>,<span class="number">3</span>])</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> shaplayer = <span class="type">CAShapeLayer</span>()</span><br><span class="line">      shaplayer.bounds = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size.width, height: size.height)</span><br><span class="line">      shaplayer.anchorPoint = <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line">      shaplayer.fillColor = <span class="type">Color</span>.clear.cgColor</span><br><span class="line">      shaplayer.strokeColor = lineColor?.cgColor</span><br><span class="line">      shaplayer.lineWidth = lineWidth</span><br><span class="line">      shaplayer.lineJoin = <span class="string">"miter"</span></span><br><span class="line">      shaplayer.lineDashPattern = [<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">      <span class="keyword">let</span> path = <span class="type">CGMutablePath</span>()</span><br><span class="line">      path.move(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: cornerRadius + lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: .pi, endAngle: .pi / <span class="number">2</span> * <span class="number">3</span>, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - cornerRadius - lineWidth / <span class="number">2</span>, y: lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - cornerRadius - lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: .pi / <span class="number">2</span> * <span class="number">3</span>, endAngle: .pi * <span class="number">2</span>, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - lineWidth / <span class="number">2</span>, y: size.height - cornerRadius - lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - cornerRadius - lineWidth / <span class="number">2</span>, y:  size.height - cornerRadius - lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: <span class="number">0</span>, endAngle: .pi / <span class="number">2</span>, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: cornerRadius + lineWidth / <span class="number">2</span>, y: size.height - lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: cornerRadius + lineWidth / <span class="number">2</span>, y:  size.height - cornerRadius - lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: .pi / <span class="number">2</span>, endAngle: .pi, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>))</span><br><span class="line">      shaplayer.path = path</span><br><span class="line">      view.layer.addSublayer(shaplayer)</span><br><span class="line">      view.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">      view.layer.cornerRadius = cornerRadius</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 通过贝塞尔曲线与 CAShapeLayer 为 View 添加虚线边框,可设置宽度,颜色,圆角等&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="绘图" scheme="http://andycui.top/categories/iOS/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="UIBezierPath" scheme="http://andycui.top/tags/UIBezierPath/"/>
    
      <category term="CAShapeLayer" scheme="http://andycui.top/tags/CAShapeLayer/"/>
    
  </entry>
  
  <entry>
    <title>iOS 调用系统自带导航功能实现</title>
    <link href="http://andycui.top/2017/06/18/iOS%20%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E5%AF%BC%E8%88%AA%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://andycui.top/2017/06/18/iOS 调用系统自带导航功能实现/</id>
    <published>2017-06-18T07:46:22.000Z</published>
    <updated>2018-10-18T08:42:46.689Z</updated>
    
    <content type="html"><![CDATA[<p>使用系统导航需要用到 MapKit 框架.通过调用 ‘MKMapItem.openMaps(with: [items], launchOptions: [options])’ 方法调起系统地图的导航功能.items 是一个数组,标记要经过的地方坐标 MKMapItem 类型,options 参数设置.<br>具体使用如下:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> startItem = <span class="type">MKMapItem</span>(placemark: <span class="type">MKPlacemark</span>(coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">36.7233600000</span>, longitude: <span class="number">116.9919300000</span>), addressDictionary: <span class="literal">nil</span>))</span><br><span class="line">startItem.name = <span class="string">"济南百里黄河风景区"</span> <span class="comment">// 地址名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> endItem = <span class="type">MKMapItem</span>(placemark: <span class="type">MKPlacemark</span>(coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">36.6709560000</span>, longitude: <span class="number">116.9908110000</span>), addressDictionary: <span class="literal">nil</span>))</span><br><span class="line">endItem.name = <span class="string">"济南站"</span> <span class="comment">// 地址名</span></span><br><span class="line">endItem.phoneNumber = <span class="string">"0531-82422002"</span> <span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  key: MKLaunchOptionsDirectionsModeKey 导航模式</span></span><br><span class="line"><span class="comment">*       MKLaunchOptionsDirectionsModeDriving 汽车</span></span><br><span class="line"><span class="comment">*       MKLaunchOptionsDirectionsModeWalking 步行</span></span><br><span class="line"><span class="comment">*       MKLaunchOptionsDirectionsModeTransit 公交</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  key: MKLaunchOptionsMapTypeKey 地图类型</span></span><br><span class="line"><span class="comment">*       MKMapType 类型</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  key: MKLaunchOptionsShowsTrafficKey 是否显示详情按钮</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> options = [<span class="type">MKLaunchOptionsDirectionsModeKey</span>: <span class="type">MKLaunchOptionsDirectionsModeDriving</span>, <span class="type">MKLaunchOptionsShowsTrafficKey</span>: <span class="type">NSNumber</span>(booleanLiteral: <span class="literal">true</span>), <span class="type">MKLaunchOptionsMapTypeKey</span>: <span class="type">MKMapType</span>.hybrid.rawValue] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>]</span><br><span class="line"></span><br><span class="line"><span class="type">MKMapItem</span>.openMaps(with: [startItem, endItem], launchOptions: options)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      项目中需要用到导航功能,接收前人项目引用的高德地图,原本简单的项目因为引入高德导航使得包变大,决定使用系统自带的地图导航功能替代原有的导航.
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="地图" scheme="http://andycui.top/categories/iOS/%E5%9C%B0%E5%9B%BE/"/>
    
    
      <category term="地图" scheme="http://andycui.top/tags/%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>常阅读的博客</title>
    <link href="http://andycui.top/2017/05/20/%E5%B8%B8%E9%98%85%E8%AF%BB%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://andycui.top/2017/05/20/常阅读的博客/</id>
    <published>2017-05-20T08:55:18.000Z</published>
    <updated>2018-09-06T03:48:00.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我要申明，排名不分前后</p></blockquote><h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><p><a href="https://objccn.io/" target="_blank" rel="noopener">ObjC 中国</a></p><p><a href="http://blog.cnbang.net/" target="_blank" rel="noopener">bang’s blog</a></p><a id="more"></a><p><a href="http://blog.devtang.com/" target="_blank" rel="noopener">唐巧的技术博客</a></p><p><a href="http://limboy.me/" target="_blank" rel="noopener">蘑菇街李忠</a></p><p><a href="http://blog.leichunfeng.com/" target="_blank" rel="noopener">雷纯锋的技术博客</a></p><p><a href="http://sergiochan.xyz/archives/" target="_blank" rel="noopener">Sergio Chan</a></p><p><a href="http://zhoulingyu.com" target="_blank" rel="noopener">自己的博客</a></p><p><a href="http://casatwy.com/" target="_blank" rel="noopener">casa 的博客</a></p><p><a href="http://www.jianshu.com/u/12201cdd5d7a" target="_blank" rel="noopener">冰霜的博客</a></p><p><a href="http://www.jianshu.com/u/pBfFKp" target="_blank" rel="noopener">串神的博客</a></p><p><a href="http://www.jianshu.com/u/cc1e4faec5f7" target="_blank" rel="noopener">南栀的博客</a></p><p><a href="http://www.jianshu.com/u/88a056103c02" target="_blank" rel="noopener">卓同学的博客</a></p><p><a href="http://www.jianshu.com/u/16ae66cdf6a0" target="_blank" rel="noopener">判若两人丶的博客</a></p><p><a href="http://draveness.me/" target="_blank" rel="noopener">draveness 的博客</a></p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p><a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a></p><p><a href="http://pandara.xyz/" target="_blank" rel="noopener">pandar’s blog</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我要申明，排名不分前后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;iOS&quot;&gt;&lt;a href=&quot;#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://objccn.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ObjC 中国&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbang.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bang’s blog&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
      <category term="阅读列表" scheme="http://andycui.top/categories/Other/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    
    
      <category term="Other" scheme="http://andycui.top/tags/Other/"/>
    
      <category term="Blog" scheme="http://andycui.top/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>简易音乐播放器制作</title>
    <link href="http://andycui.top/2016/04/20/iOS%20%E7%AE%80%E6%98%93%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%88%B6%E4%BD%9C/"/>
    <id>http://andycui.top/2016/04/20/iOS 简易音乐播放器制作/</id>
    <published>2016-04-20T14:02:31.000Z</published>
    <updated>2018-10-18T09:13:48.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><pre><code>1.功能:音乐列表,播放,暂停,上一曲,下一曲,进度条(显示进度时间,控制进度),随机播放,单曲循环,顺序播放,歌词显示等2.使用框架:AVFoundation3.知识点:AVPlayer 使用,pch 文件使用,封装思想,MVC模式,storyBoard的使用,消息发送机制,观察者,block回调,nstimer,nsrunloop,空间约束,第三方使用等  </code></pre><h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="一-使用-storyBoard-布局"><a href="#一-使用-storyBoard-布局" class="headerlink" title="一.使用 storyBoard 布局"></a>一.使用 storyBoard 布局</h4><pre><code>1.歌曲列表界面:使用 TableViewController ,创建相应的 viewController , 继承于 UITableViewController ,与 storyBoard 控件相关联,实现相应方法2.播放页面:添加相应控件,添加约束条件 , 创建相应的 viewController , 继承于 UIViewController ,与 storyBoard 控件相关联,实现相应方法  难点:播放图片与歌词页面     a.添加一个 ScrollView ,设置适当高度,宽度等于屏幕宽      b. 在ScrollView 添加一个 View ,与 Scroll 等高,宽度是 ScrollView 的两倍,距 ScrollView 上下左为零,      c. 在 View 视图添加一个两个 UIView(播放和歌词页面) 子视图,播放页面距 view 上下左都为 0 ,宽度为屏幕宽,歌词页面距 view 页面上下右 都为 0,宽度为屏幕宽.在播放页面添加 imageView 作为播放图片显示,在歌词页面添加 tableView 作为歌词显示.  </code></pre><h4 id="二-获取歌曲信息"><a href="#二-获取歌曲信息" class="headerlink" title="二.获取歌曲信息"></a>二.获取歌曲信息</h4><pre><code>服务器端数据信息不规范,是 plist 文件,可以直接获取 array 形式.</code></pre><h4 id="三-对获取信息进行解析"><a href="#三-对获取信息进行解析" class="headerlink" title="三.对获取信息进行解析"></a>三.对获取信息进行解析</h4><pre><code>1.建立 Model ,在网络获取到的歌词是 NSString 类型,需要对其进行处理,转化为两个数组,一个存放歌词时间信息,一个存放歌词内容.使用到 NSString 的 componentsSeparatedByString 方法,把字符串根据某个字符切割转化为数据2.把获取到的数据数组转化为 Model 数据</code></pre><h4 id="四-封装播放控制类"><a href="#四-封装播放控制类" class="headerlink" title="四.封装播放控制类"></a>四.封装播放控制类</h4><pre><code>1.使用单例:由于播放器在一个程序中只能有一个,如果过多会出现声音杂乱的情况.2.应用 block :添加 bloak ,使得可以在 ViewController 可以通过回调控制视图.3.添加监听:用来监听音乐的播放完成和音乐加载完成,实现其相应的操作. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playToEnd) name:AVPlayerItemDidPlayToEndTimeNotification object:nil];//监听音乐播放完成</span><br><span class="line">[playItem addObserver:self forKeyPath:@&quot;status&quot; options:NSKeyValueObservingOptionNew context:nil];//监听音乐加载完成</span><br></pre></td></tr></table></figure>4.应用NStimer , NSRunloop ,实现对播放的时时控制:使用回调控制 图片旋转,进度条,歌词滚动.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(playTimer) userInfo:nil repeats:YES];//将定时器加入 runloop 中 </span><br><span class="line">[[NSRunLoop mainRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];  </span><br><span class="line">[self.timer fire];</span><br></pre></td></tr></table></figure>5.AVPlayer 知识点:     a. AVPlayer 需要创建 AVPlayerItem ,数据的加载监听是对他的 status 属性德监听      b. 计算当前播放了多少秒 CGFloat timer = _avPlayer.currentTime.value / _avPlayer.currentTime.timescale;     c. 获取歌曲总时长: _sumTime = self.avPlayer.currentItem.duration.value / self.avPlayer.currentItem.duration.timescale;     d. 设置特定得时间播放点 self.avPlayer seekToTime:CMTimeMakeWithSeconds(timer * _sumTime, self.avPlayer.currentTime.timescale) completionHandler:^(BOOL finished) {}]; </code></pre><h4 id="五-对界面处理"><a href="#五-对界面处理" class="headerlink" title="五.对界面处理"></a>五.对界面处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">难点:对歌词的处理 [self.lyricTableView selectRowAtIndexPath:[self lyricTableViewTime:timer] animated:YES scrollPosition:UITableViewScrollPositionMiddle];</span><br><span class="line">计算 IndexPath 方法:</span><br><span class="line">- (NSIndexPath*)lyricTableViewTime:(CGFloat)time&#123;</span><br><span class="line">    for (int i = 0 ; i &lt; model.timerArray.count ; i++)&#123;</span><br><span class="line">        CGFloat timeArray = [model.timerArray[i] AG_StringToTime];</span><br><span class="line">　　　　　if (time &lt; timeArray)&#123;</span><br><span class="line">　　　　　   return [NSIndexPath indexPathForItem:(i - 1 &gt; 0 ? i - 1 : 0) inSection:0];</span><br><span class="line">　　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　return [NSIndexPath indexPathForItem:model.timerArray.count - 1 inSection:0];</span><br><span class="line">&#125;</span><br><span class="line">　　　　　　　　　　　　　　　　 　　　　  　　　　 　　  　　</span><br><span class="line">使 cell 透明 : cell.backgroundColor = [UIColor clearColor];</span><br><span class="line">改变 cell 选中时的背景 : cell.selectedBackgroundView = view;</span><br></pre></td></tr></table></figure><p><a href="MusicTestOne.zip">参考代码</a></p>]]></content>
    
    <summary type="html">
    
      为了熟悉 iOS 开发制作的这个建议播放器,实现了音乐播放基本功能.
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="音视频" scheme="http://andycui.top/categories/iOS/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="音视频" scheme="http://andycui.top/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
</feed>
