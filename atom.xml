<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AndyCuiの博客</title>
  <subtitle>既然认准了一条路，就不要去打听要走多久。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andycui.top/"/>
  <updated>2018-05-30T04:39:55.964Z</updated>
  <id>http://andycui.top/</id>
  
  <author>
    <name>Andy</name>
    <email>AndyCuiYTT@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现 cell 加载网络图片自适应方案</title>
    <link href="http://andycui.top/2018/05/23/%E5%AE%9E%E7%8E%B0cell%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/"/>
    <id>http://andycui.top/2018/05/23/实现cell图片自适应方案/</id>
    <published>2018-05-23T06:57:56.000Z</published>
    <updated>2018-05-30T04:39:55.964Z</updated>
    
    <content type="html"><![CDATA[<p>UITableView 是 iOS 开发中最常用的控件之一,使用 UITaleView 时最头疼的莫过于 cell 高度的计算,虽说在 iOS8.0 以后引入了自适应方法,但在适配过程中任然会遇到各种难题,尤其是为了满足产品需求进行复杂 cell 自定义时,高度计算可谓是难上加难.这里主要对开发中遇到的自定义 cell 是加载网络图片适配问题进行总结.<br><a id="more"></a></p>
<p>在开发中为了用户能有更好体验,对网络请求多采用异步请求的方式,更有甚者对请求数据做了本地缓存.图片作为 app 中最常见的展现形式无疑是最耗流量的,对图片的处理直接影响到用户的体验,好在有大神为我们提供了好的框架(<a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="noopener">Kingfisher</a>,<a href="https://github.com/rs/SDWebImage" target="_blank" rel="noopener">SDWebImage</a>),大大提高了我们的开发效率.</p>
<p>图片的异步加载提高了用户体验,却在开发中遇到了新的难题,因为图片异步加载你无法提前预知图片的尺寸,在布局时难以控制 UIImageView 的大小,如果将 UIImageView 固定大小势必会造成图片的压缩或拉伸,现在主要针对于自定义 cell 时对图片自适应布局提一些建议.</p>
<h3 id="固定-UIImageView-大小"><a href="#固定-UIImageView-大小" class="headerlink" title="固定 UIImageView 大小"></a>固定 UIImageView 大小</h3><p>在开发中我们时常会将 UIImageView 固定大小或者固定宽高比例,通过设置 ImageView 的 contentMode 属性设置图片的显示风格.<br>该方法简单容易造成图片压缩拉伸或显示不全问题.<br>contentMode 取值:  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIViewContentMode</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> scaleToFill <span class="comment">//缩放内容到合适比例大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> scaleAspectFit <span class="comment">//缩放内容到合适的大小，边界多余部分透明</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> scaleAspectFill  <span class="comment">//缩放内容填充到指定大小，边界多余的部分省略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> redraw <span class="comment">//重绘视图边界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> center <span class="comment">//视图保持等比缩放,居中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> top <span class="comment">//视图顶部对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> bottom <span class="comment">//视图底部对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span> <span class="comment">//视图左侧对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span> <span class="comment">//视图右侧对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> topLeft <span class="comment">//视图左上角对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> topRight <span class="comment">//视图右上角对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> bottomLeft <span class="comment">//视图左下角对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> bottomRight <span class="comment">//视图右下角对齐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过获取服务器存储的图片尺寸布局"><a href="#通过获取服务器存储的图片尺寸布局" class="headerlink" title="通过获取服务器存储的图片尺寸布局"></a>通过获取服务器存储的图片尺寸布局</h3><p>在上传图片时可以将图片的大小一起上传服务器保存,在用户加载图片时将图片信息和图片 URL 地址一起返回,根据返回的图片信息计算 UIImageView 的 size 进行布局.<br>该方法比较简单,但需要后台配合使用.</p>
<h3 id="通过监听图片加载刷新-cell-实现-配合-cell-自适应"><a href="#通过监听图片加载刷新-cell-实现-配合-cell-自适应" class="headerlink" title="通过监听图片加载刷新 cell 实现(配合 cell 自适应)"></a>通过监听图片加载刷新 cell 实现(配合 cell 自适应)</h3><p>无论 SDWebiamge 还是 Kingfisher,作者都给我们提供了图片加载完回调方法,我们可以在图片加载完后重新计算 cell 高度.<br>该方法大大加大了 cell 的刷新频率.<br>具体步骤:  </p>
<ul>
<li>在自定义 cell 中定义闭包变量.<br><code>var refreshCell: ((IndexPath) -&gt; Void)?</code></li>
<li><p>在图片加载完成的回调中调用闭包,为了减少 cell 的刷新,判断是拉取网络数据还是加载的缓存数据,如果是网络数据调整图片大小并将调整后图片覆盖网络加载图片,如果是缓存图片不处理.  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iconImageView.kf.setImage(with: <span class="type">URL</span>(string: iconImageURL), placeholder: <span class="type">UIImage</span>(named: <span class="string">"tmp"</span>)) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>](image, error, type, url) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> type == .<span class="keyword">none</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>?.iconImageView.image =  <span class="keyword">self</span>?.iconImageView.image?.ytt.resetImageSizeWithWidth(<span class="type">UIScreen</span>.main.bounds.width)</span><br><span class="line">        <span class="type">ImageCache</span>.<span class="keyword">default</span>.store((image?.ytt.resetImageSizeWithWidth(<span class="type">UIScreen</span>.main.bounds.width))!, forKey: (url?.absoluteString)!)</span><br><span class="line">        <span class="keyword">self</span>?.refreshCell?(indexPath)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 TableView 回调方法中实现闭包,仅当 cell 展现在屏幕时刷新</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cell.refreshCell = &#123;(index) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> (tableView.indexPathsForVisibleRows?.<span class="built_in">contains</span>(index))! &#123;</span><br><span class="line">        tableView.reloadRows(at: [index], with: .automatic)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="通过-ImageIO-框架获取图片信息"><a href="#通过-ImageIO-框架获取图片信息" class="headerlink" title="通过 ImageIO 框架获取图片信息"></a>通过 ImageIO 框架获取图片信息</h3><p>在给 UIImageView 赋值时通过 ImageIO 获取 image 的尺寸,修改 UIImageView 的大小.<br>该方法需要在网络请求数据,加大了数据请求量.<br>实现代码:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageSource = <span class="type">CGImageSourceCreateWithURL</span>(<span class="type">URL</span>(string: iconImageURL)! <span class="keyword">as</span> <span class="type">CFURL</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = <span class="type">CGImageSourceCopyPropertiesAtIndex</span>(imageSource!, <span class="number">0</span>, <span class="literal">nil</span>) <span class="keyword">as</span>? <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> width = result[<span class="string">"PixelWidth"</span>] <span class="keyword">as</span>? <span class="type">CGFloat</span>, <span class="keyword">let</span> height = result[<span class="string">"PixelHeight"</span>] <span class="keyword">as</span>? <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> h =  (<span class="type">UIScreen</span>.main.bounds.width - <span class="number">20</span>) / (width / height)</span><br><span class="line">        iconImageView.snp.remakeConstraints &#123; (make) <span class="keyword">in</span></span><br><span class="line">            make.height.equalTo(h)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UITableView 是 iOS 开发中最常用的控件之一,使用 UITaleView 时最头疼的莫过于 cell 高度的计算,虽说在 iOS8.0 以后引入了自适应方法,但在适配过程中任然会遇到各种难题,尤其是为了满足产品需求进行复杂 cell 自定义时,高度计算可谓是难上加难.这里主要对开发中遇到的自定义 cell 是加载网络图片适配问题进行总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="TableView" scheme="http://andycui.top/categories/iOS/TableView/"/>
    
    
      <category term="cell 自适应" scheme="http://andycui.top/tags/cell-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>Carthage 安装以及初步实用</title>
    <link href="http://andycui.top/2018/05/22/Carthage%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%88%9D%E6%AD%A5%E5%AE%9E%E7%94%A8/"/>
    <id>http://andycui.top/2018/05/22/Carthage安装以及初步实用/</id>
    <published>2018-05-22T02:49:52.000Z</published>
    <updated>2018-05-30T04:37:54.536Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/Carthage/Carthage/raw/master/Logo/PNG/header.png" alt="Carthage"></p>
<p>本人从事 iOS 开发已有2年多,用 swift 开发也有一年多的时间了,此前一直利用 cocopods 管理三方框架和依赖,最近了解到 Carthage 这个工具,本着学习的态度对这工具进行了了解.  </p>
<p>官方地址: <a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">https://github.com/Carthage/Carthage</a></p>
<a id="more"></a>
<h2 id="Carthage-简介"><a href="#Carthage-简介" class="headerlink" title="Carthage 简介"></a>Carthage 简介</h2><ul>
<li>Carthage 类似于 CocoaPods，为用户管理第三方框架和依赖，但不会自动修改项目文件和生成配置</li>
<li>Carthage 是去中心化的依赖管理工具，安装依赖时不需要去中心仓库获取 CocoaPods 所有依赖的索引，节省时间</li>
<li>对项目无侵入性，Carthage 设计上也比较简单，利用的都是 Xcode 自身的功能，开发者在创建依赖时，相比 CocoaPods 也简单许多</li>
<li>Carthage 管理的依赖只需编译一次，项目干净编译时，不会再去重新编译依赖，节省时间</li>
<li>自动将第三方框架编程为 Dynamic framework( 动态库 )<br>与 CocoaPods 无缝集成，一个项目能同时拥有 CocoaPods 和 Carthage</li>
<li>缺点： <ul>
<li>仅支持 iOS8 +</li>
<li>它只支持框架，所以不能用来针对 iOS 8 以前的系统版本进行开发<br>支持的 Carthage 安装的第三方框架和依赖不如 CocoaPods 丰富</li>
<li>无法在 Xcode 里定位到源码</li>
<li>安装包的大小比用CocoaPods安装的包大</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装 Carthage.</p>
</blockquote>
<h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><ul>
<li><p>Install Homebrew:<br><img src="Carthage_1.png" alt="Install Homebrew"></p>
</li>
<li><p>获取 Homebrew 最新版本<br><code>$ brew update</code></p>
</li>
<li><p>Homebrew 常用命令</p>
<ul>
<li>搜索<br><code>$ brew search &lt;packageName&gt;</code></li>
<li>安装<br><code>$ brew install &lt;packageName&gt;</code></li>
<li>卸载<br><code>$ brew uninstall &lt;packageName&gt;</code></li>
<li>查看已安装包列表<br><code>$ brew list</code></li>
<li>查看包信息<br><code>$ brew info &lt;packageName&gt;</code></li>
<li>查看Homebrew版本<br><code>$ brew -v</code></li>
</ul>
</li>
</ul>
<h3 id="安装-Cartgage"><a href="#安装-Cartgage" class="headerlink" title="安装 Cartgage"></a>安装 Cartgage</h3><ul>
<li>安装<br><code>$ brew install carthage</code></li>
<li>查看 Cartgage 版本<br><code>$ carthage version</code></li>
<li>更新 carthage 版本<br><code>brew upgrade carthage</code></li>
<li>删除carthage旧版本<br><code>brew cleanup carthage</code></li>
</ul>
<h2 id="使用-Cartgage-安装依赖"><a href="#使用-Cartgage-安装依赖" class="headerlink" title="使用 Cartgage 安装依赖"></a>使用 Cartgage 安装依赖</h2><ul>
<li>进入项目所在路径<br><code>$ cd ~/路径/项目文件夹</code>  </li>
<li>创建空的 Carthage 文件 Cartfile<br><code>$ touch Cartfile</code></li>
<li>使用 Xcode 打开 Cartfile 文件<br><code>$ open -a Xcode Cartfile</code></li>
<li>编辑 Carfile 文件(以Alamofire为例)<br><code>github &quot;Alamofire/Alamofire&quot; == 4.4.0</code></li>
<li>执行更新命令,获取类库<br><code>$ carthage update --platform iOS</code></li>
<li>更新完成,检查目录结构<br><code>更新完成后项目根路径会多出两个文件(Cartfile.resolved,Cartfile)和一个文件夹(Carthage), Carthage下又有两个文件夹(Checkouts 和 Build), Checkouts 从github获取的源代码, Build 编译出来的Framework二进制代码库.</code><br><img src="Carthage_2.png" alt=""></li>
</ul>
<h2 id="添加-Frameworks-到项目中"><a href="#添加-Frameworks-到项目中" class="headerlink" title="添加 Frameworks 到项目中"></a>添加 Frameworks 到项目中</h2><ul>
<li><p>点击’项目名’ –&gt; ‘TARGETS’ –&gt; ‘General’, 在最下边找到’Linked Framework and Libraries’.<br><img src="Carthage_3.png" alt=""></p>
</li>
<li><p>点击’+’ –&gt; ‘Add Other ..’, 选择’Carthage/Build/iOS/Alamofire.framework’,点击 ‘Open’ 导入.<br><img src="Carthage_4.png" alt=""></p>
</li>
<li><p>选择菜单选项 ‘Build Phases’ –&gt; 点击 ‘+’ –&gt; ‘New Run Script Phase’, 添加以下命令:<br><code>/usr/local/bin/carthage copy-frameworks</code><br><img src="Carthage_5.png" alt=""></p>
</li>
<li><p>点击 ‘Input Files’ 下的 ‘+’,为每个 Framework 添加访问路径:<br><code>$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework</code><br><img src="Carthage_6.png" alt=""></p>
</li>
<li><p>在项目中 import 所需包就可以使用了.<br><code>import Alamofire</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/Carthage/Carthage/raw/master/Logo/PNG/header.png&quot; alt=&quot;Carthage&quot;&gt;&lt;/p&gt;
&lt;p&gt;本人从事 iOS 开发已有2年多,用 swift 开发也有一年多的时间了,此前一直利用 cocopods 管理三方框架和依赖,最近了解到 Carthage 这个工具,本着学习的态度对这工具进行了了解.  &lt;/p&gt;
&lt;p&gt;官方地址: &lt;a href=&quot;https://github.com/Carthage/Carthage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Carthage/Carthage&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
      <category term="开发工具" scheme="http://andycui.top/categories/Other/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="开发工具" scheme="http://andycui.top/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>YTTCoder</title>
    <link href="http://andycui.top/2018/01/24/YTTCoder/"/>
    <id>http://andycui.top/2018/01/24/YTTCoder/</id>
    <published>2018-01-24T02:17:18.000Z</published>
    <updated>2018-05-30T04:46:26.446Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作之余对开发中用到的数据解析相关进行了整理,整合了开发中常用到的数据解析,并将其封装成模块.(持续完善中)</p>
<p><a href="https://github.com/AndyCuiYTT/YTTCoder" target="_blank" rel="noopener">YTTCoder</a> : 实现常用的数据解析,例如: JSON 转 Model, 字典转 JSON等<br><a id="more"></a></p>
<p><img src="https://img.shields.io/badge/language-swift-green.svg" alt=""> <img src="https://img.shields.io/cocoapods/v/YTTCoder.svg" alt=""> <a href="http://andycui.top"><img src="https://img.shields.io/badge/blog-AndyCuiの博客-yellowgreen.svg" alt=""></a></p>
<h4 id="YTTJsonCodable-JSON-与-Model-之间相互转化的工具类"><a href="#YTTJsonCodable-JSON-与-Model-之间相互转化的工具类" class="headerlink" title="YTTJsonCodable: JSON 与 Model 之间相互转化的工具类"></a>YTTJsonCodable: JSON 与 Model 之间相互转化的工具类</h4><blockquote>
<p>提供数据转化的类方法,可直接调用.</p>
</blockquote>
<h4 id="YTTJson-协议-继承Codable协议"><a href="#YTTJson-协议-继承Codable协议" class="headerlink" title="YTTJson: 协议,继承Codable协议"></a>YTTJson: 协议,继承Codable协议</h4><blockquote>
<p>定义 Model 实体类只需遵守该协议即可调用装换方法.</p>
</blockquote>
<h4 id="YTTArrayCoder-数组扩展类"><a href="#YTTArrayCoder-数组扩展类" class="headerlink" title="YTTArrayCoder: 数组扩展类"></a>YTTArrayCoder: 数组扩展类</h4><blockquote>
<p>调用使用 obj.ytt.toJson() 形式调用</p>
<ul>
<li>toJson: 数组转 JSON 字符串</li>
</ul>
</blockquote>
<h4 id="YTTDictionaryCoder-字典扩展类"><a href="#YTTDictionaryCoder-字典扩展类" class="headerlink" title="YTTDictionaryCoder: 字典扩展类"></a>YTTDictionaryCoder: 字典扩展类</h4><blockquote>
<p>调用使用 obj.ytt.toJson() 形式调用</p>
<ul>
<li>toJson: 字典转 JSON 字符串</li>
<li>getValue(withKeyPath): 根据路径获取值</li>
</ul>
</blockquote>
<h4 id="YTTStringCoder-字符串扩展类"><a href="#YTTStringCoder-字符串扩展类" class="headerlink" title="YTTStringCoder: 字符串扩展类"></a>YTTStringCoder: 字符串扩展类</h4><blockquote>
<p>调用使用 obj.ytt.toDictionary() 形式调用</p>
<ul>
<li>toDictionary: JSON 字符串转字典</li>
<li>toArray: JSON 字符串转数组</li>
<li>toDate: 时间字符串转 Date 对象</li>
</ul>
</blockquote>
<h4 id="YTTDateCoder-Date-扩展类"><a href="#YTTDateCoder-Date-扩展类" class="headerlink" title="YTTDateCoder: Date 扩展类"></a>YTTDateCoder: Date 扩展类</h4><blockquote>
<p>调用使用 obj.ytt.toString() 形式调用</p>
<ul>
<li>toString: Date 格式化</li>
</ul>
</blockquote>
<h4 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h4><p>如果您有什么好的修改建议,可以发邮件到<a href="mailto://AndyCuiYTT@163.com" target="_blank" rel="noopener">AndyCuiYTT@163.com</a>, 也欢迎到我的博客<a href="http://andycui.top">AndyCuiの博客</a>一起讨论学习~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作之余对开发中用到的数据解析相关进行了整理,整合了开发中常用到的数据解析,并将其封装成模块.(持续完善中)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AndyCuiYTT/YTTCoder&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YTTCoder&lt;/a&gt; : 实现常用的数据解析,例如: JSON 转 Model, 字典转 JSON等&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="数据处理" scheme="http://andycui.top/categories/iOS/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数据处理" scheme="http://andycui.top/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>多台电脑共同管理hexo博客</title>
    <link href="http://andycui.top/2017/10/20/hexo-version-control/"/>
    <id>http://andycui.top/2017/10/20/hexo-version-control/</id>
    <published>2017-10-20T01:57:30.000Z</published>
    <updated>2018-05-30T04:41:42.154Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。<br>这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。<br>网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。<br><a id="more"></a></p>
<p>先删除主题文件下的.git文件，<br>可以直接删除或者执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf .git</span><br></pre></td></tr></table></figure>
<p>然后在本地博客文件夹下边依次输入以下指令(部分指令因为有提示可以自己修改下)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git checkout -b hexo</span><br><span class="line">$ git remote add origin git@github.com:vonfly（你自己giuhub账号名）/vonfly.github.io（项目名）.git</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"提交说明"</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>
<p>执行到这里我们就已经把本地的源文件添加到了分支hexo上。</p>
<p>说明：博客文件夹下根目录.gitignore（此文件的作用是因此忽略所写的文件或者目录，加快push速度。）可以不修改，我的就没有修改，如果不修改的话<br>在；另外一台电脑上克隆下来的博客项目就要先运行一下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>我的.gitignore文件内容为<br>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>
<p>当然你也可以把node_modules/去掉，这样在另外的电脑克隆下来的项目就不用在运行上面的命令了</p>
<p>扩展：</p>
<h3 id="github常见操作和常见错误！"><a href="#github常见操作和常见错误！" class="headerlink" title="github常见操作和常见错误！"></a>github常见操作和常见错误！</h3><h4 id="如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git"><a href="#如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git" class="headerlink" title="如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git"></a>如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git</h4><p>提示出错信息：fatal: remote origin already exists.</p>
<p>解决办法如下：<br>1、先输入$ git remote rm origin<br>2、再输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git 就不会报错了！</p>
<h4 id="如果输入-git-remote-rm-origin-还是报错的话，"><a href="#如果输入-git-remote-rm-origin-还是报错的话，" class="headerlink" title="如果输入$ git remote rm origin 还是报错的话，"></a>如果输入$ git remote rm origin 还是报错的话，</h4><p>error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容<br>4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc<br>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</p>
<h4 id="如果输入-git-push-origin-master"><a href="#如果输入-git-push-origin-master" class="headerlink" title="如果输入$ git push origin master"></a>如果输入$ git push origin master</h4><p>提示出错信息：error:failed to push som refs to …….<br>解决办法如下：<br>1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来<br>2、再输入$ git push origin master<br>3、如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.<br>4、则需要重新输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。&lt;br&gt;这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。&lt;br&gt;网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
    
      <category term="hexo" scheme="http://andycui.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SliderView</title>
    <link href="http://andycui.top/2017/10/14/SliderViews/"/>
    <id>http://andycui.top/2017/10/14/SliderViews/</id>
    <published>2017-10-14T04:57:30.000Z</published>
    <updated>2018-05-30T04:44:38.523Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/AndyCuiYTT/SliderViews" target="_blank" rel="noopener">SliderViews</a> : 简单易用的滑动标签工具,『标签栏工具』『滑动视图工具』可单独使用.<br><a id="more"></a></p>
<p><img src="https://img.shields.io/badge/language-swift-green.svg" alt=""> <a href=""><img src="https://img.shields.io/cocoapods/l/SliderViews.svg" alt="CRAN"></a> <img src="https://img.shields.io/cocoapods/v/SliderViews.svg" alt=""> <a href="http://andycui.top"><img src="https://img.shields.io/badge/blog-AndyCuiの博客-yellowgreen.svg" alt=""></a><br><img src="sliderview-02.gif" alt=""></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SliderViews&apos;</span><br></pre></td></tr></table></figure>
<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="SegmentedControl-使用"><a href="#SegmentedControl-使用" class="headerlink" title="SegmentedControl 使用"></a>SegmentedControl 使用</h2><p> SegmentedControl: 标签栏工具,使用需要实现 YTTSegmentedDelegate 代理方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let segmented = YTTSegmentedControl()</span><br><span class="line">segmented.delegate = self // 实现 YTTSegmentedDelegate</span><br><span class="line">segmented.addTitleItems([&quot;SliderView1&quot;,&quot;SliderView2&quot;,&quot;SliderView3&quot;], isSelected: 1)</span><br><span class="line">segmented.backgroundColor = UIColor.cyan</span><br><span class="line">self.view.addSubview(segmented)</span><br><span class="line">segmented.snp.makeConstraints &#123; (make) in</span><br><span class="line">    make.left.right.centerY.equalToSuperview()</span><br><span class="line">    make.height.equalTo(50)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="sliderview-05.gif" alt=""></p>
<h2 id="SliderView-使用"><a href="#SliderView-使用" class="headerlink" title="SliderView 使用"></a>SliderView 使用</h2><p> SliderView: 滑动视图工具,使用需要实现YTTSliderViewDelegate代理</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let sliderView = YTTSliderView()</span><br><span class="line">sliderView = self // 实现 YTTSliderViewDelegate</span><br><span class="line">let view1 = UIView()</span><br><span class="line">view1.backgroundColor = UIColor.cyan</span><br><span class="line">let view2 = UIView()</span><br><span class="line">view2.backgroundColor = UIColor.orange</span><br><span class="line">let view3 = UIView()</span><br><span class="line">view3.backgroundColor = UIColor.blue</span><br><span class="line">sliderView.addChildViews([view1, view2, view3], isSelected: 1)</span><br><span class="line">self.view.addSubview(sliderView)</span><br><span class="line">sliderView.snp.makeConstraints &#123; (make) in</span><br><span class="line">    make.edges.equalToSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="sliderview-04.gif" alt=""></p>
<h2 id="TabSliderView-使用"><a href="#TabSliderView-使用" class="headerlink" title="TabSliderView 使用"></a>TabSliderView 使用</h2><p> TabSliderView: SegmentedControl 与 SliderView 组合使用.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let tabSliderView = YTTTabSliderView()</span><br><span class="line">tabSliderView.addSubviews([(&quot;SliderView1&quot;,view1),(&quot;SliderView2&quot;,view2),(&quot;SliderView3&quot;,view3)])</span><br><span class="line">view.addSubview(tabSliderView)</span><br><span class="line">tabSliderView.snp.makeConstraints &#123; (make) in</span><br><span class="line">    make.edges.equalToSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="sliderview-03.gif" alt=""></p>
<h1 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h1><p>如果您有什么好的修改建议,可以发邮件到<a href="mailto://AndyCuiYTT@163.com" target="_blank" rel="noopener">AndyCuiYTT@163.com</a>, 也欢迎到我的博客<a href="http://andycui.top">AndyCuiの博客</a>一起讨论学习~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/AndyCuiYTT/SliderViews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SliderViews&lt;/a&gt; : 简单易用的滑动标签工具,『标签栏工具』『滑动视图工具』可单独使用.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="自定义视图" scheme="http://andycui.top/categories/iOS/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="slider" scheme="http://andycui.top/tags/slider/"/>
    
  </entry>
  
  <entry>
    <title>Swift处理JSON - 转换JSON和Model</title>
    <link href="http://andycui.top/2017/08/29/Swift%E5%A4%84%E7%90%86JSON%20-%20%E8%BD%AC%E6%8D%A2JSON%E5%92%8CModel/"/>
    <id>http://andycui.top/2017/08/29/Swift处理JSON - 转换JSON和Model/</id>
    <published>2017-08-29T01:28:19.000Z</published>
    <updated>2018-05-30T04:45:59.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;&emsp;很多时候我们再服务端请求下来的数据都是<a href="https://baike.baidu.com/item/JSON/2462549" target="_blank" rel="noopener">JSON</a>格式，我们需要将这些数据展示在UI界面。我们一般都会先将JSON转化为数据模型或字典进行使用。<br>&emsp;&emsp;为了更快的开发我们时常会用到一些开源库，其中JSON解析的库必不可少，在OC开发中我们常用的JSON解析库如<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a>，<a href="https://github.com/jsonmodel/jsonmodel" target="_blank" rel="noopener">JSONModel</a>等,这些库基本都是利用runtime实现读取属性并利用kvc赋值的。在swift中由于runtime的局限性，产生了一些通过反射等机制实现的库，比如<a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a>，<a href="https://github.com/Hearst-DD/ObjectMapper" target="_blank" rel="noopener">ObjectMapper</a>，<a href="https://github.com/alibaba/handyjson" target="_blank" rel="noopener">HandyJSON</a>等，而 HandyJSON 是其中使用最舒服的一个库，本文将介绍用  HandyJSON 来进行Model和JSON间的互相转换。</p>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"doubleOptional\":1.1,\"stringImplicitlyUnwrapped\":\"hello\",\"int\":1&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(object.int)</span><br><span class="line">    <span class="built_in">print</span>(object.doubleOptional!)</span><br><span class="line">    <span class="built_in">print</span>(object.stringImplicitlyUnwrapped)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = <span class="type">BasicTypes</span>()</span><br><span class="line">object.int = <span class="number">1</span></span><br><span class="line">object.doubleOptional = <span class="number">1.1</span></span><br><span class="line">object.stringImplicitlyUnwrapped = “hello<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(object.toJSON()!) // serialize to dictionary</span></span><br><span class="line"><span class="string">print(object.toJSONString()!) // serialize to JSON string</span></span><br><span class="line"><span class="string">print(object.toJSONString(prettyPrint: true)!) // serialize to pretty JSON string</span></span><br></pre></td></tr></table></figure>
<h1 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h1><ul>
<li><a href="#特性">特性</a></li>
<li><a href="#环境要求">环境要求</a></li>
<li><a href="#安装">安装</a></li>
<li><a href="#反序列化-1">反序列化</a><ul>
<li><a href="#基本类型">基本类型</a></li>
<li><a href="#支持struct">支持struct</a></li>
<li><a href="#支持enum">支持enum</a></li>
<li><a href="#可选隐式解包可选集合等">可选、隐式解包可选、集合等</a></li>
<li><a href="#指定解析路径">指定解析路径</a></li>
<li><a href="#组合对象">组合对象</a></li>
<li><a href="#继承自父类的子类">继承自父类的子类</a></li>
<li><a href="#json中的数组">JSON中的数组</a></li>
<li><a href="#自定义解析规则">自定义解析规则</a></li>
<li><a href="#排除指定属性">排除指定属性</a></li>
<li><a href="#支持的属性类型">支持的属性类型</a></li>
</ul>
</li>
<li><a href="#序列化-1">序列化</a><ul>
<li><a href="#基本类型-1">基本类型</a></li>
<li><a href="#自定义映射和排除">自定义映射和排除型</a></li>
</ul>
</li>
<li><a href="#待办">待办</a></li>
</ul>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul>
<li><p>序列化Model到JSON、从JSON反序列化到Model</p>
</li>
<li><p>自然地以Model的属性名称作为解析JSON的Key，不需要额外指定</p>
</li>
<li><p>支持Swift中大部分类型</p>
</li>
<li><p>支持class、struct定义的Model</p>
</li>
<li><p>支持自定义解析规则</p>
</li>
<li><p>类型自适应，如JSON中是一个Int，但对应Model是String字段，会自动完成转化</p>
</li>
</ul>
<p>具体支持的类型，可以参考代码文件: <a href="./HandyJSONTests/BasicTypes.swift">BasicTypes</a>。</p>
<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul>
<li><p>iOS 8.0+/OSX 10.9+/watchOS 2.0+/tvOS 9.0+</p>
</li>
<li><p>Swift 2.3+ / Swift 3.0+</p>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>HandyJSON只在Swift3.x版本上(master分支)开发新特性，在Swift2.x中使用，参见: <a href="https://github.com/alibaba/HandyJSON/tree/master_for_swift_2x" target="_blank" rel="noopener">swift2 branch</a></p>
<p>具体操作指引参考 <a href="./README.md">英文版README</a> 的 <code>Installation</code> 章节。</p>
<h1 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>要支持从JSON串反序列化，Model定义时要声明服从<code>HandyJSON</code>协议。确实是一个协议，而不是继承自<code>NSObject</code>。</p>
<p>服从<code>HandyJSON</code>协议，需要实现一个空的<code>init</code>方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"doubleOptional\":1.1,\"stringImplicitlyUnwrapped\":\"hello\",\"int\":1&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持struct"><a href="#支持struct" class="headerlink" title="支持struct"></a>支持struct</h2><p>对于声明为<code>struct</code>的Model，由于<code>struct</code>默认提供了空的<code>init</code>方法，所以不需要额外声明。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"doubleOptional\":1.1,\"stringImplicitlyUnwrapped\":\"hello\",\"int\":1&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但需要注意，如果你为<code>struct</code>指定了别的构造函数，那就要显示声明一个空的<code>init</code>函数。</p>
<h2 id="支持enum"><a href="#支持enum" class="headerlink" title="支持enum"></a>支持enum</h2><p>支持值类型的enum，且需要声明服从<code>HandyJSONEnum</code>协议。不再需要其他特殊处理了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AnimalType</span>: <span class="title">String</span>, <span class="title">HandyJSONEnum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Cat</span> = <span class="string">"cat"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Dog</span> = <span class="string">"dog"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Bird</span> = <span class="string">"bird"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">AnimalType</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"type\":\"cat\",\"name\":\"Tom\"&#125;"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> animal = <span class="type">Animal</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(animal.type?.rawValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可选、隐式解包可选、集合等"><a href="#可选、隐式解包可选、集合等" class="headerlink" title="可选、隐式解包可选、集合等"></a>可选、隐式解包可选、集合等</h2><p>HandyJSON支持这些非基础类型，包括嵌套结构。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bool: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> intOptional: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> doubleImplicitlyUnwrapped: <span class="type">Double</span>!</span><br><span class="line">    <span class="keyword">var</span> anyObjectOptional: <span class="type">Any</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arrayInt: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = []</span><br><span class="line">    <span class="keyword">var</span> arrayStringOptional: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;?</span><br><span class="line">    <span class="keyword">var</span> setInt: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;?</span><br><span class="line">    <span class="keyword">var</span> dictAnyObject: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt; = [:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nsNumber = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> nsString: <span class="type">NSString</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object = <span class="type">BasicTypes</span>()</span><br><span class="line">object.intOptional = <span class="number">1</span></span><br><span class="line">object.doubleImplicitlyUnwrapped = <span class="number">1.1</span></span><br><span class="line">object.anyObjectOptional = <span class="string">"StringValue"</span></span><br><span class="line">object.arrayInt = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">object.arrayStringOptional = [<span class="string">"a"</span>, <span class="string">"b"</span>]</span><br><span class="line">object.setInt = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">object.dictAnyObject = [<span class="string">"key1"</span>: <span class="number">1</span>, <span class="string">"key2"</span>: <span class="string">"stringValue"</span>]</span><br><span class="line">object.nsNumber = <span class="number">2</span></span><br><span class="line">object.nsString = <span class="string">"nsStringValue"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = object.toJSONString()!</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> object = <span class="type">BasicTypes</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指定解析路径"><a href="#指定解析路径" class="headerlink" title="指定解析路径"></a>指定解析路径</h2><p>HandyJSON支持指定从哪个具体路径开始解析，反序列化到Model。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int64</span>!</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"code\":200,\"msg\":\"success\",\"data\":&#123;\"cat\":&#123;\"id\":12345,\"name\":\"Kitty\"&#125;&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString, designatedPath: <span class="string">"data.cat"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组合对象"><a href="#组合对象" class="headerlink" title="组合对象"></a>组合对象</h2><p>注意，如果Model的属性不是基本类型或集合类型，那么它必须是一个服从<code>HandyJSON</code>协议的类型。</p>
<p>如果是泛型集合类型，那么要求泛型实参是基本类型或者服从<code>HandyJSON</code>协议的类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aInt: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> aString: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composition</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aInt: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> comp1: <span class="type">Component</span>?</span><br><span class="line">    <span class="keyword">var</span> comp2: <span class="type">Component</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"num\":12345,\"comp1\":&#123;\"aInt\":1,\"aString\":\"aaaaa\"&#125;,\"comp2\":&#123;\"aInt\":2,\"aString\":\"bbbbb\"&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> composition = <span class="type">Composition</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(composition)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="继承自父类的子类"><a href="#继承自父类的子类" class="headerlink" title="继承自父类的子类"></a>继承自父类的子类</h2><p>如果子类要支持反序列化，那么要求父类也服从<code>HandyJSON</code>协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span>?</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"id\":12345,\"color\":\"black\",\"name\":\"cat\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JSON数组"><a href="#JSON数组" class="headerlink" title="JSON数组"></a>JSON数组</h2><p>如果JSON的第一层表达的是数组，可以转化它到一个Model数组。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonArrayString: <span class="type">String</span>? = <span class="string">"[&#123;\"name\":\"Bob\",\"id\":\"1\"&#125;, &#123;\"name\":\"Lily\",\"id\":\"2\"&#125;, &#123;\"name\":\"Lucy\",\"id\":\"3\"&#125;]"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cats = [<span class="type">Cat</span>].deserialize(from: jsonArrayString) &#123;</span><br><span class="line">    cats.forEach(&#123; (cat) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义解析规则"><a href="#自定义解析规则" class="headerlink" title="自定义解析规则"></a>自定义解析规则</h2><p>HandyJSON支持自定义映射关系，或者自定义解析过程。你需要实现一个可选的<code>mapping</code>函数，在里边实现<code>NSString</code>值(HandyJSON会把对应的JSON字段转换为NSString)转换为你需要的字段类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int64</span>!</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line">    <span class="keyword">var</span> parent: (<span class="type">String</span>, <span class="type">String</span>)?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(mapper: HelpingMapper)</span></span> &#123;</span><br><span class="line">        <span class="comment">// specify 'cat_id' field in json map to 'id' property in object</span></span><br><span class="line">        mapper &lt;&lt;&lt;</span><br><span class="line">            <span class="keyword">self</span>.id &lt;-- <span class="string">"cat_id"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// specify 'parent' field in json parse as following to 'parent' property in object</span></span><br><span class="line">        mapper &lt;&lt;&lt;</span><br><span class="line">            <span class="keyword">self</span>.parent &lt;-- <span class="type">TransformOf</span>&lt;(<span class="type">String</span>, <span class="type">String</span>), <span class="type">String</span>&gt;(fromJSON: &#123; (rawString) -&gt; (<span class="type">String</span>, <span class="type">String</span>)? <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> parentNames = rawString?.characters.<span class="built_in">split</span>(separator: <span class="string">"/"</span>).<span class="built_in">map</span>(<span class="type">String</span>.<span class="keyword">init</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (parentNames[<span class="number">0</span>], parentNames[<span class="number">1</span>])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;, toJSON: &#123; (tuple) -&gt; <span class="type">String</span>? <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> _tuple = tuple &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"<span class="subst">\(_tuple.<span class="number">0</span>)</span>/<span class="subst">\(_tuple.<span class="number">1</span>)</span>"</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"cat_id\":12345,\"name\":\"Kitty\",\"parent\":\"Tom/Lily\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat.id)</span><br><span class="line">    <span class="built_in">print</span>(cat.parent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="排除指定属性"><a href="#排除指定属性" class="headerlink" title="排除指定属性"></a>排除指定属性</h2><p>如果在Model中存在因为某些原因不能实现<code>HandyJSON</code>协议的非基本字段，或者不能实现<code>HandyJSONEnum</code>协议的枚举字段，又或者说不希望反序列化影响某个字段，可以在<code>mapping</code>函数中将它排除。如果不这么做，可能会出现未定义的行为。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotHandyJSONType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dummy: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int64</span>!</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>!</span><br><span class="line">    <span class="keyword">var</span> notHandyJSONTypeProperty: <span class="type">NotHandyJSONType</span>?</span><br><span class="line">    <span class="keyword">var</span> basicTypeButNotWantedProperty: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(mapper: HelpingMapper)</span></span> &#123;</span><br><span class="line">        mapper &gt;&gt;&gt; <span class="keyword">self</span>.notHandyJSONTypeProperty</span><br><span class="line">        mapper &gt;&gt;&gt; <span class="keyword">self</span>.basicTypeButNotWantedProperty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonString = <span class="string">"&#123;\"name\":\"cat\",\"id\":\"12345\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cat = <span class="type">Cat</span>.deserialize(from: jsonString) &#123;</span><br><span class="line">    <span class="built_in">print</span>(cat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持的属性类型"><a href="#支持的属性类型" class="headerlink" title="支持的属性类型"></a>支持的属性类型</h2><ul>
<li><p><code>Int</code>/<code>Bool</code>/<code>Double</code>/<code>Float</code>/<code>String</code>/<code>NSNumber</code>/<code>NSString</code></p>
</li>
<li><p><code>NSArray/NSDictionary</code></p>
</li>
<li><p><code>Int8/Int16/Int32/Int64</code>/<code>UInt8/UInt16/UInt23/UInt64</code></p>
</li>
<li><p><code>Optional&lt;T&gt;/ImplicitUnwrappedOptional&lt;T&gt;</code> // T is one of the above types</p>
</li>
<li><p><code>Array&lt;T&gt;</code> // T is one of the above types</p>
</li>
<li><p><code>Dictionary&lt;String, T&gt;</code> // T is one of the above types</p>
</li>
<li><p>以上类型的嵌套</p>
</li>
</ul>
<h1 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h1><h2 id="基本类型-1"><a href="#基本类型-1" class="headerlink" title="基本类型"></a>基本类型</h2><p>现在，序列化也要求Model声明服从<code>HandyJSON</code>协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTypes</span>: <span class="title">HandyJSON</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> int: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> doubleOptional: <span class="type">Double</span>?</span><br><span class="line">    <span class="keyword">var</span> stringImplicitlyUnwrapped: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object = <span class="type">BasicTypes</span>()</span><br><span class="line">object.int = <span class="number">1</span></span><br><span class="line">object.doubleOptional = <span class="number">1.1</span></span><br><span class="line">object.stringImplicitlyUnwrapped = “hello<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(object.toJSON()!) // serialize to dictionary</span></span><br><span class="line"><span class="string">print(object.toJSONString()!) // serialize to JSON string</span></span><br><span class="line"><span class="string">print(object.toJSONString(prettyPrint: true)!) // serialize to pretty JSON string</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义映射和排除"><a href="#自定义映射和排除" class="headerlink" title="自定义映射和排除"></a>自定义映射和排除</h2><p>和反序列化一样，只要定义<code>mapping</code>和<code>exclude</code>就可以了。被排除的属性，序列化和反序列化都不再影响到它。而在<code>mapping</code>中定义的<code>Transformer</code>，同时定义了序列化和反序列的规则，所以只要为属性指明一个<code>Transformer</code>关系就可以了。</p>
<h1 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h1><p>提供几个 JSON 字符串生成 model 类的工具：</p>
<ul>
<li><a href="https://github.com/Ahmed-Ali/JSONExport" target="_blank" rel="noopener">JSONExport</a></li>
<li><a href="https://github.com/banxi1988/iOSCodeGenerator/blob/master/README.md" target="_blank" rel="noopener">iOS Code Generator</a></li>
<li><a href="https://github.com/mozhenhau/D3Json" target="_blank" rel="noopener">D3Json</a></li>
<li><a href="https://github.com/lucianomarisi/JSONUtilities" target="_blank" rel="noopener">JSONUtilities</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      iOS 开发中 model 数据模型是最长的一种数据处理方式，通常与服务器端数据交互时，服务端返回JSON文本，然后由客户端对JSON数据进行解析转化为model类型进行使用。主要针对与JSON转model进行简单描述。
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="swift" scheme="http://andycui.top/categories/iOS/swift/"/>
    
    
      <category term="swift" scheme="http://andycui.top/tags/swift/"/>
    
      <category term="model" scheme="http://andycui.top/tags/model/"/>
    
      <category term="JSON" scheme="http://andycui.top/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 tableViewCell高度自适应</title>
    <link href="http://andycui.top/2017/08/01/%E6%B5%85%E8%B0%88-tableViewCell%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://andycui.top/2017/08/01/浅谈-tableViewCell高度自适应/</id>
    <published>2017-08-01T10:10:43.000Z</published>
    <updated>2018-05-30T04:40:29.260Z</updated>
    
    <content type="html"><![CDATA[<p> UITableView 是开发中最常用到的控件,可以说没有哪个 APP 离得开 UITableView 控件,使用时难免会遇到各种各样的问题,其中 cell 高度自适应是最让人头疼的,简单说一下我在开发中总结.<br><a id="more"></a><br>开发中面对 cell 的自适应有着各种各样的方法,无外乎以下几种:</p>
<h2 id="根据数据源计算"><a href="#根据数据源计算" class="headerlink" title="根据数据源计算"></a>根据数据源计算</h2><blockquote>
<p>通常做法为自定义 cell 添加类方法,传入当前 cell 的数据源,计算除 cell 的高度,返回.然后在 tableView 的代理方法中设置 cell 高度.<br>这种方法计算 cell 高度是需要注意:但计算 label 的高度时,要留意 label 的宽度和字体大小的设置,否则将会得到错误的高度</p>
</blockquote>
<h2 id="调用-tableView-的代理方法-拿到-cell-获取高度"><a href="#调用-tableView-的代理方法-拿到-cell-获取高度" class="headerlink" title="调用 tableView 的代理方法,拿到 cell 获取高度"></a>调用 tableView 的代理方法,拿到 cell 获取高度</h2><blockquote>
<p>这种做法的缺点使cell 的生成代码重复执行.</p>
</blockquote>
<h2 id="iOS-8-0-以后可以与新引入-cell-自适应方法-在-xib-下使用"><a href="#iOS-8-0-以后可以与新引入-cell-自适应方法-在-xib-下使用" class="headerlink" title="iOS 8.0 以后可以与新引入 cell 自适应方法(在 xib 下使用)"></a>iOS 8.0 以后可以与新引入 cell 自适应方法(在 xib 下使用)</h2><blockquote>
<p>需要设置 rowHeight( = UITableViewAutomaticDimension) 与 estimatedRowHeight 两个属性, rowHeight 设置表明使用自适应, estimatedRowHeight 一个参考值.<br>使用自适应如果 cell 中有图片,最好对 ImageView 的宽高进行限定,否则适配将会根据图片大小自适应.<br>当加载图片张数不确定时,可以添加一个 View, 在给 cell 赋值时用代码添加 ImgView, 将 view 的高度约束拖成属性,在图片添加完成后修改 view 的高度.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; UITableView 是开发中最常用到的控件,可以说没有哪个 APP 离得开 UITableView 控件,使用时难免会遇到各种各样的问题,其中 cell 高度自适应是最让人头疼的,简单说一下我在开发中总结.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="TableView" scheme="http://andycui.top/categories/iOS/TableView/"/>
    
    
      <category term="cell 自适应" scheme="http://andycui.top/tags/cell-%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>swift 打包 framework</title>
    <link href="http://andycui.top/2017/07/25/swift-%E6%89%93%E5%8C%85-framework/"/>
    <id>http://andycui.top/2017/07/25/swift-打包-framework/</id>
    <published>2017-07-25T01:40:48.000Z</published>
    <updated>2018-05-30T04:45:06.039Z</updated>
    
    <content type="html"><![CDATA[<p> 在开发中我们常常会用到一些第三方 SDK 库，使用时只需将 framework 文件添加到项目中即可，十分方便。同样地，我们也可以创建自己的 framework 框架，用来封装一些常用的工具方法、框架类等。一来不会使源代码完全暴露在外，二来也便于代码复用。<br><a id="more"></a></p>
<h1 id="打包篇"><a href="#打包篇" class="headerlink" title=" 打包篇 "></a><center> 打包篇 </center></h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><blockquote>
<p>选择 File-&gt;New-&gt;Project-&gt;Framework&amp;Library-&gt;Cocoa Touch Framework, 点击 Next,语言选择 swift 如图:<br><img src="图-1.png" alt="创建"><br><strong> 创建完成生成以下目录: </strong><br><img src="图-2.png" alt="项目结构"></p>
<ul>
<li>xxx.h 文件的作用是整个包对外提供的入口头文件，除了正常定义参数属性之外还提供 Swift项目内引用的OC文件的import引用</li>
<li>info.plist 文件的作用就如同正常项目的plist文件作用，用来定义或添加一些属性。</li>
</ul>
</blockquote>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><blockquote>
<p>可以新建文件也可以在已有项目拷贝<br>这里要注意一下：由于打包类库工程不是一个完整项目工程，所以并没有AppDelegate等文件，所以涉及到这些的文件要额外处理，或改代码，或适当改变功能。<br>注意：工程如果有桥接文件，是不能拷贝过来的，否则编译不通过。桥接文件下的 import 引用应该放到 xxx.h 文件中<br><strong>注意:</strong> 如果 swift 文件想要暴露给外部使用,类及方法要用 public 修饰</p>
</blockquote>
<h2 id="经过以上操作本库已基本完成"><a href="#经过以上操作本库已基本完成" class="headerlink" title="经过以上操作本库已基本完成"></a>经过以上操作本库已基本完成</h2><blockquote>
<p><img src="图-3.png" alt="框架图"><br>注意: 如果用到资源文件,如:图片,视频,音频等直接用Assets.xcassets是无效的,我们要新建文件夹,将图片放入其中,添加后缀名.bundle,例如 xxx.bundle,使用图片时图片名:xxx.bundle/icon.png.</p>
</blockquote>
<h2 id="文件添加完毕就可以尝试-build-一下了"><a href="#文件添加完毕就可以尝试-build-一下了" class="headerlink" title="文件添加完毕就可以尝试 build 一下了"></a>文件添加完毕就可以尝试 build 一下了</h2><blockquote>
<p>正常情况下，如果我们swift项目引入了oc文件，我们必须通过一个桥接文件来处理两者之间的转换，而我们在新建类库包的时候，是禁止桥接文件存在的，即使你添加了，也会永远编译不过，打包不了。<br>所以这里就用到这个 xxx.h 头文件了。<br>我们可以通过这个文件来实现两者之间的转换，前提就是必须先将oc的.h暴露出来，否则即使你import，也会报错找不到.h 文件。</p>
</blockquote>
<h2 id="暴露文件给外部使用"><a href="#暴露文件给外部使用" class="headerlink" title="暴露文件给外部使用"></a>暴露文件给外部使用</h2><blockquote>
<p>选择 target-&gt;Build Phases-&gt;Header, 将要暴露给外部使用OC 的.h 的文件拖到 public 下,如果是 swift 只需要将类和方法声明成 public<br><img src="图-4.png" alt=""></p>
</blockquote>
<h2 id="编译通过，查看这里"><a href="#编译通过，查看这里" class="headerlink" title="编译通过，查看这里"></a>编译通过，查看这里</h2><blockquote>
<p><img src="图-5.png" alt=""><br>红框内就是最终我们得到的Framework包。<br>右击本地查看，会看到本类库以及对应的依赖第三方库包，后面在其他项目引用的时候，这些都是需要的（需要一起拷贝添加）。</p>
</blockquote>
<h1 id="合并真机和模拟器framework"><a href="#合并真机和模拟器framework" class="headerlink" title=" 合并真机和模拟器framework "></a><center> 合并真机和模拟器framework </center></h1><blockquote>
<h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><p>编译得到的包可分为 debug 包和 release包, debug 包一般用于测试,如果要发布务必打 release 包.<br><img src="图-6.png" alt=""><br>release 包又包含模拟器包和真机包,发布时需要将模拟器包与真机包合并<br>去包文件夹<br><img src="图-7.png" alt=""><img src="图-8.png" alt=""></p>
<h2 id="合并包"><a href="#合并包" class="headerlink" title="合并包"></a>合并包</h2><p>终端输入 lipo -create 真机路径 模拟器路径 -output 真机路径（ps：这几个路径就是上图拖动到终端后的路径）<br>但是并没有完，不知道为什么，终端这样合并只是假象，你需要手动去将Modules里的的 xxx.swiftmodule文件合并到一起</p>
</blockquote>
<h1 id="引用篇"><a href="#引用篇" class="headerlink" title=" 引用篇 "></a><center> 引用篇 </center></h1><blockquote>
<ul>
<li>新建空白工程</li>
<li>将之前所得到 framework 拷贝到项目</li>
<li>在工程Targets－General－EmbeddedBinaries内添加Frameworks包</li>
</ul>
</blockquote>
<h1 id="附加"><a href="#附加" class="headerlink" title=" 附加 "></a><center> 附加 </center></h1><blockquote>
<h2 id="引用-CommonCrypto"><a href="#引用-CommonCrypto" class="headerlink" title="引用 CommonCrypto"></a>引用 CommonCrypto</h2><p>项目中用到了 MD5加密, swift 是无法调用 C语言库的,在 xxx.h 中添加#import <commoncrypto commoncrypto.h=""> 报错,解决方法:<br>新建 module.modulemap 文件,在里边添加<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> module <span class="type">CommonCrypto</span> [system] &#123;</span><br><span class="line">    header <span class="string">"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/CommonCrypto/CommonCrypto.h"</span></span><br><span class="line">    export *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></commoncrypto></p>
</blockquote>
<p>选择 target-&gt;Build Settings, 找到 swift compler-Search Paths, 在 Import paths 添加创建文件路径<br>在需要 MD5机密的文件中 import CommonCrypto</p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><blockquote>
<p><a href="http://www.cnblogs.com/yajunLi/p/5987687.html" target="_blank" rel="noopener">iOS打包framework - Swift完整项目打包Framework，嵌入OC项目使用</a><br><a href="http://www.cnblogs.com/yajunLi/p/6005077.html" target="_blank" rel="noopener">iOS打包Framework真机和模拟器兼容合并版本 - 详细攻略步骤</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 在开发中我们常常会用到一些第三方 SDK 库，使用时只需将 framework 文件添加到项目中即可，十分方便。同样地，我们也可以创建自己的 framework 框架，用来封装一些常用的工具方法、框架类等。一来不会使源代码完全暴露在外，二来也便于代码复用。&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
    
      <category term="framework" scheme="http://andycui.top/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>swift 网络请求</title>
    <link href="http://andycui.top/2017/07/18/network-swift/"/>
    <id>http://andycui.top/2017/07/18/network-swift/</id>
    <published>2017-07-18T02:13:11.000Z</published>
    <updated>2018-05-30T04:43:17.295Z</updated>
    
    <content type="html"><![CDATA[<p>对 Alamofire与系统的网络请求进行简易封装<br><a id="more"></a></p>
<h1 id="Alamofire"><a href="#Alamofire" class="headerlink" title="Alamofire"></a>Alamofire</h1><blockquote>
<h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// post 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 服务器端返回数据为 JSON 数据格式</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求网络地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_post</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> params: ayParams? = <span class="literal">nil</span>, result: @escaping <span class="params">(Any)</span></span></span>-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>)&#123;</span><br><span class="line">    <span class="type">Alamofire</span>.request(urlStr, method: .post, parameters: params, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>, headers: <span class="literal">nil</span>).responseJSON &#123; (response) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> response.result.isSuccess&#123;</span><br><span class="line">            result(response.result.value!)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fail(response.error?.localizedDescription ?? <span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// get 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 服务器端返回数据为 JSON 数据格式</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求网络地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 请求成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 请求失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_get</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> params: ayParams? = <span class="literal">nil</span>, result: @escaping <span class="params">(Any)</span></span></span>-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>)&#123;</span><br><span class="line">    <span class="type">Alamofire</span>.request(urlStr, method: .<span class="keyword">get</span>, parameters: params, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>, headers: <span class="literal">nil</span>).responseJSON &#123; (response) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> response.result.isSuccess&#123;</span><br><span class="line">            result(response.result.value!)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fail(response.error?.localizedDescription ?? <span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 下载文件</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 文件地址</span></span><br><span class="line"><span class="comment">///   - method: 请求方式</span></span><br><span class="line"><span class="comment">///   - param: 请求参数</span></span><br><span class="line"><span class="comment">///   - fileURL: 保存文件路径</span></span><br><span class="line"><span class="comment">///   - progress: 下载进度</span></span><br><span class="line"><span class="comment">///   - result: 成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_downloadFile</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> method: HTTPMethod? = .<span class="keyword">get</span>, <span class="number">_</span> param: ayParams? = <span class="literal">nil</span>, fileURL: URL, progress: @escaping <span class="params">(Progress)</span></span></span>-&gt;<span class="type">Void</span>, result: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="comment">//拼接文件保存地址</span></span><br><span class="line">    <span class="keyword">let</span> destination: <span class="type">DownloadRequest</span>.<span class="type">DownloadFileDestination</span> = &#123; <span class="number">_</span>, response <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> (fileURL.appendingPathComponent(response.suggestedFilename!), [.removePreviousFile, .createIntermediateDirectories])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Alamofire</span>.download(urlStr, method: method!, parameters: param, encoding: <span class="type">URLEncoding</span>.<span class="keyword">default</span>, headers: <span class="literal">nil</span>, to: destination).downloadProgress(queue: <span class="type">DispatchQueue</span>.main, closure: &#123; (progres) <span class="keyword">in</span></span><br><span class="line">        progress(progres)</span><br><span class="line">    &#125;).responseData&#123;(response) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> response.result.isSuccess &#123;</span><br><span class="line">            result(response.destinationURL!)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fail(response.error?.localizedDescription ?? <span class="string">"Error"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 文件上传</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// 上传文件时注意文件名与 mimeType</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 上传地址</span></span><br><span class="line"><span class="comment">///   - param: 上传参数</span></span><br><span class="line"><span class="comment">///   - filesData: 上传数据数组 data 类型</span></span><br><span class="line"><span class="comment">///   - progress: 上传进度</span></span><br><span class="line"><span class="comment">///   - result: 成功返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败返回数据</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_uploadFile</span><span class="params">(<span class="number">_</span> urlStr: String, <span class="number">_</span> param:ayParams? = <span class="literal">nil</span>,filesData: [Data], progress:@escaping <span class="params">(Progress)</span></span></span>-&gt;<span class="type">Void</span>, result: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>, fail: @escaping (<span class="type">Any</span>)-&gt;<span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="type">Alamofire</span>.upload(multipartFormData: &#123; (formData) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">for</span> data:<span class="type">Data</span> <span class="keyword">in</span> filesData &#123;</span><br><span class="line">            formData.append(data, withName: <span class="string">"file"</span>, fileName: <span class="string">"fileName.png"</span>, mimeType: <span class="string">"image/png"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> param != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (key , value) <span class="keyword">in</span> param! &#123;</span><br><span class="line">                formData.append(value.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!, withName: key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, to: urlStr) &#123; (encodingResult) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> encodingResult&#123;</span><br><span class="line">        <span class="keyword">case</span> .success(request: <span class="keyword">let</span> upload,<span class="number">_</span>,<span class="number">_</span>):</span><br><span class="line">            upload.uploadProgress(closure: &#123; (progres) <span class="keyword">in</span></span><br><span class="line">                progress(progres)</span><br><span class="line">            &#125;)</span><br><span class="line">            upload.responseJSON(completionHandler: &#123; (response) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> value = response.result.value <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">AnyObject</span>]&#123;</span><br><span class="line">                    result(value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            fail(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="系统网络请求"><a href="#系统网络请求" class="headerlink" title="系统网络请求"></a>系统网络请求</h1><blockquote>
<h2 id="post-请求-1"><a href="#post-请求-1" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// post 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 返回结果</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">post</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">params</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">    request.timeoutInterval = <span class="type">NetworkConfig</span>.timeoutInterval</span><br><span class="line">    request.httpMethod = <span class="string">"POST"</span></span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="type">String</span>()</span><br><span class="line">    <span class="keyword">for</span> (key , value) <span class="keyword">in</span> params &#123;</span><br><span class="line">        paramStr.append(<span class="string">"<span class="subst">\(key)</span>=<span class="subst">\(value)</span>&amp;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    paramStr.remove(at: paramStr.index(before: paramStr.endIndex))</span><br><span class="line">    request.httpBody = paramStr.data(using: .utf8)</span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .mutableContainers) &#123;</span><br><span class="line">                result(value)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result (<span class="type">String</span>.<span class="keyword">init</span>(data: data!, encoding: .utf8)!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="get-请求-1"><a href="#get-请求-1" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// get 请求</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 请求地址</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - result: 返回结果</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">get</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">params</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="type">String</span>()</span><br><span class="line">    <span class="keyword">for</span> (key , value) <span class="keyword">in</span> params &#123;</span><br><span class="line">        paramStr.append(<span class="string">"<span class="subst">\(key)</span>=<span class="subst">\(value)</span>&amp;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    paramStr.remove(at: paramStr.index(before: paramStr.endIndex))</span><br><span class="line">    <span class="keyword">var</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: <span class="type">URL</span>(string: urlStr + <span class="string">"?"</span> + paramStr)!)</span><br><span class="line">    request.timeoutInterval = <span class="type">NetworkConfig</span>.timeoutInterval</span><br><span class="line">    request.httpMethod = <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .mutableContainers) &#123;</span><br><span class="line">                result(value)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result (<span class="type">String</span>.<span class="keyword">init</span>(data: data!, encoding: .utf8)!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 文件下载</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 下载地址</span></span><br><span class="line"><span class="comment">///   - fileName: 文件名</span></span><br><span class="line"><span class="comment">///   - result: 文件缓存路径</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">download</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">fileName</span>: <span class="title">String</span>, <span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">String</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.downloadTask(with: request) &#123; (pathUrl, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> filePath: <span class="type">String</span> = pathUrl?.path &#123;</span><br><span class="line">                <span class="keyword">let</span> fileManager = <span class="type">FileManager</span>()</span><br><span class="line">                <span class="keyword">try</span>! fileManager.moveItem(atPath: filePath, toPath: <span class="type">NetworkConfig</span>.downloadPath.appending(fileName))</span><br><span class="line">                <span class="keyword">try</span>! fileManager.removeItem(atPath: filePath)</span><br><span class="line">                result(<span class="type">NetworkConfig</span>.downloadPath.appending(fileName))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="仿-form-表单多文件上传"><a href="#仿-form-表单多文件上传" class="headerlink" title="仿 form 表单多文件上传"></a>仿 form 表单多文件上传</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 仿 form 表单多文件上传</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - urlStr: 上传文件路径</span></span><br><span class="line"><span class="comment">///   - params: 请求参数</span></span><br><span class="line"><span class="comment">///   - filesData: 文件数据</span></span><br><span class="line"><span class="comment">///   - fileName: 文件名</span></span><br><span class="line"><span class="comment">///   - fileExtensions: 文件扩展名</span></span><br><span class="line"><span class="comment">///   - contentType: 文件类型</span></span><br><span class="line"><span class="comment">///   - result: 返回数据</span></span><br><span class="line"><span class="comment">///   - fail: 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">upload</span>(<span class="title">_</span> <span class="title">urlStr</span>: <span class="title">String</span>, <span class="title">params</span>: [<span class="title">String</span> : <span class="title">String</span>], <span class="title">filesData</span>: [<span class="title">Data</span>], <span class="title">fileName</span>: <span class="title">String</span>, <span class="title">fileExtensions</span>:<span class="title">String</span>, <span class="title">contentType</span>: <span class="title">String</span>,<span class="title">result</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>, <span class="title">fail</span>: @<span class="title">escaping</span> (<span class="title">Any</span>) -&gt; <span class="title">Void</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> boundary = <span class="string">"*****"</span> <span class="comment">// 分界标识</span></span><br><span class="line">    <span class="keyword">var</span> bodyData = <span class="type">Data</span>()</span><br><span class="line">    <span class="comment">// 添加普通参数</span></span><br><span class="line">    <span class="keyword">for</span> (key , value) <span class="keyword">in</span> params &#123;</span><br><span class="line">        bodyData.append(<span class="string">"\r\n--<span class="subst">\(boundary)</span>\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Disposition:form-data;name=\"<span class="subst">\(key)</span>\"\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Type:text/plain;charset=utf-8\r\n\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"<span class="subst">\(value)</span>"</span>.data(using: .utf8)!)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加文件数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; filesData.<span class="built_in">count</span> &#123;</span><br><span class="line">        bodyData.append(<span class="string">"\r\n--<span class="subst">\(boundary)</span>\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Disposition:form-data; name=\"file\";filename=<span class="subst">\(fileName)</span>-<span class="subst">\(i)</span>.<span class="subst">\(fileExtensions)</span>\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(<span class="string">"Content-Type: <span class="subst">\(contentType)</span>\r\n\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">        bodyData.append(filesData[i])</span><br><span class="line">    &#125;</span><br><span class="line">    bodyData.append(<span class="string">"\r\n--<span class="subst">\(boundary)</span>--\r\n"</span>.data(using: .utf8)!)</span><br><span class="line">    <span class="comment">// 设置 request</span></span><br><span class="line">    <span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">    request.addValue(<span class="string">"multipart/form-data;boundary=\"<span class="subst">\(boundary)</span>\";charset=\"UTF-8\""</span>, forHTTPHeaderField: <span class="string">"Content-Type"</span>)</span><br><span class="line">    request.addValue(<span class="string">"<span class="subst">\(bodyData.<span class="built_in">count</span>)</span>"</span>, forHTTPHeaderField: <span class="string">"Content-Length"</span>)</span><br><span class="line">    request.httpMethod = <span class="string">"POST"</span></span><br><span class="line">    request.httpBody = bodyData</span><br><span class="line">    request.timeoutInterval = <span class="type">NetworkConfig</span>.timeoutInterval</span><br><span class="line">    <span class="comment">// 发起请求</span></span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: <span class="type">NetworkConfig</span>.configuration)</span><br><span class="line">    <span class="keyword">let</span> task = session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .mutableContainers) &#123;</span><br><span class="line">                result(value)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result (<span class="type">String</span>.<span class="keyword">init</span>(data: data!, encoding: .utf8)!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fail(error.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="添加网络数据缓存类"><a href="#添加网络数据缓存类" class="headerlink" title="添加网络数据缓存类"></a>添加网络数据缓存类</h1><blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul>
<li>网络请求缓存处理</li>
<li>将网络请求结果保存在本地，发起网路请求时先检测缓存区是否有缓存数据并判断是否超出缓存有效时间，如果数据有效则加载缓存区数据，否则加载网络数据.</li>
<li>数据缓存采用 SQLite 存储，采用 FMDB 库.</li>
<li>缓存数据表表数据有 key,value,date 三个字段. key: 网络请求参数 MD5加密数据. value:网络请求数据. date: 数据有效时间</li>
<li>添加计时器,定时清除无效数据.</li>
</ul>
<h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter key: 键值</span></span><br><span class="line"><span class="comment">/// - Returns: 数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt; <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 添加数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - key: 键值</span></span><br><span class="line"><span class="comment">///   - result: 请求数据</span></span><br><span class="line"><span class="comment">///   - date: 有效时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addResult</span><span class="params">(<span class="number">_</span> key: String, result: String, date: TimeInterval)</span></span> -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 移除失效数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter date: 时间点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeResult</span><span class="params">(withOldDate date: TimeInterval)</span></span> -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 根据 key 移除数据</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter key: 键值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeResult</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><a href="https://github.com/AndyCuiYTT/AYNetwork_Swift" target="_blank" rel="noopener">具体实现参考 Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 Alamofire与系统的网络请求进行简易封装&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
    
      <category term="network" scheme="http://andycui.top/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>支付宝微信简单封装</title>
    <link href="http://andycui.top/2017/07/14/PayDemo/"/>
    <id>http://andycui.top/2017/07/14/PayDemo/</id>
    <published>2017-07-14T10:57:25.000Z</published>
    <updated>2018-05-30T04:44:13.108Z</updated>
    
    <content type="html"><![CDATA[<p>封装支付宝与微信支付,采用代理的方式接收支付结果.<br><a id="more"></a></p>
<h1 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h1><blockquote>
<h2 id="调起支付"><a href="#调起支付" class="headerlink" title="调起支付"></a>调起支付</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 调起支付宝支付</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - orderinfo: 商品信息字符串</span></span><br><span class="line"><span class="comment">///   - signedString: 商户信息签名</span></span><br><span class="line"><span class="comment">///   - fromScheme: 应用注册scheme</span></span><br><span class="line"><span class="comment">///   - resultDic: 支付结果回调</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">(<span class="number">_</span> orderinfo: String, signedString: String, fromScheme: String)</span></span> -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure>
<h2 id="支付结果回调-遵守-AlipayDelegate-协议"><a href="#支付结果回调-遵守-AlipayDelegate-协议" class="headerlink" title="支付结果回调,遵守 AlipayDelegate 协议"></a>支付结果回调,遵守 AlipayDelegate 协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 支付成功</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipaySuccess</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付失败</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipayFail</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付取消</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipayCancel</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 其他未知错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alipayUnknownError</span><span class="params">(<span class="number">_</span> result: Any)</span></span> -&gt; <span class="type">Void</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><blockquote>
<h2 id="调起支付-1"><a href="#调起支付-1" class="headerlink" title="调起支付"></a>调起支付</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 微信支付</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameter orderInfo: 支付信息(包含:partnerId,prepayId,package,nonceStr,timeStamp,sign等信息)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pay</span><span class="params">(<span class="number">_</span> orderInfo: [String : String])</span></span> -&gt; <span class="type">Void</span></span><br></pre></td></tr></table></figure>
<h2 id="微信支付-item"><a href="#微信支付-item" class="headerlink" title="微信支付 item"></a>微信支付 item</h2><blockquote>
<ul>
<li>appid: 应用ID(微信开放平台审核通过的应用APPID)</li>
<li>partnerid: 商户号(微信支付分配的商户号)</li>
<li>prepayid: 预支付交易会话ID(微信返回的支付交易会话ID)</li>
<li>package: 扩展字段(只读)</li>
<li>noncestr： 随机字符串（只读）</li>
<li>timestamp： 时间撮（只读）</li>
<li>getSignDic()： 获取签名后的字典</li>
</ul>
</blockquote>
<h2 id="数据签名-获取签名字符串"><a href="#数据签名-获取签名字符串" class="headerlink" title="数据签名(获取签名字符串)"></a>数据签名(获取签名字符串)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取签名字符串(MD5 签名)</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Parameters:</span></span><br><span class="line"><span class="comment">///   - orderInfo: 支付信息</span></span><br><span class="line"><span class="comment">///   - keyStr: API密钥</span></span><br><span class="line"><span class="comment">/// - Returns: 签名字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSignStr</span><span class="params">(<span class="number">_</span> orderInfo: [String : String] ,keyStr: String)</span></span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure>
<h2 id="支付结果回调-遵守-WeChatPayDelegate-协议"><a href="#支付结果回调-遵守-WeChatPayDelegate-协议" class="headerlink" title="支付结果回调,遵守 WeChatPayDelegate 协议"></a>支付结果回调,遵守 WeChatPayDelegate 协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 微信未安装</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPayWXAppUninstall</span><span class="params">()</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付成功</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPaySuccess</span><span class="params">()</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付失败</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPayFail</span><span class="params">(errStr: String)</span></span> -&gt; <span class="type">Void</span>;</span><br><span class="line"><span class="comment">/// 支付取消</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WeChatPayCancel</span><span class="params">()</span></span> -&gt; <span class="type">Void</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><a href="https://github.com/AndyCuiYTT/PayDemo" target="_blank" rel="noopener">具体实现参考 Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;封装支付宝与微信支付,采用代理的方式接收支付结果.&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="三方接入" scheme="http://andycui.top/categories/iOS/%E4%B8%89%E6%96%B9%E6%8E%A5%E5%85%A5/"/>
    
    
      <category term="pay" scheme="http://andycui.top/tags/pay/"/>
    
      <category term="alipay" scheme="http://andycui.top/tags/alipay/"/>
    
      <category term="wechatpay" scheme="http://andycui.top/tags/wechatpay/"/>
    
  </entry>
  
  <entry>
    <title>[swift] 星级评分</title>
    <link href="http://andycui.top/2017/07/13/swift-%E6%98%9F%E7%BA%A7%E8%AF%84%E5%88%86/"/>
    <id>http://andycui.top/2017/07/13/swift-星级评分/</id>
    <published>2017-07-13T03:39:29.000Z</published>
    <updated>2018-05-30T04:45:30.090Z</updated>
    
    <content type="html"><![CDATA[<p>许多App都会有评价功能，这个时候或许会需要实现星级评分，下面我们来简单的实现一个星级评分功能。<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote>
<p>通过添加图片形式实现星级打分功能.创建两个视图,其中一个添加灰色星星图片,另一个添加橘色星星图片.橘色星星视图覆盖灰色星星视图,通过修改橘色星星视图的宽度实现评分的展现.</p>
<ol>
<li>创建一个继承于 UIView 的类,作为星级打分的显示视图</li>
<li>创建灰色星星视图,并添加到父视图.</li>
<li>创建橘色星星视图,添加到父视图,保证橘色视图覆盖灰色星星视图.</li>
<li>通过修改橘色星星视图宽度实现评分.</li>
<li>可通过手势等方式实现打分功能.</li>
</ol>
</blockquote>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><h3 id="创建子视图代码"><a href="#创建子视图代码" class="headerlink" title="创建子视图代码:"></a>创建子视图代码:</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ay_creatStartView</span><span class="params">(<span class="number">_</span> imageName: String)</span></span> -&gt; <span class="type">UIView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> starView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="keyword">self</span>.frame.width, height: <span class="keyword">self</span>.frame.height))</span><br><span class="line">        starView.clipsToBounds = <span class="literal">true</span></span><br><span class="line">        starView.backgroundColor = <span class="type">UIColor</span>.clear</span><br><span class="line">        starView.isUserInteractionEnabled = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> imgViewWidth = (<span class="keyword">self</span>.frame.width - <span class="type">CGFloat</span>(totalStarNumber - <span class="number">1</span>) * <span class="number">3</span>) / <span class="type">CGFloat</span>(totalStarNumber)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; totalStarNumber &#123;</span><br><span class="line">            <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(named: imageName))</span><br><span class="line">            imageView.frame = <span class="type">CGRect</span>(x: <span class="type">CGFloat</span>(i) * (imgViewWidth + <span class="number">3</span>), y: <span class="number">0</span>, width: imgViewWidth, height: <span class="keyword">self</span>.frame.height)</span><br><span class="line">            imageView.contentMode = .scaleAspectFit</span><br><span class="line">            starView.addSubview(imageView)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> starView</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="手指滑动打分代码"><a href="#手指滑动打分代码" class="headerlink" title="手指滑动打分代码"></a>手指滑动打分代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesMoved</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">       <span class="keyword">let</span> touch = touches.first</span><br><span class="line">       <span class="keyword">let</span> point = touch?.location(<span class="keyword">in</span>: <span class="keyword">self</span>)</span><br><span class="line">       <span class="keyword">if</span> (point?.x)! &gt;= <span class="type">CGFloat</span>(<span class="number">0</span>) &amp;&amp; (point?.x)! &lt;= <span class="keyword">self</span>.frame.width &#123;</span><br><span class="line">           rate = (point?.x)! / <span class="keyword">self</span>.frame.width</span><br><span class="line">           delegate?.ay_starRateChange(rate: rate)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">       <span class="keyword">let</span> touch = touches.first</span><br><span class="line">       <span class="keyword">let</span> point = touch?.location(<span class="keyword">in</span>: <span class="keyword">self</span>)</span><br><span class="line">       rate = (point?.x)! / <span class="keyword">self</span>.frame.width</span><br><span class="line">       delegate?.ay_starRateChange(rate: rate)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/AndyCuiYTT/StarRating" target="_blank" rel="noopener">具体实现参考Demo</a></p>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>星级评分通过图片实现是最简单的办法,当然也可以通过其他方式实现.例如通过 UIBezierPath 绘制,具体可参考<a href="https://git.oschina.net/soyeon/CPSliderView" target="_blank" rel="noopener">CPSliderView</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多App都会有评价功能，这个时候或许会需要实现星级评分，下面我们来简单的实现一个星级评分功能。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="自定义视图" scheme="http://andycui.top/categories/iOS/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="自定义视图" scheme="http://andycui.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>通过 UIBezierPath 与 CAShapeLayer 为 UIView 添加边框</title>
    <link href="http://andycui.top/2017/07/12/%E9%80%9A%E8%BF%87-CGMutablePath-%E4%B8%BA-UIView-%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86/"/>
    <id>http://andycui.top/2017/07/12/通过-CGMutablePath-为-UIView-添加边框/</id>
    <published>2017-07-12T06:44:15.000Z</published>
    <updated>2018-05-30T04:41:24.589Z</updated>
    
    <content type="html"><![CDATA[<p> 通过贝塞尔曲线与 CAShapeLayer 为 View 添加虚线边框,可设置宽度,颜色,圆角等<br><a id="more"></a></p>
<p><img src="17-7-12.png" alt="效果图"></p>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h2> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 为视图添加虚线边框</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - Parameters:</span></span><br><span class="line">  <span class="comment">///   - view: 要添加边框的视图</span></span><br><span class="line">  <span class="comment">///   - size: 视图 size</span></span><br><span class="line">  <span class="comment">///   - cornerRadius: 视图圆角 默认:10</span></span><br><span class="line">  <span class="comment">///   - lineWidth: 边框宽 默认: 1</span></span><br><span class="line">  <span class="comment">///   - lineColor: 边框颜色 默认: black</span></span><br><span class="line">  <span class="comment">///   - lineDashPattern: 边框段长和间距 默认: [5,3]</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">addBorderLine</span><span class="params">(view:UIView, size:CGSize, cornerRadius:CGFloat = <span class="number">10</span>, lineWidth:CGFloat = <span class="number">1</span>, lineColor:Color? = Color.black, lineDashPattern: [NSNumber] = [<span class="number">5</span>,<span class="number">3</span>])</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> shaplayer = <span class="type">CAShapeLayer</span>()</span><br><span class="line">      shaplayer.bounds = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size.width, height: size.height)</span><br><span class="line">      shaplayer.anchorPoint = <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line">      shaplayer.fillColor = <span class="type">Color</span>.clear.cgColor</span><br><span class="line">      shaplayer.strokeColor = lineColor?.cgColor</span><br><span class="line">      shaplayer.lineWidth = lineWidth</span><br><span class="line">      shaplayer.lineJoin = <span class="string">"miter"</span></span><br><span class="line">      shaplayer.lineDashPattern = [<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">      <span class="keyword">let</span> path = <span class="type">CGMutablePath</span>()</span><br><span class="line">      path.move(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: cornerRadius + lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: .pi, endAngle: .pi / <span class="number">2</span> * <span class="number">3</span>, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - cornerRadius - lineWidth / <span class="number">2</span>, y: lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - cornerRadius - lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: .pi / <span class="number">2</span> * <span class="number">3</span>, endAngle: .pi * <span class="number">2</span>, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - lineWidth / <span class="number">2</span>, y: size.height - cornerRadius - lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width - cornerRadius - lineWidth / <span class="number">2</span>, y:  size.height - cornerRadius - lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: <span class="number">0</span>, endAngle: .pi / <span class="number">2</span>, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: cornerRadius + lineWidth / <span class="number">2</span>, y: size.height - lineWidth / <span class="number">2</span>))</span><br><span class="line">      path.addArc(center: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: cornerRadius + lineWidth / <span class="number">2</span>, y:  size.height - cornerRadius - lineWidth / <span class="number">2</span>), radius: cornerRadius, startAngle: .pi / <span class="number">2</span>, endAngle: .pi, clockwise: <span class="literal">false</span>)</span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: lineWidth / <span class="number">2</span>, y: cornerRadius + lineWidth / <span class="number">2</span>))</span><br><span class="line">      shaplayer.path = path</span><br><span class="line">      view.layer.addSublayer(shaplayer)</span><br><span class="line">      view.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">      view.layer.cornerRadius = cornerRadius</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 通过贝塞尔曲线与 CAShapeLayer 为 View 添加虚线边框,可设置宽度,颜色,圆角等&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://andycui.top/categories/iOS/"/>
    
      <category term="绘图" scheme="http://andycui.top/categories/iOS/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="UIBezierPath" scheme="http://andycui.top/tags/UIBezierPath/"/>
    
      <category term="CAShapeLayer" scheme="http://andycui.top/tags/CAShapeLayer/"/>
    
  </entry>
  
  <entry>
    <title>常阅读的博客</title>
    <link href="http://andycui.top/2017/05/20/%E5%B8%B8%E9%98%85%E8%AF%BB%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://andycui.top/2017/05/20/常阅读的博客/</id>
    <published>2017-05-20T08:55:18.000Z</published>
    <updated>2018-05-30T04:37:42.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我要申明，排名不分前后</p>
</blockquote>
<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><p><a href="https://objccn.io/" target="_blank" rel="noopener">ObjC 中国</a></p>
<p><a href="http://blog.cnbang.net/" target="_blank" rel="noopener">bang’s blog</a></p>
<a id="more"></a>
<p><a href="http://blog.devtang.com/" target="_blank" rel="noopener">唐巧的技术博客</a></p>
<p><a href="http://limboy.me/" target="_blank" rel="noopener">蘑菇街李忠</a></p>
<p><a href="http://blog.leichunfeng.com/" target="_blank" rel="noopener">雷纯锋的技术博客</a></p>
<p><a href="http://sergiochan.xyz/archives/" target="_blank" rel="noopener">Sergio Chan</a></p>
<p><a href="http://zhoulingyu.com" target="_blank" rel="noopener">自己的博客</a></p>
<p><a href="http://casatwy.com/" target="_blank" rel="noopener">casa 的博客</a></p>
<p><a href="http://www.jianshu.com/u/12201cdd5d7a" target="_blank" rel="noopener">冰霜的博客</a></p>
<p><a href="http://www.jianshu.com/u/pBfFKp" target="_blank" rel="noopener">串神的博客</a></p>
<p><a href="http://www.jianshu.com/u/cc1e4faec5f7" target="_blank" rel="noopener">南栀的博客</a></p>
<p><a href="http://www.jianshu.com/u/88a056103c02" target="_blank" rel="noopener">卓同学的博客</a></p>
<p><a href="http://www.jianshu.com/u/16ae66cdf6a0" target="_blank" rel="noopener">判若两人丶的博客</a></p>
<p><a href="http://draveness.me/" target="_blank" rel="noopener">draveness 的博客</a></p>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p><a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a></p>
<p><a href="http://pandara.xyz/" target="_blank" rel="noopener">pandar’s blog</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我要申明，排名不分前后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;iOS&quot;&gt;&lt;a href=&quot;#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://objccn.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ObjC 中国&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbang.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bang’s blog&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://andycui.top/categories/Other/"/>
    
      <category term="阅读列表" scheme="http://andycui.top/categories/Other/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    
    
      <category term="Other" scheme="http://andycui.top/tags/Other/"/>
    
      <category term="Blog" scheme="http://andycui.top/tags/Blog/"/>
    
  </entry>
  
</feed>
